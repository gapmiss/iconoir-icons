/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  buildPostProcessor: () => buildPostProcessor,
  default: () => IconoirPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/@lit/reactive-element/css-tag.js
var t = window;
var e = t.ShadowRoot && (t.ShadyCSS === void 0 || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var s = Symbol();
var n = /* @__PURE__ */ new WeakMap();
var o = class {
  constructor(t3, e4, n5) {
    if (this._$cssResult$ = true, n5 !== s)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t3, this.t = e4;
  }
  get styleSheet() {
    let t3 = this.o;
    const s5 = this.t;
    if (e && t3 === void 0) {
      const e4 = s5 !== void 0 && s5.length === 1;
      e4 && (t3 = n.get(s5)), t3 === void 0 && ((this.o = t3 = new CSSStyleSheet()).replaceSync(this.cssText), e4 && n.set(s5, t3));
    }
    return t3;
  }
  toString() {
    return this.cssText;
  }
};
var r = (t3) => new o(typeof t3 == "string" ? t3 : t3 + "", void 0, s);
var S = (s5, n5) => {
  e ? s5.adoptedStyleSheets = n5.map((t3) => t3 instanceof CSSStyleSheet ? t3 : t3.styleSheet) : n5.forEach((e4) => {
    const n6 = document.createElement("style"), o5 = t.litNonce;
    o5 !== void 0 && n6.setAttribute("nonce", o5), n6.textContent = e4.cssText, s5.appendChild(n6);
  });
};
var c = e ? (t3) => t3 : (t3) => t3 instanceof CSSStyleSheet ? ((t4) => {
  let e4 = "";
  for (const s5 of t4.cssRules)
    e4 += s5.cssText;
  return r(e4);
})(t3) : t3;

// node_modules/@lit/reactive-element/reactive-element.js
var s2;
var e2 = window;
var r2 = e2.trustedTypes;
var h = r2 ? r2.emptyScript : "";
var o2 = e2.reactiveElementPolyfillSupport;
var n2 = { toAttribute(t3, i3) {
  switch (i3) {
    case Boolean:
      t3 = t3 ? h : null;
      break;
    case Object:
    case Array:
      t3 = t3 == null ? t3 : JSON.stringify(t3);
  }
  return t3;
}, fromAttribute(t3, i3) {
  let s5 = t3;
  switch (i3) {
    case Boolean:
      s5 = t3 !== null;
      break;
    case Number:
      s5 = t3 === null ? null : Number(t3);
      break;
    case Object:
    case Array:
      try {
        s5 = JSON.parse(t3);
      } catch (t4) {
        s5 = null;
      }
  }
  return s5;
} };
var a = (t3, i3) => i3 !== t3 && (i3 == i3 || t3 == t3);
var l = { attribute: true, type: String, converter: n2, reflect: false, hasChanged: a };
var d = class extends HTMLElement {
  constructor() {
    super(), this._$Ei = /* @__PURE__ */ new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$El = null, this.u();
  }
  static addInitializer(t3) {
    var i3;
    this.finalize(), ((i3 = this.h) !== null && i3 !== void 0 ? i3 : this.h = []).push(t3);
  }
  static get observedAttributes() {
    this.finalize();
    const t3 = [];
    return this.elementProperties.forEach((i3, s5) => {
      const e4 = this._$Ep(s5, i3);
      e4 !== void 0 && (this._$Ev.set(e4, s5), t3.push(e4));
    }), t3;
  }
  static createProperty(t3, i3 = l) {
    if (i3.state && (i3.attribute = false), this.finalize(), this.elementProperties.set(t3, i3), !i3.noAccessor && !this.prototype.hasOwnProperty(t3)) {
      const s5 = typeof t3 == "symbol" ? Symbol() : "__" + t3, e4 = this.getPropertyDescriptor(t3, s5, i3);
      e4 !== void 0 && Object.defineProperty(this.prototype, t3, e4);
    }
  }
  static getPropertyDescriptor(t3, i3, s5) {
    return { get() {
      return this[i3];
    }, set(e4) {
      const r4 = this[t3];
      this[i3] = e4, this.requestUpdate(t3, r4, s5);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t3) {
    return this.elementProperties.get(t3) || l;
  }
  static finalize() {
    if (this.hasOwnProperty("finalized"))
      return false;
    this.finalized = true;
    const t3 = Object.getPrototypeOf(this);
    if (t3.finalize(), t3.h !== void 0 && (this.h = [...t3.h]), this.elementProperties = new Map(t3.elementProperties), this._$Ev = /* @__PURE__ */ new Map(), this.hasOwnProperty("properties")) {
      const t4 = this.properties, i3 = [...Object.getOwnPropertyNames(t4), ...Object.getOwnPropertySymbols(t4)];
      for (const s5 of i3)
        this.createProperty(s5, t4[s5]);
    }
    return this.elementStyles = this.finalizeStyles(this.styles), true;
  }
  static finalizeStyles(i3) {
    const s5 = [];
    if (Array.isArray(i3)) {
      const e4 = new Set(i3.flat(1 / 0).reverse());
      for (const i4 of e4)
        s5.unshift(c(i4));
    } else
      i3 !== void 0 && s5.push(c(i3));
    return s5;
  }
  static _$Ep(t3, i3) {
    const s5 = i3.attribute;
    return s5 === false ? void 0 : typeof s5 == "string" ? s5 : typeof t3 == "string" ? t3.toLowerCase() : void 0;
  }
  u() {
    var t3;
    this._$E_ = new Promise((t4) => this.enableUpdating = t4), this._$AL = /* @__PURE__ */ new Map(), this._$Eg(), this.requestUpdate(), (t3 = this.constructor.h) === null || t3 === void 0 || t3.forEach((t4) => t4(this));
  }
  addController(t3) {
    var i3, s5;
    ((i3 = this._$ES) !== null && i3 !== void 0 ? i3 : this._$ES = []).push(t3), this.renderRoot !== void 0 && this.isConnected && ((s5 = t3.hostConnected) === null || s5 === void 0 || s5.call(t3));
  }
  removeController(t3) {
    var i3;
    (i3 = this._$ES) === null || i3 === void 0 || i3.splice(this._$ES.indexOf(t3) >>> 0, 1);
  }
  _$Eg() {
    this.constructor.elementProperties.forEach((t3, i3) => {
      this.hasOwnProperty(i3) && (this._$Ei.set(i3, this[i3]), delete this[i3]);
    });
  }
  createRenderRoot() {
    var t3;
    const s5 = (t3 = this.shadowRoot) !== null && t3 !== void 0 ? t3 : this.attachShadow(this.constructor.shadowRootOptions);
    return S(s5, this.constructor.elementStyles), s5;
  }
  connectedCallback() {
    var t3;
    this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t3 = this._$ES) === null || t3 === void 0 || t3.forEach((t4) => {
      var i3;
      return (i3 = t4.hostConnected) === null || i3 === void 0 ? void 0 : i3.call(t4);
    });
  }
  enableUpdating(t3) {
  }
  disconnectedCallback() {
    var t3;
    (t3 = this._$ES) === null || t3 === void 0 || t3.forEach((t4) => {
      var i3;
      return (i3 = t4.hostDisconnected) === null || i3 === void 0 ? void 0 : i3.call(t4);
    });
  }
  attributeChangedCallback(t3, i3, s5) {
    this._$AK(t3, s5);
  }
  _$EO(t3, i3, s5 = l) {
    var e4;
    const r4 = this.constructor._$Ep(t3, s5);
    if (r4 !== void 0 && s5.reflect === true) {
      const h3 = (((e4 = s5.converter) === null || e4 === void 0 ? void 0 : e4.toAttribute) !== void 0 ? s5.converter : n2).toAttribute(i3, s5.type);
      this._$El = t3, h3 == null ? this.removeAttribute(r4) : this.setAttribute(r4, h3), this._$El = null;
    }
  }
  _$AK(t3, i3) {
    var s5;
    const e4 = this.constructor, r4 = e4._$Ev.get(t3);
    if (r4 !== void 0 && this._$El !== r4) {
      const t4 = e4.getPropertyOptions(r4), h3 = typeof t4.converter == "function" ? { fromAttribute: t4.converter } : ((s5 = t4.converter) === null || s5 === void 0 ? void 0 : s5.fromAttribute) !== void 0 ? t4.converter : n2;
      this._$El = r4, this[r4] = h3.fromAttribute(i3, t4.type), this._$El = null;
    }
  }
  requestUpdate(t3, i3, s5) {
    let e4 = true;
    t3 !== void 0 && (((s5 = s5 || this.constructor.getPropertyOptions(t3)).hasChanged || a)(this[t3], i3) ? (this._$AL.has(t3) || this._$AL.set(t3, i3), s5.reflect === true && this._$El !== t3 && (this._$EC === void 0 && (this._$EC = /* @__PURE__ */ new Map()), this._$EC.set(t3, s5))) : e4 = false), !this.isUpdatePending && e4 && (this._$E_ = this._$Ej());
  }
  async _$Ej() {
    this.isUpdatePending = true;
    try {
      await this._$E_;
    } catch (t4) {
      Promise.reject(t4);
    }
    const t3 = this.scheduleUpdate();
    return t3 != null && await t3, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var t3;
    if (!this.isUpdatePending)
      return;
    this.hasUpdated, this._$Ei && (this._$Ei.forEach((t4, i4) => this[i4] = t4), this._$Ei = void 0);
    let i3 = false;
    const s5 = this._$AL;
    try {
      i3 = this.shouldUpdate(s5), i3 ? (this.willUpdate(s5), (t3 = this._$ES) === null || t3 === void 0 || t3.forEach((t4) => {
        var i4;
        return (i4 = t4.hostUpdate) === null || i4 === void 0 ? void 0 : i4.call(t4);
      }), this.update(s5)) : this._$Ek();
    } catch (t4) {
      throw i3 = false, this._$Ek(), t4;
    }
    i3 && this._$AE(s5);
  }
  willUpdate(t3) {
  }
  _$AE(t3) {
    var i3;
    (i3 = this._$ES) === null || i3 === void 0 || i3.forEach((t4) => {
      var i4;
      return (i4 = t4.hostUpdated) === null || i4 === void 0 ? void 0 : i4.call(t4);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t3)), this.updated(t3);
  }
  _$Ek() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$E_;
  }
  shouldUpdate(t3) {
    return true;
  }
  update(t3) {
    this._$EC !== void 0 && (this._$EC.forEach((t4, i3) => this._$EO(i3, this[i3], t4)), this._$EC = void 0), this._$Ek();
  }
  updated(t3) {
  }
  firstUpdated(t3) {
  }
};
d.finalized = true, d.elementProperties = /* @__PURE__ */ new Map(), d.elementStyles = [], d.shadowRootOptions = { mode: "open" }, o2 == null || o2({ ReactiveElement: d }), ((s2 = e2.reactiveElementVersions) !== null && s2 !== void 0 ? s2 : e2.reactiveElementVersions = []).push("1.6.1");

// node_modules/lit-html/lit-html.js
var t2;
var i2 = window;
var s3 = i2.trustedTypes;
var e3 = s3 ? s3.createPolicy("lit-html", { createHTML: (t3) => t3 }) : void 0;
var o3 = `lit$${(Math.random() + "").slice(9)}$`;
var n3 = "?" + o3;
var l2 = `<${n3}>`;
var h2 = document;
var r3 = (t3 = "") => h2.createComment(t3);
var d2 = (t3) => t3 === null || typeof t3 != "object" && typeof t3 != "function";
var u = Array.isArray;
var c2 = (t3) => u(t3) || typeof (t3 == null ? void 0 : t3[Symbol.iterator]) == "function";
var v = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var a2 = /-->/g;
var f = />/g;
var _ = RegExp(`>|[ 	
\f\r](?:([^\\s"'>=/]+)([ 	
\f\r]*=[ 	
\f\r]*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var m = /'/g;
var p = /"/g;
var $ = /^(?:script|style|textarea|title)$/i;
var g = (t3) => (i3, ...s5) => ({ _$litType$: t3, strings: i3, values: s5 });
var y = g(1);
var w = g(2);
var x = Symbol.for("lit-noChange");
var b = Symbol.for("lit-nothing");
var T = /* @__PURE__ */ new WeakMap();
var A = h2.createTreeWalker(h2, 129, null, false);
var E = (t3, i3) => {
  const s5 = t3.length - 1, n5 = [];
  let h3, r4 = i3 === 2 ? "<svg>" : "", d3 = v;
  for (let i4 = 0; i4 < s5; i4++) {
    const s6 = t3[i4];
    let e4, u3, c3 = -1, g2 = 0;
    for (; g2 < s6.length && (d3.lastIndex = g2, u3 = d3.exec(s6), u3 !== null); )
      g2 = d3.lastIndex, d3 === v ? u3[1] === "!--" ? d3 = a2 : u3[1] !== void 0 ? d3 = f : u3[2] !== void 0 ? ($.test(u3[2]) && (h3 = RegExp("</" + u3[2], "g")), d3 = _) : u3[3] !== void 0 && (d3 = _) : d3 === _ ? u3[0] === ">" ? (d3 = h3 != null ? h3 : v, c3 = -1) : u3[1] === void 0 ? c3 = -2 : (c3 = d3.lastIndex - u3[2].length, e4 = u3[1], d3 = u3[3] === void 0 ? _ : u3[3] === '"' ? p : m) : d3 === p || d3 === m ? d3 = _ : d3 === a2 || d3 === f ? d3 = v : (d3 = _, h3 = void 0);
    const y2 = d3 === _ && t3[i4 + 1].startsWith("/>") ? " " : "";
    r4 += d3 === v ? s6 + l2 : c3 >= 0 ? (n5.push(e4), s6.slice(0, c3) + "$lit$" + s6.slice(c3) + o3 + y2) : s6 + o3 + (c3 === -2 ? (n5.push(void 0), i4) : y2);
  }
  const u2 = r4 + (t3[s5] || "<?>") + (i3 === 2 ? "</svg>" : "");
  if (!Array.isArray(t3) || !t3.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return [e3 !== void 0 ? e3.createHTML(u2) : u2, n5];
};
var C = class {
  constructor({ strings: t3, _$litType$: i3 }, e4) {
    let l4;
    this.parts = [];
    let h3 = 0, d3 = 0;
    const u2 = t3.length - 1, c3 = this.parts, [v2, a3] = E(t3, i3);
    if (this.el = C.createElement(v2, e4), A.currentNode = this.el.content, i3 === 2) {
      const t4 = this.el.content, i4 = t4.firstChild;
      i4.remove(), t4.append(...i4.childNodes);
    }
    for (; (l4 = A.nextNode()) !== null && c3.length < u2; ) {
      if (l4.nodeType === 1) {
        if (l4.hasAttributes()) {
          const t4 = [];
          for (const i4 of l4.getAttributeNames())
            if (i4.endsWith("$lit$") || i4.startsWith(o3)) {
              const s5 = a3[d3++];
              if (t4.push(i4), s5 !== void 0) {
                const t5 = l4.getAttribute(s5.toLowerCase() + "$lit$").split(o3), i5 = /([.?@])?(.*)/.exec(s5);
                c3.push({ type: 1, index: h3, name: i5[2], strings: t5, ctor: i5[1] === "." ? M : i5[1] === "?" ? k : i5[1] === "@" ? H : S2 });
              } else
                c3.push({ type: 6, index: h3 });
            }
          for (const i4 of t4)
            l4.removeAttribute(i4);
        }
        if ($.test(l4.tagName)) {
          const t4 = l4.textContent.split(o3), i4 = t4.length - 1;
          if (i4 > 0) {
            l4.textContent = s3 ? s3.emptyScript : "";
            for (let s5 = 0; s5 < i4; s5++)
              l4.append(t4[s5], r3()), A.nextNode(), c3.push({ type: 2, index: ++h3 });
            l4.append(t4[i4], r3());
          }
        }
      } else if (l4.nodeType === 8)
        if (l4.data === n3)
          c3.push({ type: 2, index: h3 });
        else {
          let t4 = -1;
          for (; (t4 = l4.data.indexOf(o3, t4 + 1)) !== -1; )
            c3.push({ type: 7, index: h3 }), t4 += o3.length - 1;
        }
      h3++;
    }
  }
  static createElement(t3, i3) {
    const s5 = h2.createElement("template");
    return s5.innerHTML = t3, s5;
  }
};
function P(t3, i3, s5 = t3, e4) {
  var o5, n5, l4, h3;
  if (i3 === x)
    return i3;
  let r4 = e4 !== void 0 ? (o5 = s5._$Co) === null || o5 === void 0 ? void 0 : o5[e4] : s5._$Cl;
  const u2 = d2(i3) ? void 0 : i3._$litDirective$;
  return (r4 == null ? void 0 : r4.constructor) !== u2 && ((n5 = r4 == null ? void 0 : r4._$AO) === null || n5 === void 0 || n5.call(r4, false), u2 === void 0 ? r4 = void 0 : (r4 = new u2(t3), r4._$AT(t3, s5, e4)), e4 !== void 0 ? ((l4 = (h3 = s5)._$Co) !== null && l4 !== void 0 ? l4 : h3._$Co = [])[e4] = r4 : s5._$Cl = r4), r4 !== void 0 && (i3 = P(t3, r4._$AS(t3, i3.values), r4, e4)), i3;
}
var V = class {
  constructor(t3, i3) {
    this.u = [], this._$AN = void 0, this._$AD = t3, this._$AM = i3;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  v(t3) {
    var i3;
    const { el: { content: s5 }, parts: e4 } = this._$AD, o5 = ((i3 = t3 == null ? void 0 : t3.creationScope) !== null && i3 !== void 0 ? i3 : h2).importNode(s5, true);
    A.currentNode = o5;
    let n5 = A.nextNode(), l4 = 0, r4 = 0, d3 = e4[0];
    for (; d3 !== void 0; ) {
      if (l4 === d3.index) {
        let i4;
        d3.type === 2 ? i4 = new N(n5, n5.nextSibling, this, t3) : d3.type === 1 ? i4 = new d3.ctor(n5, d3.name, d3.strings, this, t3) : d3.type === 6 && (i4 = new I(n5, this, t3)), this.u.push(i4), d3 = e4[++r4];
      }
      l4 !== (d3 == null ? void 0 : d3.index) && (n5 = A.nextNode(), l4++);
    }
    return o5;
  }
  p(t3) {
    let i3 = 0;
    for (const s5 of this.u)
      s5 !== void 0 && (s5.strings !== void 0 ? (s5._$AI(t3, s5, i3), i3 += s5.strings.length - 2) : s5._$AI(t3[i3])), i3++;
  }
};
var N = class {
  constructor(t3, i3, s5, e4) {
    var o5;
    this.type = 2, this._$AH = b, this._$AN = void 0, this._$AA = t3, this._$AB = i3, this._$AM = s5, this.options = e4, this._$Cm = (o5 = e4 == null ? void 0 : e4.isConnected) === null || o5 === void 0 || o5;
  }
  get _$AU() {
    var t3, i3;
    return (i3 = (t3 = this._$AM) === null || t3 === void 0 ? void 0 : t3._$AU) !== null && i3 !== void 0 ? i3 : this._$Cm;
  }
  get parentNode() {
    let t3 = this._$AA.parentNode;
    const i3 = this._$AM;
    return i3 !== void 0 && t3.nodeType === 11 && (t3 = i3.parentNode), t3;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t3, i3 = this) {
    t3 = P(this, t3, i3), d2(t3) ? t3 === b || t3 == null || t3 === "" ? (this._$AH !== b && this._$AR(), this._$AH = b) : t3 !== this._$AH && t3 !== x && this.g(t3) : t3._$litType$ !== void 0 ? this.$(t3) : t3.nodeType !== void 0 ? this.T(t3) : c2(t3) ? this.k(t3) : this.g(t3);
  }
  O(t3, i3 = this._$AB) {
    return this._$AA.parentNode.insertBefore(t3, i3);
  }
  T(t3) {
    this._$AH !== t3 && (this._$AR(), this._$AH = this.O(t3));
  }
  g(t3) {
    this._$AH !== b && d2(this._$AH) ? this._$AA.nextSibling.data = t3 : this.T(h2.createTextNode(t3)), this._$AH = t3;
  }
  $(t3) {
    var i3;
    const { values: s5, _$litType$: e4 } = t3, o5 = typeof e4 == "number" ? this._$AC(t3) : (e4.el === void 0 && (e4.el = C.createElement(e4.h, this.options)), e4);
    if (((i3 = this._$AH) === null || i3 === void 0 ? void 0 : i3._$AD) === o5)
      this._$AH.p(s5);
    else {
      const t4 = new V(o5, this), i4 = t4.v(this.options);
      t4.p(s5), this.T(i4), this._$AH = t4;
    }
  }
  _$AC(t3) {
    let i3 = T.get(t3.strings);
    return i3 === void 0 && T.set(t3.strings, i3 = new C(t3)), i3;
  }
  k(t3) {
    u(this._$AH) || (this._$AH = [], this._$AR());
    const i3 = this._$AH;
    let s5, e4 = 0;
    for (const o5 of t3)
      e4 === i3.length ? i3.push(s5 = new N(this.O(r3()), this.O(r3()), this, this.options)) : s5 = i3[e4], s5._$AI(o5), e4++;
    e4 < i3.length && (this._$AR(s5 && s5._$AB.nextSibling, e4), i3.length = e4);
  }
  _$AR(t3 = this._$AA.nextSibling, i3) {
    var s5;
    for ((s5 = this._$AP) === null || s5 === void 0 || s5.call(this, false, true, i3); t3 && t3 !== this._$AB; ) {
      const i4 = t3.nextSibling;
      t3.remove(), t3 = i4;
    }
  }
  setConnected(t3) {
    var i3;
    this._$AM === void 0 && (this._$Cm = t3, (i3 = this._$AP) === null || i3 === void 0 || i3.call(this, t3));
  }
};
var S2 = class {
  constructor(t3, i3, s5, e4, o5) {
    this.type = 1, this._$AH = b, this._$AN = void 0, this.element = t3, this.name = i3, this._$AM = e4, this.options = o5, s5.length > 2 || s5[0] !== "" || s5[1] !== "" ? (this._$AH = Array(s5.length - 1).fill(new String()), this.strings = s5) : this._$AH = b;
  }
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t3, i3 = this, s5, e4) {
    const o5 = this.strings;
    let n5 = false;
    if (o5 === void 0)
      t3 = P(this, t3, i3, 0), n5 = !d2(t3) || t3 !== this._$AH && t3 !== x, n5 && (this._$AH = t3);
    else {
      const e5 = t3;
      let l4, h3;
      for (t3 = o5[0], l4 = 0; l4 < o5.length - 1; l4++)
        h3 = P(this, e5[s5 + l4], i3, l4), h3 === x && (h3 = this._$AH[l4]), n5 || (n5 = !d2(h3) || h3 !== this._$AH[l4]), h3 === b ? t3 = b : t3 !== b && (t3 += (h3 != null ? h3 : "") + o5[l4 + 1]), this._$AH[l4] = h3;
    }
    n5 && !e4 && this.j(t3);
  }
  j(t3) {
    t3 === b ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t3 != null ? t3 : "");
  }
};
var M = class extends S2 {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t3) {
    this.element[this.name] = t3 === b ? void 0 : t3;
  }
};
var R = s3 ? s3.emptyScript : "";
var k = class extends S2 {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t3) {
    t3 && t3 !== b ? this.element.setAttribute(this.name, R) : this.element.removeAttribute(this.name);
  }
};
var H = class extends S2 {
  constructor(t3, i3, s5, e4, o5) {
    super(t3, i3, s5, e4, o5), this.type = 5;
  }
  _$AI(t3, i3 = this) {
    var s5;
    if ((t3 = (s5 = P(this, t3, i3, 0)) !== null && s5 !== void 0 ? s5 : b) === x)
      return;
    const e4 = this._$AH, o5 = t3 === b && e4 !== b || t3.capture !== e4.capture || t3.once !== e4.once || t3.passive !== e4.passive, n5 = t3 !== b && (e4 === b || o5);
    o5 && this.element.removeEventListener(this.name, this, e4), n5 && this.element.addEventListener(this.name, this, t3), this._$AH = t3;
  }
  handleEvent(t3) {
    var i3, s5;
    typeof this._$AH == "function" ? this._$AH.call((s5 = (i3 = this.options) === null || i3 === void 0 ? void 0 : i3.host) !== null && s5 !== void 0 ? s5 : this.element, t3) : this._$AH.handleEvent(t3);
  }
};
var I = class {
  constructor(t3, i3, s5) {
    this.element = t3, this.type = 6, this._$AN = void 0, this._$AM = i3, this.options = s5;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t3) {
    P(this, t3);
  }
};
var z = i2.litHtmlPolyfillSupport;
z == null || z(C, N), ((t2 = i2.litHtmlVersions) !== null && t2 !== void 0 ? t2 : i2.litHtmlVersions = []).push("2.6.1");
var Z = (t3, i3, s5) => {
  var e4, o5;
  const n5 = (e4 = s5 == null ? void 0 : s5.renderBefore) !== null && e4 !== void 0 ? e4 : i3;
  let l4 = n5._$litPart$;
  if (l4 === void 0) {
    const t4 = (o5 = s5 == null ? void 0 : s5.renderBefore) !== null && o5 !== void 0 ? o5 : null;
    n5._$litPart$ = l4 = new N(i3.insertBefore(r3(), t4), t4, void 0, s5 != null ? s5 : {});
  }
  return l4._$AI(t3), l4;
};

// node_modules/lit-element/lit-element.js
var l3;
var o4;
var s4 = class extends d {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var t3, e4;
    const i3 = super.createRenderRoot();
    return (t3 = (e4 = this.renderOptions).renderBefore) !== null && t3 !== void 0 || (e4.renderBefore = i3.firstChild), i3;
  }
  update(t3) {
    const i3 = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t3), this._$Do = Z(i3, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t3;
    super.connectedCallback(), (t3 = this._$Do) === null || t3 === void 0 || t3.setConnected(true);
  }
  disconnectedCallback() {
    var t3;
    super.disconnectedCallback(), (t3 = this._$Do) === null || t3 === void 0 || t3.setConnected(false);
  }
  render() {
    return x;
  }
};
s4.finalized = true, s4._$litElement$ = true, (l3 = globalThis.litElementHydrateSupport) === null || l3 === void 0 || l3.call(globalThis, { LitElement: s4 });
var n4 = globalThis.litElementPolyfillSupport;
n4 == null || n4({ LitElement: s4 });
((o4 = globalThis.litElementVersions) !== null && o4 !== void 0 ? o4 : globalThis.litElementVersions = []).push("3.2.2");

// iconoirNames.ts
var iconoir = JSON.parse(`{
  "1st-medal":"iconoir-1st-medal",
  "2x2-cell":"iconoir-2x2-cell",
  "360-view":"iconoir-360-view",
  "3d-add-hole":"iconoir-3d-add-hole",
  "3d-arc-center-pt":"iconoir-3d-arc-center-pt",
  "3d-arc":"iconoir-3d-arc",
  "3d-bridge":"iconoir-3d-bridge",
  "3d-center-box":"iconoir-3d-center-box",
  "3d-ellipse-three-pts":"iconoir-3d-ellipse-three-pts",
  "3d-ellipse":"iconoir-3d-ellipse",
  "3d-pt-box":"iconoir-3d-pt-box",
  "3d-rect-corner-to-corner":"iconoir-3d-rect-corner-to-corner",
  "3d-rect-from-center":"iconoir-3d-rect-from-center",
  "3d-rect-three-pts":"iconoir-3d-rect-three-pts",
  "3d-select-edge":"iconoir-3d-select-edge",
  "3d-select-face":"iconoir-3d-select-face",
  "3d-select-point":"iconoir-3d-select-point",
  "3d-select-solid":"iconoir-3d-select-solid",
  "3d-three-pts-box":"iconoir-3d-three-pts-box",
  "4k-display":"iconoir-4k-display",
  "accessibility-sign":"iconoir-accessibility-sign",
  "accessibility-tech":"iconoir-accessibility-tech",
  "accessibility":"iconoir-accessibility",
  "activity":"iconoir-activity",
  "add-circle":"iconoir-add-circle",
  "add-database-script":"iconoir-add-database-script",
  "add-folder":"iconoir-add-folder",
  "add-frame":"iconoir-add-frame",
  "add-hexagon":"iconoir-add-hexagon",
  "add-keyframe-alt":"iconoir-add-keyframe-alt",
  "add-keyframe":"iconoir-add-keyframe",
  "add-keyframes":"iconoir-add-keyframes",
  "add-lens":"iconoir-add-lens",
  "add-media-image":"iconoir-add-media-image",
  "add-media-video":"iconoir-add-media-video",
  "add-page-alt":"iconoir-add-page-alt",
  "add-page":"iconoir-add-page",
  "add-pin-alt":"iconoir-add-pin-alt",
  "add-selection":"iconoir-add-selection",
  "add-square":"iconoir-add-square",
  "add-to-cart":"iconoir-add-to-cart",
  "add-user":"iconoir-add-user",
  "african-tree":"iconoir-african-tree",
  "agile":"iconoir-agile",
  "air-conditioner":"iconoir-air-conditioner",
  "airplane-helix-45deg":"iconoir-airplane-helix-45deg",
  "airplane-helix":"iconoir-airplane-helix",
  "airplane-off":"iconoir-airplane-off",
  "airplane-rotation":"iconoir-airplane-rotation",
  "airplane":"iconoir-airplane",
  "airplay":"iconoir-airplay",
  "alarm":"iconoir-alarm",
  "album-carousel":"iconoir-album-carousel",
  "album-list":"iconoir-album-list",
  "album-open":"iconoir-album-open",
  "album":"iconoir-album",
  "align-bottom-box":"iconoir-align-bottom-box",
  "align-center":"iconoir-align-center",
  "align-justify":"iconoir-align-justify",
  "align-left-box":"iconoir-align-left-box",
  "align-left":"iconoir-align-left",
  "align-right-box":"iconoir-align-right-box",
  "align-right":"iconoir-align-right",
  "align-top-box":"iconoir-align-top-box",
  "angle-tool":"iconoir-angle-tool",
  "antenna-off":"iconoir-antenna-off",
  "antenna-signal-tag":"iconoir-antenna-signal-tag",
  "antenna-signal":"iconoir-antenna-signal",
  "antenna":"iconoir-antenna",
  "app-notification":"iconoir-app-notification",
  "app-window":"iconoir-app-window",
  "apple-half-alt":"iconoir-apple-half-alt",
  "apple-half":"iconoir-apple-half",
  "apple-imac-2021-side":"iconoir-apple-imac-2021-side",
  "apple-imac-2021":"iconoir-apple-imac-2021",
  "apple-mac":"iconoir-apple-mac",
  "apple-swift":"iconoir-apple-swift",
  "apple-wallet":"iconoir-apple-wallet",
  "apple":"iconoir-apple",
  "ar-symbol":"iconoir-ar-symbol",
  "arcade":"iconoir-arcade",
  "archery-match":"iconoir-archery-match",
  "archery":"iconoir-archery",
  "archive":"iconoir-archive",
  "area-search":"iconoir-area-search",
  "arrow-archery":"iconoir-arrow-archery",
  "arrow-bl-circle":"iconoir-arrow-bl-circle",
  "arrow-bl-square":"iconoir-arrow-bl-square",
  "arrow-br-circle":"iconoir-arrow-br-circle",
  "arrow-br-square":"iconoir-arrow-br-square",
  "arrow-down-circle":"iconoir-arrow-down-circle",
  "arrow-down":"iconoir-arrow-down",
  "arrow-email-forward":"iconoir-arrow-email-forward",
  "arrow-left-circle":"iconoir-arrow-left-circle",
  "arrow-left":"iconoir-arrow-left",
  "arrow-right-circle":"iconoir-arrow-right-circle",
  "arrow-right":"iconoir-arrow-right",
  "arrow-separate-vertical":"iconoir-arrow-separate-vertical",
  "arrow-separate":"iconoir-arrow-separate",
  "arrow-tl-circle":"iconoir-arrow-tl-circle",
  "arrow-tl-square":"iconoir-arrow-tl-square",
  "arrow-tr-circle":"iconoir-arrow-tr-circle",
  "arrow-tr-square":"iconoir-arrow-tr-square",
  "arrow-union-vertical":"iconoir-arrow-union-vertical",
  "arrow-union":"iconoir-arrow-union",
  "arrow-up-circle":"iconoir-arrow-up-circle",
  "arrow-up":"iconoir-arrow-up",
  "asana":"iconoir-asana",
  "at-sign-circle":"iconoir-at-sign-circle",
  "at-sign":"iconoir-at-sign",
  "atom":"iconoir-atom",
  "attachment":"iconoir-attachment",
  "augmented-reality":"iconoir-augmented-reality",
  "auto-flash":"iconoir-auto-flash",
  "avi-format":"iconoir-avi-format",
  "axes":"iconoir-axes",
  "backward-15-seconds":"iconoir-backward-15-seconds",
  "bag":"iconoir-bag",
  "bank":"iconoir-bank",
  "barcode":"iconoir-barcode",
  "basketball-alt":"iconoir-basketball-alt",
  "basketball-field":"iconoir-basketball-field",
  "basketball":"iconoir-basketball",
  "battery-25":"iconoir-battery-25",
  "battery-50":"iconoir-battery-50",
  "battery-75":"iconoir-battery-75",
  "battery-charging":"iconoir-battery-charging",
  "battery-empty":"iconoir-battery-empty",
  "battery-full":"iconoir-battery-full",
  "battery-indicator":"iconoir-battery-indicator",
  "battery-warning":"iconoir-battery-warning",
  "bbq":"iconoir-bbq",
  "beach-bag-big":"iconoir-beach-bag-big",
  "beach-bag":"iconoir-beach-bag",
  "bed-ready":"iconoir-bed-ready",
  "bed":"iconoir-bed",
  "behance-tag":"iconoir-behance-tag",
  "behance":"iconoir-behance",
  "bell-notification":"iconoir-bell-notification",
  "bell-off":"iconoir-bell-off",
  "bell":"iconoir-bell",
  "bicycle":"iconoir-bicycle",
  "bin-add":"iconoir-bin-add",
  "bin-full":"iconoir-bin-full",
  "bin-half":"iconoir-bin-half",
  "bin-minus":"iconoir-bin-minus",
  "bin":"iconoir-bin",
  "bishop":"iconoir-bishop",
  "bitbucket":"iconoir-bitbucket",
  "bluetooth-tag":"iconoir-bluetooth-tag",
  "bluetooth":"iconoir-bluetooth",
  "bold-square":"iconoir-bold-square",
  "bold":"iconoir-bold",
  "bonfire":"iconoir-bonfire",
  "book-stack":"iconoir-book-stack",
  "book":"iconoir-book",
  "bookmark-book":"iconoir-bookmark-book",
  "bookmark-circle":"iconoir-bookmark-circle",
  "bookmark-empty":"iconoir-bookmark-empty",
  "border-bl":"iconoir-border-bl",
  "border-bottom":"iconoir-border-bottom",
  "border-br":"iconoir-border-br",
  "border-inner":"iconoir-border-inner",
  "border-left":"iconoir-border-left",
  "border-out":"iconoir-border-out",
  "border-right":"iconoir-border-right",
  "border-tl":"iconoir-border-tl",
  "border-top":"iconoir-border-top",
  "border-tr":"iconoir-border-tr",
  "bounce-left":"iconoir-bounce-left",
  "bounce-right":"iconoir-bounce-right",
  "bowling-ball":"iconoir-bowling-ball",
  "box-iso":"iconoir-box-iso",
  "box":"iconoir-box",
  "boxing-glove":"iconoir-boxing-glove",
  "brain-electricity":"iconoir-brain-electricity",
  "brain-research":"iconoir-brain-research",
  "brain-warning":"iconoir-brain-warning",
  "brain":"iconoir-brain",
  "bread-slice":"iconoir-bread-slice",
  "bright-crown":"iconoir-bright-crown",
  "bright-star":"iconoir-bright-star",
  "brightness-window":"iconoir-brightness-window",
  "brightness":"iconoir-brightness",
  "bubble-download":"iconoir-bubble-download",
  "bubble-error":"iconoir-bubble-error",
  "bubble-income":"iconoir-bubble-income",
  "bubble-outcome":"iconoir-bubble-outcome",
  "bubble-search":"iconoir-bubble-search",
  "bubble-star":"iconoir-bubble-star",
  "bubble-upload":"iconoir-bubble-upload",
  "bubble-warning":"iconoir-bubble-warning",
  "building":"iconoir-building",
  "bus-stop":"iconoir-bus-stop",
  "bus":"iconoir-bus",
  "cable-tag":"iconoir-cable-tag",
  "calculator":"iconoir-calculator",
  "calendar-minus":"iconoir-calendar-minus",
  "calendar-plus":"iconoir-calendar-plus",
  "calendar":"iconoir-calendar",
  "camera":"iconoir-camera",
  "cancel":"iconoir-cancel",
  "candlestick-chart":"iconoir-candlestick-chart",
  "car":"iconoir-car",
  "carbon":"iconoir-carbon",
  "card-issue":"iconoir-card-issue",
  "card-locked":"iconoir-card-locked",
  "card-security":"iconoir-card-security",
  "card-wallet":"iconoir-card-wallet",
  "cart-alt":"iconoir-cart-alt",
  "cart":"iconoir-cart",
  "cash":"iconoir-cash",
  "center-align":"iconoir-center-align",
  "chat-add":"iconoir-chat-add",
  "chat-bubble-check-1":"iconoir-chat-bubble-check-1",
  "chat-bubble-check":"iconoir-chat-bubble-check",
  "chat-bubble-empty":"iconoir-chat-bubble-empty",
  "chat-bubble-error":"iconoir-chat-bubble-error",
  "chat-bubble-question":"iconoir-chat-bubble-question",
  "chat-bubble-translate":"iconoir-chat-bubble-translate",
  "chat-bubble-warning":"iconoir-chat-bubble-warning",
  "chat-bubble":"iconoir-chat-bubble",
  "chat-lines":"iconoir-chat-lines",
  "chat-remove":"iconoir-chat-remove",
  "check-circle":"iconoir-check-circle",
  "check-window":"iconoir-check-window",
  "check":"iconoir-check",
  "chocolate":"iconoir-chocolate",
  "chromecast-active":"iconoir-chromecast-active",
  "chromecast":"iconoir-chromecast",
  "church-alt":"iconoir-church-alt",
  "church":"iconoir-church",
  "cinema-old":"iconoir-cinema-old",
  "circle":"iconoir-circle",
  "city":"iconoir-city",
  "clean-water":"iconoir-clean-water",
  "clipboard-check":"iconoir-clipboard-check",
  "clock":"iconoir-clock",
  "closed-captions":"iconoir-closed-captions",
  "closet":"iconoir-closet",
  "cloud-book-alt":"iconoir-cloud-book-alt",
  "cloud-check":"iconoir-cloud-check",
  "cloud-desync":"iconoir-cloud-desync",
  "cloud-download":"iconoir-cloud-download",
  "cloud-error":"iconoir-cloud-error",
  "cloud-sunny":"iconoir-cloud-sunny",
  "cloud-sync":"iconoir-cloud-sync",
  "cloud-upload":"iconoir-cloud-upload",
  "cloud":"iconoir-cloud",
  "clutery":"iconoir-clutery",
  "code-brackets-square":"iconoir-code-brackets-square",
  "code-brackets":"iconoir-code-brackets",
  "code":"iconoir-code",
  "codepen":"iconoir-codepen",
  "coffee-cup":"iconoir-coffee-cup",
  "coin":"iconoir-coin",
  "collage-frame":"iconoir-collage-frame",
  "collapse":"iconoir-collapse",
  "color-filter":"iconoir-color-filter",
  "color-picker-empty":"iconoir-color-picker-empty",
  "color-picker":"iconoir-color-picker",
  "combine":"iconoir-combine",
  "community":"iconoir-community",
  "compact-disc":"iconoir-compact-disc",
  "compass":"iconoir-compass",
  "compress-lines":"iconoir-compress-lines",
  "compress":"iconoir-compress",
  "computer":"iconoir-computer",
  "consumable":"iconoir-consumable",
  "control-slider":"iconoir-control-slider",
  "cookie":"iconoir-cookie",
  "cooling":"iconoir-cooling",
  "copy":"iconoir-copy",
  "copyright":"iconoir-copyright",
  "corner-bottom-left":"iconoir-corner-bottom-left",
  "corner-bottom-right":"iconoir-corner-bottom-right",
  "corner-top-left":"iconoir-corner-top-left",
  "corner-top-right":"iconoir-corner-top-right",
  "cpu-warning":"iconoir-cpu-warning",
  "cpu":"iconoir-cpu",
  "cracked-egg":"iconoir-cracked-egg",
  "creative-commons":"iconoir-creative-commons",
  "credit-card":"iconoir-credit-card",
  "credit-cards":"iconoir-credit-cards",
  "crib":"iconoir-crib",
  "crop-rotate-bl":"iconoir-crop-rotate-bl",
  "crop-rotate-br":"iconoir-crop-rotate-br",
  "crop-rotate-tl":"iconoir-crop-rotate-tl",
  "crop-rotate-tr":"iconoir-crop-rotate-tr",
  "crop":"iconoir-crop",
  "crown-circle":"iconoir-crown-circle",
  "crown":"iconoir-crown",
  "css3":"iconoir-css3",
  "cursor-pointer":"iconoir-cursor-pointer",
  "cut-alt":"iconoir-cut-alt",
  "cut":"iconoir-cut",
  "cycling":"iconoir-cycling",
  "cylinder":"iconoir-cylinder",
  "dash-flag":"iconoir-dash-flag",
  "dashboard-dots":"iconoir-dashboard-dots",
  "dashboard-speed":"iconoir-dashboard-speed",
  "dashboard":"iconoir-dashboard",
  "data-transfer-both":"iconoir-data-transfer-both",
  "data-transfer-check":"iconoir-data-transfer-check",
  "data-transfer-down":"iconoir-data-transfer-down",
  "data-transfer-up":"iconoir-data-transfer-up",
  "data-transfer-warning":"iconoir-data-transfer-warning",
  "database-backup":"iconoir-database-backup",
  "database-export":"iconoir-database-export",
  "database-monitor":"iconoir-database-monitor",
  "database-restore":"iconoir-database-restore",
  "database-script":"iconoir-database-script",
  "database-settings":"iconoir-database-settings",
  "database-star":"iconoir-database-star",
  "database-stats":"iconoir-database-stats",
  "database-tag":"iconoir-database-tag",
  "db-check":"iconoir-db-check",
  "db-error":"iconoir-db-error",
  "db-search":"iconoir-db-search",
  "db-star":"iconoir-db-star",
  "db-warning":"iconoir-db-warning",
  "db":"iconoir-db",
  "de-compress":"iconoir-de-compress",
  "delete-circle":"iconoir-delete-circle",
  "delivery-truck":"iconoir-delivery-truck",
  "delivery":"iconoir-delivery",
  "depth":"iconoir-depth",
  "design-nib":"iconoir-design-nib",
  "design-pencil":"iconoir-design-pencil",
  "desk":"iconoir-desk",
  "dialpad":"iconoir-dialpad",
  "diameter":"iconoir-diameter",
  "dice-five":"iconoir-dice-five",
  "dice-four":"iconoir-dice-four",
  "dice-one":"iconoir-dice-one",
  "dice-six":"iconoir-dice-six",
  "dice-three":"iconoir-dice-three",
  "dice-two":"iconoir-dice-two",
  "dimmer-switch":"iconoir-dimmer-switch",
  "director-chair":"iconoir-director-chair",
  "discord":"iconoir-discord",
  "dishwasher":"iconoir-dishwasher",
  "divide-selection-1":"iconoir-divide-selection-1",
  "divide-selection-2":"iconoir-divide-selection-2",
  "divide-three":"iconoir-divide-three",
  "divide":"iconoir-divide",
  "dna":"iconoir-dna",
  "doc-search-alt":"iconoir-doc-search-alt",
  "doc-search":"iconoir-doc-search",
  "doc-star-alt":"iconoir-doc-star-alt",
  "doc-star":"iconoir-doc-star",
  "dollar":"iconoir-dollar",
  "domotic-issue":"iconoir-domotic-issue",
  "donate":"iconoir-donate",
  "double-check":"iconoir-double-check",
  "down-round-arrow":"iconoir-down-round-arrow",
  "download-circle":"iconoir-download-circle",
  "download-data-window":"iconoir-download-data-window",
  "download-square":"iconoir-download-square",
  "download":"iconoir-download",
  "drag-hand-gesture":"iconoir-drag-hand-gesture",
  "drag":"iconoir-drag",
  "drawer":"iconoir-drawer",
  "dribbble":"iconoir-dribbble",
  "drone-charge-full":"iconoir-drone-charge-full",
  "drone-charge-half":"iconoir-drone-charge-half",
  "drone-charge-low":"iconoir-drone-charge-low",
  "drone-check":"iconoir-drone-check",
  "drone-error":"iconoir-drone-error",
  "drone-landing":"iconoir-drone-landing",
  "drone-refresh":"iconoir-drone-refresh",
  "drone-take-off":"iconoir-drone-take-off",
  "drone":"iconoir-drone",
  "droplet-half":"iconoir-droplet-half",
  "droplet":"iconoir-droplet",
  "ease-curve-control-points":"iconoir-ease-curve-control-points",
  "ease-in-control-point":"iconoir-ease-in-control-point",
  "ease-in-out":"iconoir-ease-in-out",
  "ease-in":"iconoir-ease-in",
  "ease-out-control-point":"iconoir-ease-out-control-point",
  "ease-out":"iconoir-ease-out",
  "ecology-book":"iconoir-ecology-book",
  "edit-pencil":"iconoir-edit-pencil",
  "edit":"iconoir-edit",
  "egg":"iconoir-egg",
  "eject":"iconoir-eject",
  "electronics-chip":"iconoir-electronics-chip",
  "electronics-transistor":"iconoir-electronics-transistor",
  "emoji-ball":"iconoir-emoji-ball",
  "emoji-blink-left":"iconoir-emoji-blink-left",
  "emoji-blink-right":"iconoir-emoji-blink-right",
  "emoji-look-down":"iconoir-emoji-look-down",
  "emoji-look-left":"iconoir-emoji-look-left",
  "emoji-look-right":"iconoir-emoji-look-right",
  "emoji-look-up":"iconoir-emoji-look-up",
  "emoji-puzzled":"iconoir-emoji-puzzled",
  "emoji-quite":"iconoir-emoji-quite",
  "emoji-really":"iconoir-emoji-really",
  "emoji-sad":"iconoir-emoji-sad",
  "emoji-satisfied":"iconoir-emoji-satisfied",
  "emoji-sing-left-note":"iconoir-emoji-sing-left-note",
  "emoji-sing-left":"iconoir-emoji-sing-left",
  "emoji-sing-right-note":"iconoir-emoji-sing-right-note",
  "emoji-sing-right":"iconoir-emoji-sing-right",
  "emoji-surprise-alt":"iconoir-emoji-surprise-alt",
  "emoji-surprise":"iconoir-emoji-surprise",
  "emoji-talking-angry":"iconoir-emoji-talking-angry",
  "emoji-talking-happy":"iconoir-emoji-talking-happy",
  "emoji-think-left":"iconoir-emoji-think-left",
  "emoji-think-right":"iconoir-emoji-think-right",
  "emoji":"iconoir-emoji",
  "empty-page":"iconoir-empty-page",
  "energy-usage-window":"iconoir-energy-usage-window",
  "enlarge-round-arrow":"iconoir-enlarge-round-arrow",
  "enlarge":"iconoir-enlarge",
  "erase":"iconoir-erase",
  "error-window":"iconoir-error-window",
  "euro-square":"iconoir-euro-square",
  "euro":"iconoir-euro",
  "ev-charge-alt":"iconoir-ev-charge-alt",
  "ev-charge":"iconoir-ev-charge",
  "ev-plug-charging":"iconoir-ev-plug-charging",
  "ev-plug-error":"iconoir-ev-plug-error",
  "ev-plug":"iconoir-ev-plug",
  "ev-station":"iconoir-ev-station",
  "ev-tag":"iconoir-ev-tag",
  "exclude":"iconoir-exclude",
  "expand-lines":"iconoir-expand-lines",
  "expand":"iconoir-expand",
  "eye-alt":"iconoir-eye-alt",
  "eye-close":"iconoir-eye-close",
  "eye-empty":"iconoir-eye-empty",
  "eye-off":"iconoir-eye-off",
  "face-id":"iconoir-face-id",
  "facebook-tag":"iconoir-facebook-tag",
  "facebook":"iconoir-facebook",
  "facetime":"iconoir-facetime",
  "farm":"iconoir-farm",
  "fast-arrow-down-box":"iconoir-fast-arrow-down-box",
  "fast-arrow-down":"iconoir-fast-arrow-down",
  "fast-arrow-left-box":"iconoir-fast-arrow-left-box",
  "fast-arrow-left":"iconoir-fast-arrow-left",
  "fast-arrow-right-box":"iconoir-fast-arrow-right-box",
  "fast-arrow-right":"iconoir-fast-arrow-right",
  "fast-arrow-up-box":"iconoir-fast-arrow-up-box",
  "fast-arrow-up":"iconoir-fast-arrow-up",
  "fast-down-circle":"iconoir-fast-down-circle",
  "fast-left-circle":"iconoir-fast-left-circle",
  "fast-right-circle":"iconoir-fast-right-circle",
  "fast-up-circle":"iconoir-fast-up-circle",
  "favourite-book":"iconoir-favourite-book",
  "favourite-window":"iconoir-favourite-window",
  "female":"iconoir-female",
  "figma":"iconoir-figma",
  "file-not-found":"iconoir-file-not-found",
  "filter-alt":"iconoir-filter-alt",
  "filter":"iconoir-filter",
  "finder":"iconoir-finder",
  "fingerprint-check-circle":"iconoir-fingerprint-check-circle",
  "fingerprint-circle":"iconoir-fingerprint-circle",
  "fingerprint-error-circle":"iconoir-fingerprint-error-circle",
  "fingerprint-lock-circle":"iconoir-fingerprint-lock-circle",
  "fingerprint-phone":"iconoir-fingerprint-phone",
  "fingerprint-scan":"iconoir-fingerprint-scan",
  "fingerprint-square":"iconoir-fingerprint-square",
  "fingerprint-window":"iconoir-fingerprint-window",
  "fingerprint":"iconoir-fingerprint",
  "fire-flame":"iconoir-fire-flame",
  "fishing":"iconoir-fishing",
  "flare":"iconoir-flare",
  "flash-off":"iconoir-flash-off",
  "flash":"iconoir-flash",
  "flask":"iconoir-flask",
  "flip-reverse":"iconoir-flip-reverse",
  "flip":"iconoir-flip",
  "flower":"iconoir-flower",
  "fluorine":"iconoir-fluorine",
  "fog":"iconoir-fog",
  "folder-alert":"iconoir-folder-alert",
  "folder-settings":"iconoir-folder-settings",
  "folder":"iconoir-folder",
  "font-size":"iconoir-font-size",
  "football-ball":"iconoir-football-ball",
  "football":"iconoir-football",
  "forward-15-seconds":"iconoir-forward-15-seconds",
  "forward-message":"iconoir-forward-message",
  "forward":"iconoir-forward",
  "frame-alt-empty":"iconoir-frame-alt-empty",
  "frame-alt":"iconoir-frame-alt",
  "frame-select":"iconoir-frame-select",
  "frame-simple":"iconoir-frame-simple",
  "frame-tool":"iconoir-frame-tool",
  "frame":"iconoir-frame",
  "fridge":"iconoir-fridge",
  "fx-tag":"iconoir-fx-tag",
  "fx":"iconoir-fx",
  "gamepad":"iconoir-gamepad",
  "garage":"iconoir-garage",
  "gas-tank-drop":"iconoir-gas-tank-drop",
  "gas-tank":"iconoir-gas-tank",
  "gas":"iconoir-gas",
  "gif-format":"iconoir-gif-format",
  "gift":"iconoir-gift",
  "git-branch":"iconoir-git-branch",
  "git-cherry-pick-commit":"iconoir-git-cherry-pick-commit",
  "git-command":"iconoir-git-command",
  "git-commit":"iconoir-git-commit",
  "git-compare":"iconoir-git-compare",
  "git-fork":"iconoir-git-fork",
  "git-merge":"iconoir-git-merge",
  "git-pull-request-closed":"iconoir-git-pull-request-closed",
  "git-pull-request":"iconoir-git-pull-request",
  "github-circle":"iconoir-github-circle",
  "github":"iconoir-github",
  "gitlab-full":"iconoir-gitlab-full",
  "glass-empty":"iconoir-glass-empty",
  "glass-half-alt":"iconoir-glass-half-alt",
  "glass-half":"iconoir-glass-half",
  "glasses":"iconoir-glasses",
  "globe":"iconoir-globe",
  "golf":"iconoir-golf",
  "google-circle":"iconoir-google-circle",
  "google-docs":"iconoir-google-docs",
  "google-drive-check":"iconoir-google-drive-check",
  "google-drive-sync":"iconoir-google-drive-sync",
  "google-drive-warning":"iconoir-google-drive-warning",
  "google-drive":"iconoir-google-drive",
  "google-home":"iconoir-google-home",
  "google-one":"iconoir-google-one",
  "google":"iconoir-google",
  "gps":"iconoir-gps",
  "graduation-cap":"iconoir-graduation-cap",
  "graph-down":"iconoir-graph-down",
  "graph-up":"iconoir-graph-up",
  "green-bus":"iconoir-green-bus",
  "green-truck":"iconoir-green-truck",
  "green-vehicle":"iconoir-green-vehicle",
  "grid-add":"iconoir-grid-add",
  "grid-minus":"iconoir-grid-minus",
  "grid-remove":"iconoir-grid-remove",
  "group":"iconoir-group",
  "gym":"iconoir-gym",
  "half-cookie":"iconoir-half-cookie",
  "half-moon":"iconoir-half-moon",
  "hammer":"iconoir-hammer",
  "hand-brake":"iconoir-hand-brake",
  "handbag":"iconoir-handbag",
  "hard-drive":"iconoir-hard-drive",
  "hat":"iconoir-hat",
  "hd-display":"iconoir-hd-display",
  "hd":"iconoir-hd",
  "hdr":"iconoir-hdr",
  "headset-charge":"iconoir-headset-charge",
  "headset-help":"iconoir-headset-help",
  "headset-issue":"iconoir-headset-issue",
  "headset":"iconoir-headset",
  "health-shield":"iconoir-health-shield",
  "healthcare":"iconoir-healthcare",
  "heart":"iconoir-heart",
  "heating":"iconoir-heating",
  "heavy-rain":"iconoir-heavy-rain",
  "help-circle":"iconoir-help-circle",
  "help-square":"iconoir-help-square",
  "heptagon":"iconoir-heptagon",
  "her-slips":"iconoir-her-slips",
  "hexagon-alt":"iconoir-hexagon-alt",
  "hexagon-dice":"iconoir-hexagon-dice",
  "hexagon":"iconoir-hexagon",
  "high-priority":"iconoir-high-priority",
  "historic-shield-alt":"iconoir-historic-shield-alt",
  "historic-shield":"iconoir-historic-shield",
  "home-alt-slim-horiz":"iconoir-home-alt-slim-horiz",
  "home-alt-slim":"iconoir-home-alt-slim",
  "home-alt":"iconoir-home-alt",
  "home-hospital":"iconoir-home-hospital",
  "home-sale":"iconoir-home-sale",
  "home-secure":"iconoir-home-secure",
  "home-shield":"iconoir-home-shield",
  "home-simple-door":"iconoir-home-simple-door",
  "home-simple":"iconoir-home-simple",
  "home-table":"iconoir-home-table",
  "home-user":"iconoir-home-user",
  "home":"iconoir-home",
  "horiz-distribution-left":"iconoir-horiz-distribution-left",
  "horiz-distribution-right":"iconoir-horiz-distribution-right",
  "horizontal-merge":"iconoir-horizontal-merge",
  "horizontal-split":"iconoir-horizontal-split",
  "hospital-sign":"iconoir-hospital-sign",
  "hospital":"iconoir-hospital",
  "hot-air-balloon":"iconoir-hot-air-balloon",
  "hourglass":"iconoir-hourglass",
  "html5":"iconoir-html5",
  "hydrogen":"iconoir-hydrogen",
  "iconoir":"iconoir-iconoir",
  "import":"iconoir-import",
  "inclination":"iconoir-inclination",
  "industry":"iconoir-industry",
  "infinite":"iconoir-infinite",
  "info-empty":"iconoir-info-empty",
  "input-field":"iconoir-input-field",
  "input-output":"iconoir-input-output",
  "input-search":"iconoir-input-search",
  "instagram":"iconoir-instagram",
  "internet":"iconoir-internet",
  "intersect-alt":"iconoir-intersect-alt",
  "intersect":"iconoir-intersect",
  "ios-settings":"iconoir-ios-settings",
  "ip-address":"iconoir-ip-address",
  "iris-scan":"iconoir-iris-scan",
  "italic-square":"iconoir-italic-square",
  "italic":"iconoir-italic",
  "journal-page":"iconoir-journal-page",
  "journal":"iconoir-journal",
  "jpeg-format":"iconoir-jpeg-format",
  "jpg-format":"iconoir-jpg-format",
  "kanban-board":"iconoir-kanban-board",
  "key-alt-back":"iconoir-key-alt-back",
  "key-alt-minus":"iconoir-key-alt-minus",
  "key-alt-plus":"iconoir-key-alt-plus",
  "key-alt-remove":"iconoir-key-alt-remove",
  "key-alt":"iconoir-key-alt",
  "key-command":"iconoir-key-command",
  "keyframe-align-center":"iconoir-keyframe-align-center",
  "keyframe-align-horizontal":"iconoir-keyframe-align-horizontal",
  "keyframe-align-vertical":"iconoir-keyframe-align-vertical",
  "keyframe-position":"iconoir-keyframe-position",
  "keyframe":"iconoir-keyframe",
  "keyframes-couple":"iconoir-keyframes-couple",
  "keyframes":"iconoir-keyframes",
  "label":"iconoir-label",
  "lamp":"iconoir-lamp",
  "language":"iconoir-language",
  "laptop-charging":"iconoir-laptop-charging",
  "laptop-fix":"iconoir-laptop-fix",
  "laptop-issue":"iconoir-laptop-issue",
  "laptop":"iconoir-laptop",
  "large-suitcase":"iconoir-large-suitcase",
  "layout-left":"iconoir-layout-left",
  "layout-right":"iconoir-layout-right",
  "leaderboard-star":"iconoir-leaderboard-star",
  "leaderboard":"iconoir-leaderboard",
  "leaf":"iconoir-leaf",
  "learning":"iconoir-learning",
  "left-round-arrow":"iconoir-left-round-arrow",
  "lens":"iconoir-lens",
  "lifebelt":"iconoir-lifebelt",
  "light-bulb-off":"iconoir-light-bulb-off",
  "light-bulb-on":"iconoir-light-bulb-on",
  "light-bulb":"iconoir-light-bulb",
  "line-space":"iconoir-line-space",
  "linear":"iconoir-linear",
  "link":"iconoir-link",
  "linkedin":"iconoir-linkedin",
  "linux":"iconoir-linux",
  "list-select":"iconoir-list-select",
  "list":"iconoir-list",
  "load-action-floppy":"iconoir-load-action-floppy",
  "lock-key":"iconoir-lock-key",
  "lock":"iconoir-lock",
  "locked-book":"iconoir-locked-book",
  "locked-window":"iconoir-locked-window",
  "log-denied":"iconoir-log-denied",
  "log-in":"iconoir-log-in",
  "log-out":"iconoir-log-out",
  "long-arrow-down-left":"iconoir-long-arrow-down-left",
  "long-arrow-down-right":"iconoir-long-arrow-down-right",
  "long-arrow-left-down":"iconoir-long-arrow-left-down",
  "long-arrow-left-up":"iconoir-long-arrow-left-up",
  "long-arrow-right-down":"iconoir-long-arrow-right-down",
  "long-arrow-right-up-1":"iconoir-long-arrow-right-up-1",
  "long-arrow-right-up":"iconoir-long-arrow-right-up",
  "long-arrow-up-left":"iconoir-long-arrow-up-left",
  "long-arrow-up-right":"iconoir-long-arrow-up-right",
  "lot-of-cash":"iconoir-lot-of-cash",
  "mac-control-key":"iconoir-mac-control-key",
  "mac-dock":"iconoir-mac-dock",
  "mac-option-key":"iconoir-mac-option-key",
  "mac-os-window":"iconoir-mac-os-window",
  "magnet-energy":"iconoir-magnet-energy",
  "magnet":"iconoir-magnet",
  "mail-in":"iconoir-mail-in",
  "mail-opened":"iconoir-mail-opened",
  "mail-out":"iconoir-mail-out",
  "mail":"iconoir-mail",
  "male":"iconoir-male",
  "map-issue":"iconoir-map-issue",
  "map":"iconoir-map",
  "maps-arrow-diagonal":"iconoir-maps-arrow-diagonal",
  "maps-arrow-issue":"iconoir-maps-arrow-issue",
  "maps-arrow":"iconoir-maps-arrow",
  "maps-go-straight":"iconoir-maps-go-straight",
  "maps-turn-back":"iconoir-maps-turn-back",
  "maps-turn-left":"iconoir-maps-turn-left",
  "maps-turn-right":"iconoir-maps-turn-right",
  "mask-square":"iconoir-mask-square",
  "mastercard-card":"iconoir-mastercard-card",
  "math-book":"iconoir-math-book",
  "maximize":"iconoir-maximize",
  "medal":"iconoir-medal",
  "media-image-folder":"iconoir-media-image-folder",
  "media-image-list":"iconoir-media-image-list",
  "media-image":"iconoir-media-image",
  "media-video-folder":"iconoir-media-video-folder",
  "media-video-list":"iconoir-media-video-list",
  "media-video":"iconoir-media-video",
  "medium-priority":"iconoir-medium-priority",
  "medium":"iconoir-medium",
  "megaphone":"iconoir-megaphone",
  "menu-scale":"iconoir-menu-scale",
  "menu":"iconoir-menu",
  "message-alert":"iconoir-message-alert",
  "message-text":"iconoir-message-text",
  "message":"iconoir-message",
  "metro":"iconoir-metro",
  "mic-add":"iconoir-mic-add",
  "mic-check":"iconoir-mic-check",
  "mic-mute":"iconoir-mic-mute",
  "mic-remove":"iconoir-mic-remove",
  "mic-speaking":"iconoir-mic-speaking",
  "mic-warning":"iconoir-mic-warning",
  "mic":"iconoir-mic",
  "microscope":"iconoir-microscope",
  "minus-1":"iconoir-minus-1",
  "minus-circle":"iconoir-minus-circle",
  "minus-hexagon":"iconoir-minus-hexagon",
  "minus-pin-alt":"iconoir-minus-pin-alt",
  "minus-square":"iconoir-minus-square",
  "minus":"iconoir-minus",
  "mirror":"iconoir-mirror",
  "missing-font":"iconoir-missing-font",
  "modern-tv-4k":"iconoir-modern-tv-4k",
  "modern-tv":"iconoir-modern-tv",
  "money-square":"iconoir-money-square",
  "moon-sat":"iconoir-moon-sat",
  "more-horiz-circle":"iconoir-more-horiz-circle",
  "more-horiz":"iconoir-more-horiz",
  "more-vert-circle":"iconoir-more-vert-circle",
  "more-vert":"iconoir-more-vert",
  "motorcycle":"iconoir-motorcycle",
  "mouse-button-left":"iconoir-mouse-button-left",
  "mouse-button-right":"iconoir-mouse-button-right",
  "mouse-scroll-wheel":"iconoir-mouse-scroll-wheel",
  "move-down":"iconoir-move-down",
  "move-left":"iconoir-move-left",
  "move-right":"iconoir-move-right",
  "move-ruler":"iconoir-move-ruler",
  "move-up":"iconoir-move-up",
  "movie":"iconoir-movie",
  "mpeg-format":"iconoir-mpeg-format",
  "multi-bubble":"iconoir-multi-bubble",
  "multi-mac-os-window":"iconoir-multi-mac-os-window",
  "multi-window":"iconoir-multi-window",
  "multiple-pages-add":"iconoir-multiple-pages-add",
  "multiple-pages-delete":"iconoir-multiple-pages-delete",
  "multiple-pages-empty":"iconoir-multiple-pages-empty",
  "multiple-pages-remove":"iconoir-multiple-pages-remove",
  "multiple-pages":"iconoir-multiple-pages",
  "music-double-note-add":"iconoir-music-double-note-add",
  "music-double-note":"iconoir-music-double-note",
  "music-note-add":"iconoir-music-note-add",
  "music-note":"iconoir-music-note",
  "nav-arrow-down":"iconoir-nav-arrow-down",
  "nav-arrow-left":"iconoir-nav-arrow-left",
  "nav-arrow-right":"iconoir-nav-arrow-right",
  "nav-arrow-up":"iconoir-nav-arrow-up",
  "navigator-alt":"iconoir-navigator-alt",
  "navigator":"iconoir-navigator",
  "network-alt":"iconoir-network-alt",
  "network-left":"iconoir-network-left",
  "network-right":"iconoir-network-right",
  "network":"iconoir-network",
  "new-tab":"iconoir-new-tab",
  "nintendo-switch":"iconoir-nintendo-switch",
  "nitrogen":"iconoir-nitrogen",
  "no-access-window":"iconoir-no-access-window",
  "no-battery":"iconoir-no-battery",
  "no-coin":"iconoir-no-coin",
  "no-credit-card":"iconoir-no-credit-card",
  "no-link":"iconoir-no-link",
  "no-lock":"iconoir-no-lock",
  "no-smoking-circle":"iconoir-no-smoking-circle",
  "no-smoking":"iconoir-no-smoking",
  "notes":"iconoir-notes",
  "npm-square":"iconoir-npm-square",
  "npm":"iconoir-npm",
  "numbered-list-left":"iconoir-numbered-list-left",
  "numbered-list-right":"iconoir-numbered-list-right",
  "octagon":"iconoir-octagon",
  "off-tag":"iconoir-off-tag",
  "oil-industry":"iconoir-oil-industry",
  "okrs":"iconoir-okrs",
  "on-tag":"iconoir-on-tag",
  "one-finger-select-hand-gesture":"iconoir-one-finger-select-hand-gesture",
  "one-point-circle":"iconoir-one-point-circle",
  "open-book":"iconoir-open-book",
  "open-in-browser":"iconoir-open-in-browser",
  "open-in-window":"iconoir-open-in-window",
  "open-new-window":"iconoir-open-new-window",
  "open-select-hand-gesture":"iconoir-open-select-hand-gesture",
  "open-vpn":"iconoir-open-vpn",
  "orange-half":"iconoir-orange-half",
  "orange-slice-alt":"iconoir-orange-slice-alt",
  "orange-slice":"iconoir-orange-slice",
  "organic-food-square":"iconoir-organic-food-square",
  "organic-food":"iconoir-organic-food",
  "orthogonal-view":"iconoir-orthogonal-view",
  "oxygen":"iconoir-oxygen",
  "package-lock":"iconoir-package-lock",
  "package":"iconoir-package",
  "packages":"iconoir-packages",
  "pacman":"iconoir-pacman",
  "page-down":"iconoir-page-down",
  "page-edit":"iconoir-page-edit",
  "page-flip":"iconoir-page-flip",
  "page-left":"iconoir-page-left",
  "page-right":"iconoir-page-right",
  "page-search":"iconoir-page-search",
  "page-star":"iconoir-page-star",
  "page-up":"iconoir-page-up",
  "page":"iconoir-page",
  "palette":"iconoir-palette",
  "panorama-enlarge":"iconoir-panorama-enlarge",
  "panorama-reduce":"iconoir-panorama-reduce",
  "pants-alt":"iconoir-pants-alt",
  "pants":"iconoir-pants",
  "parking":"iconoir-parking",
  "password-cursor":"iconoir-password-cursor",
  "password-error":"iconoir-password-error",
  "password-pass":"iconoir-password-pass",
  "paste-clipboard":"iconoir-paste-clipboard",
  "path-arrow":"iconoir-path-arrow",
  "pause-window":"iconoir-pause-window",
  "pause":"iconoir-pause",
  "paypal":"iconoir-paypal",
  "pc-check":"iconoir-pc-check",
  "pc-firewall":"iconoir-pc-firewall",
  "pc-mouse":"iconoir-pc-mouse",
  "pc-no-entry":"iconoir-pc-no-entry",
  "pc-warning":"iconoir-pc-warning",
  "peace-hand":"iconoir-peace-hand",
  "pen-connect-bluetooth":"iconoir-pen-connect-bluetooth",
  "pen-connect-wifi":"iconoir-pen-connect-wifi",
  "pen-tablet-connect-usb":"iconoir-pen-tablet-connect-usb",
  "pen-tablet-connect-wifi":"iconoir-pen-tablet-connect-wifi",
  "pen-tablet":"iconoir-pen-tablet",
  "pentagon":"iconoir-pentagon",
  "people-tag":"iconoir-people-tag",
  "percentage-circle":"iconoir-percentage-circle",
  "percentage-square":"iconoir-percentage-square",
  "percentage":"iconoir-percentage",
  "perspective-view":"iconoir-perspective-view",
  "pharmacy-cross-circle":"iconoir-pharmacy-cross-circle",
  "pharmacy-cross-square":"iconoir-pharmacy-cross-square",
  "phone-add":"iconoir-phone-add",
  "phone-delete":"iconoir-phone-delete",
  "phone-disabled":"iconoir-phone-disabled",
  "phone-income":"iconoir-phone-income",
  "phone-outcome":"iconoir-phone-outcome",
  "phone-paused":"iconoir-phone-paused",
  "phone-remove":"iconoir-phone-remove",
  "phone":"iconoir-phone",
  "piggy-bank":"iconoir-piggy-bank",
  "pillow":"iconoir-pillow",
  "pin-alt":"iconoir-pin-alt",
  "pin":"iconoir-pin",
  "pine-tree":"iconoir-pine-tree",
  "pinterest":"iconoir-pinterest",
  "pizza-slice":"iconoir-pizza-slice",
  "planet-alt":"iconoir-planet-alt",
  "planet-sat":"iconoir-planet-sat",
  "planet":"iconoir-planet",
  "play":"iconoir-play",
  "playlist-add":"iconoir-playlist-add",
  "playlist-play":"iconoir-playlist-play",
  "playlist":"iconoir-playlist",
  "playstation-gamepad":"iconoir-playstation-gamepad",
  "plug-type-a":"iconoir-plug-type-a",
  "plug-type-c":"iconoir-plug-type-c",
  "plug-type-g":"iconoir-plug-type-g",
  "plug-type-l":"iconoir-plug-type-l",
  "plus":"iconoir-plus",
  "png-format":"iconoir-png-format",
  "pocket":"iconoir-pocket",
  "podcast":"iconoir-podcast",
  "pokeball":"iconoir-pokeball",
  "position-align":"iconoir-position-align",
  "position":"iconoir-position",
  "potion":"iconoir-potion",
  "pound":"iconoir-pound",
  "precision-tool":"iconoir-precision-tool",
  "presentation":"iconoir-presentation",
  "printer-alt":"iconoir-printer-alt",
  "printer":"iconoir-printer",
  "printing-page":"iconoir-printing-page",
  "priority-down":"iconoir-priority-down",
  "priority-up":"iconoir-priority-up",
  "private-wifi":"iconoir-private-wifi",
  "profile-circle":"iconoir-profile-circle",
  "prohibition":"iconoir-prohibition",
  "puzzle":"iconoir-puzzle",
  "qr-code":"iconoir-qr-code",
  "question-mark":"iconoir-question-mark",
  "quote-message":"iconoir-quote-message",
  "quote":"iconoir-quote",
  "radiation":"iconoir-radiation",
  "radius":"iconoir-radius",
  "rain":"iconoir-rain",
  "raw-format":"iconoir-raw-format",
  "receive-dollars":"iconoir-receive-dollars",
  "receive-euros":"iconoir-receive-euros",
  "receive-pounds":"iconoir-receive-pounds",
  "receive-yens":"iconoir-receive-yens",
  "redo-action":"iconoir-redo-action",
  "redo-circle":"iconoir-redo-circle",
  "redo":"iconoir-redo",
  "reduce-round-arrow":"iconoir-reduce-round-arrow",
  "reduce":"iconoir-reduce",
  "refresh-circular":"iconoir-refresh-circular",
  "refresh-double":"iconoir-refresh-double",
  "refresh":"iconoir-refresh",
  "reload-window":"iconoir-reload-window",
  "reminder-hand-gesture":"iconoir-reminder-hand-gesture",
  "remove-database-script":"iconoir-remove-database-script",
  "remove-folder":"iconoir-remove-folder",
  "remove-frame":"iconoir-remove-frame",
  "remove-from-cart":"iconoir-remove-from-cart",
  "remove-keyframe-alt":"iconoir-remove-keyframe-alt",
  "remove-keyframe":"iconoir-remove-keyframe",
  "remove-keyframes":"iconoir-remove-keyframes",
  "remove-link":"iconoir-remove-link",
  "remove-media-image":"iconoir-remove-media-image",
  "remove-media-video":"iconoir-remove-media-video",
  "remove-page-alt":"iconoir-remove-page-alt",
  "remove-page":"iconoir-remove-page",
  "remove-pin-alt":"iconoir-remove-pin-alt",
  "remove-pin":"iconoir-remove-pin",
  "remove-selection":"iconoir-remove-selection",
  "remove-square":"iconoir-remove-square",
  "remove-user":"iconoir-remove-user",
  "repeat-once":"iconoir-repeat-once",
  "repeat":"iconoir-repeat",
  "reply-to-message":"iconoir-reply-to-message",
  "reply":"iconoir-reply",
  "report-columns":"iconoir-report-columns",
  "reports":"iconoir-reports",
  "repository":"iconoir-repository",
  "restart":"iconoir-restart",
  "rewind":"iconoir-rewind",
  "rhombus":"iconoir-rhombus",
  "right-round-arrow":"iconoir-right-round-arrow",
  "rings":"iconoir-rings",
  "rocket":"iconoir-rocket",
  "rook":"iconoir-rook",
  "rotate-camera-left":"iconoir-rotate-camera-left",
  "rotate-camera-right":"iconoir-rotate-camera-right",
  "round-flask":"iconoir-round-flask",
  "rounded-mirror":"iconoir-rounded-mirror",
  "rss-feed-tag":"iconoir-rss-feed-tag",
  "rss-feed":"iconoir-rss-feed",
  "rubik-cube":"iconoir-rubik-cube",
  "ruler-add":"iconoir-ruler-add",
  "ruler-combine":"iconoir-ruler-combine",
  "ruler-remove":"iconoir-ruler-remove",
  "ruler":"iconoir-ruler",
  "running":"iconoir-running",
  "safari":"iconoir-safari",
  "sandals":"iconoir-sandals",
  "save-action-floppy":"iconoir-save-action-floppy",
  "save-floppy-disk":"iconoir-save-floppy-disk",
  "scale-frame-enlarge":"iconoir-scale-frame-enlarge",
  "scale-frame-reduce":"iconoir-scale-frame-reduce",
  "scan-barcode":"iconoir-scan-barcode",
  "scan-qr-code":"iconoir-scan-qr-code",
  "scanning":"iconoir-scanning",
  "scarf":"iconoir-scarf",
  "scissor-alt":"iconoir-scissor-alt",
  "scissor":"iconoir-scissor",
  "screenshot":"iconoir-screenshot",
  "sea-and-sun":"iconoir-sea-and-sun",
  "sea-waves":"iconoir-sea-waves",
  "search-engine":"iconoir-search-engine",
  "search-font":"iconoir-search-font",
  "search-window":"iconoir-search-window",
  "search":"iconoir-search",
  "secure-window":"iconoir-secure-window",
  "security-pass":"iconoir-security-pass",
  "select-window":"iconoir-select-window",
  "selection":"iconoir-selection",
  "selective-tool":"iconoir-selective-tool",
  "send-diagonal":"iconoir-send-diagonal",
  "send-dollars":"iconoir-send-dollars",
  "send-euros":"iconoir-send-euros",
  "send-mail":"iconoir-send-mail",
  "send-pounds":"iconoir-send-pounds",
  "send-yens":"iconoir-send-yens",
  "send":"iconoir-send",
  "server-connection":"iconoir-server-connection",
  "server":"iconoir-server",
  "settings-cloud":"iconoir-settings-cloud",
  "settings-profiles":"iconoir-settings-profiles",
  "settings":"iconoir-settings",
  "share-android":"iconoir-share-android",
  "share-ios":"iconoir-share-ios",
  "shield-add":"iconoir-shield-add",
  "shield-alert":"iconoir-shield-alert",
  "shield-alt":"iconoir-shield-alt",
  "shield-broken":"iconoir-shield-broken",
  "shield-check":"iconoir-shield-check",
  "shield-cross":"iconoir-shield-cross",
  "shield-download":"iconoir-shield-download",
  "shield-eye":"iconoir-shield-eye",
  "shield-loading":"iconoir-shield-loading",
  "shield-minus":"iconoir-shield-minus",
  "shield-question":"iconoir-shield-question",
  "shield-search":"iconoir-shield-search",
  "shield-upload":"iconoir-shield-upload",
  "shield":"iconoir-shield",
  "shop-alt":"iconoir-shop-alt",
  "shop":"iconoir-shop",
  "shopping-bag-add":"iconoir-shopping-bag-add",
  "shopping-bag-alt":"iconoir-shopping-bag-alt",
  "shopping-bag-arrow-down":"iconoir-shopping-bag-arrow-down",
  "shopping-bag-arrow-up":"iconoir-shopping-bag-arrow-up",
  "shopping-bag-check":"iconoir-shopping-bag-check",
  "shopping-bag-issue":"iconoir-shopping-bag-issue",
  "shopping-bag-remove":"iconoir-shopping-bag-remove",
  "shopping-bag":"iconoir-shopping-bag",
  "shopping-code-check":"iconoir-shopping-code-check",
  "shopping-code-error":"iconoir-shopping-code-error",
  "shopping-code":"iconoir-shopping-code",
  "short-pants-alt":"iconoir-short-pants-alt",
  "short-pants":"iconoir-short-pants",
  "shortcut":"iconoir-shortcut",
  "shuffle":"iconoir-shuffle",
  "sidebar-collapse":"iconoir-sidebar-collapse",
  "sidebar-expand":"iconoir-sidebar-expand",
  "sigma-function":"iconoir-sigma-function",
  "simple-cart":"iconoir-simple-cart",
  "sine-wave":"iconoir-sine-wave",
  "single-tap-gesture":"iconoir-single-tap-gesture",
  "skateboard":"iconoir-skateboard",
  "skateboarding":"iconoir-skateboarding",
  "skip-next":"iconoir-skip-next",
  "skip-prev":"iconoir-skip-prev",
  "sleeper-chair":"iconoir-sleeper-chair",
  "small-lamp-alt":"iconoir-small-lamp-alt",
  "small-lamp":"iconoir-small-lamp",
  "small-shop-alt":"iconoir-small-shop-alt",
  "small-shop":"iconoir-small-shop",
  "smartphone-device":"iconoir-smartphone-device",
  "smoking":"iconoir-smoking",
  "snapchat":"iconoir-snapchat",
  "snow-flake":"iconoir-snow-flake",
  "snow":"iconoir-snow",
  "soap":"iconoir-soap",
  "soccer-ball":"iconoir-soccer-ball",
  "sofa":"iconoir-sofa",
  "soil-alt":"iconoir-soil-alt",
  "soil":"iconoir-soil",
  "sort-down":"iconoir-sort-down",
  "sort-up":"iconoir-sort-up",
  "sort":"iconoir-sort",
  "sound-high":"iconoir-sound-high",
  "sound-low":"iconoir-sound-low",
  "sound-min":"iconoir-sound-min",
  "sound-off":"iconoir-sound-off",
  "spades":"iconoir-spades",
  "sphere":"iconoir-sphere",
  "spiral":"iconoir-spiral",
  "spock-hand-gesture":"iconoir-spock-hand-gesture",
  "square-wave":"iconoir-square-wave",
  "square":"iconoir-square",
  "stackoverflow":"iconoir-stackoverflow",
  "star-dashed":"iconoir-star-dashed",
  "star-half-dashed":"iconoir-star-half-dashed",
  "star":"iconoir-star",
  "stat-down":"iconoir-stat-down",
  "stat-up":"iconoir-stat-up",
  "stats-down-square":"iconoir-stats-down-square",
  "stats-report":"iconoir-stats-report",
  "stats-up-square":"iconoir-stats-up-square",
  "strategy":"iconoir-strategy",
  "stretching":"iconoir-stretching",
  "stroller":"iconoir-stroller",
  "style-border":"iconoir-style-border",
  "submit-document":"iconoir-submit-document",
  "substract":"iconoir-substract",
  "suggestion":"iconoir-suggestion",
  "sun-light":"iconoir-sun-light",
  "svg-format":"iconoir-svg-format",
  "swimming":"iconoir-swimming",
  "swipe-down-gesture":"iconoir-swipe-down-gesture",
  "swipe-left-gesture":"iconoir-swipe-left-gesture",
  "swipe-right-gesture":"iconoir-swipe-right-gesture",
  "swipe-two-fingers-down-gesture":"iconoir-swipe-two-fingers-down-gesture",
  "swipe-two-fingers-left-gesture":"iconoir-swipe-two-fingers-left-gesture",
  "swipe-two-fingers-right-gesture":"iconoir-swipe-two-fingers-right-gesture",
  "swipe-two-fingers-up-gesture":"iconoir-swipe-two-fingers-up-gesture",
  "swipe-up-gesture":"iconoir-swipe-up-gesture",
  "switch-off":"iconoir-switch-off",
  "switch-on":"iconoir-switch-on",
  "system-restart":"iconoir-system-restart",
  "system-shut":"iconoir-system-shut",
  "t-shirt":"iconoir-t-shirt",
  "table-2-columns":"iconoir-table-2-columns",
  "table-rows":"iconoir-table-rows",
  "table":"iconoir-table",
  "task-list":"iconoir-task-list",
  "telegram-circle":"iconoir-telegram-circle",
  "telegram":"iconoir-telegram",
  "tennis-ball-alt":"iconoir-tennis-ball-alt",
  "tennis-ball":"iconoir-tennis-ball",
  "terminal-tag":"iconoir-terminal-tag",
  "terminal":"iconoir-terminal",
  "test-tube":"iconoir-test-tube",
  "text-alt":"iconoir-text-alt",
  "text-box":"iconoir-text-box",
  "text-size":"iconoir-text-size",
  "text":"iconoir-text",
  "three-points-circle":"iconoir-three-points-circle",
  "three-stars":"iconoir-three-stars",
  "thumbs-down":"iconoir-thumbs-down",
  "thumbs-up":"iconoir-thumbs-up",
  "thunderstorm":"iconoir-thunderstorm",
  "tif-format":"iconoir-tif-format",
  "tiff-format":"iconoir-tiff-format",
  "tiktok":"iconoir-tiktok",
  "timer-off":"iconoir-timer-off",
  "timer":"iconoir-timer",
  "tools":"iconoir-tools",
  "tournament":"iconoir-tournament",
  "tower-check":"iconoir-tower-check",
  "tower-no-access":"iconoir-tower-no-access",
  "tower-warning":"iconoir-tower-warning",
  "tower":"iconoir-tower",
  "trademark":"iconoir-trademark",
  "train":"iconoir-train",
  "tram":"iconoir-tram",
  "transition-down":"iconoir-transition-down",
  "transition-left":"iconoir-transition-left",
  "transition-right":"iconoir-transition-right",
  "transition-up":"iconoir-transition-up",
  "translate":"iconoir-translate",
  "trash":"iconoir-trash",
  "treadmill":"iconoir-treadmill",
  "tree":"iconoir-tree",
  "trekking":"iconoir-trekking",
  "trello":"iconoir-trello",
  "triangle-flag-circle":"iconoir-triangle-flag-circle",
  "triangle-flag-two-stripes":"iconoir-triangle-flag-two-stripes",
  "triangle-flag":"iconoir-triangle-flag",
  "triangle":"iconoir-triangle",
  "trophy":"iconoir-trophy",
  "truck-length":"iconoir-truck-length",
  "truck":"iconoir-truck",
  "tunnel":"iconoir-tunnel",
  "tv-fix":"iconoir-tv-fix",
  "tv-issue":"iconoir-tv-issue",
  "tv":"iconoir-tv",
  "twitter-verified-badge":"iconoir-twitter-verified-badge",
  "twitter":"iconoir-twitter",
  "two-points-circle":"iconoir-two-points-circle",
  "two-seater-sofa":"iconoir-two-seater-sofa",
  "type":"iconoir-type",
  "umbrella-full":"iconoir-umbrella-full",
  "underline-square":"iconoir-underline-square",
  "underline":"iconoir-underline",
  "undo-action":"iconoir-undo-action",
  "undo-circle":"iconoir-undo-circle",
  "undo":"iconoir-undo",
  "union-alt":"iconoir-union-alt",
  "union-horiz-alt":"iconoir-union-horiz-alt",
  "union":"iconoir-union",
  "unity-5":"iconoir-unity-5",
  "unity":"iconoir-unity",
  "up-round-arrow":"iconoir-up-round-arrow",
  "upload-data-window":"iconoir-upload-data-window",
  "upload-square":"iconoir-upload-square",
  "upload":"iconoir-upload",
  "usb":"iconoir-usb",
  "user-bag":"iconoir-user-bag",
  "user-cart":"iconoir-user-cart",
  "user-circle":"iconoir-user-circle",
  "user-crown":"iconoir-user-crown",
  "user-love":"iconoir-user-love",
  "user-scan":"iconoir-user-scan",
  "user-square":"iconoir-user-square",
  "user-star":"iconoir-user-star",
  "user":"iconoir-user",
  "vegan-circle":"iconoir-vegan-circle",
  "vegan-square":"iconoir-vegan-square",
  "vegan":"iconoir-vegan",
  "verified-badge":"iconoir-verified-badge",
  "verified-user":"iconoir-verified-user",
  "vertical-merge":"iconoir-vertical-merge",
  "vertical-split":"iconoir-vertical-split",
  "vials":"iconoir-vials",
  "video-camera-off":"iconoir-video-camera-off",
  "video-camera":"iconoir-video-camera",
  "video-projector":"iconoir-video-projector",
  "view-columns-2":"iconoir-view-columns-2",
  "view-columns-3":"iconoir-view-columns-3",
  "view-grid":"iconoir-view-grid",
  "view-structure-down":"iconoir-view-structure-down",
  "view-structure-up":"iconoir-view-structure-up",
  "voice-circle":"iconoir-voice-circle",
  "voice-error":"iconoir-voice-error",
  "voice-lock-circle":"iconoir-voice-lock-circle",
  "voice-ok":"iconoir-voice-ok",
  "voice-phone":"iconoir-voice-phone",
  "voice-scan":"iconoir-voice-scan",
  "voice-square":"iconoir-voice-square",
  "voice":"iconoir-voice",
  "vr-symbol":"iconoir-vr-symbol",
  "waist":"iconoir-waist",
  "walking":"iconoir-walking",
  "wallet":"iconoir-wallet",
  "warning-circle":"iconoir-warning-circle",
  "warning-hexagon":"iconoir-warning-hexagon",
  "warning-square":"iconoir-warning-square",
  "warning-triangle":"iconoir-warning-triangle",
  "warning-window":"iconoir-warning-window",
  "wash":"iconoir-wash",
  "washing-machine":"iconoir-washing-machine",
  "watering-soil":"iconoir-watering-soil",
  "web-window-close":"iconoir-web-window-close",
  "web-window-energy-consumption":"iconoir-web-window-energy-consumption",
  "web-window":"iconoir-web-window",
  "webp-format":"iconoir-webp-format",
  "weight-alt":"iconoir-weight-alt",
  "weight":"iconoir-weight",
  "white-flag":"iconoir-white-flag",
  "wifi-error":"iconoir-wifi-error",
  "wifi-issue":"iconoir-wifi-issue",
  "wifi-off":"iconoir-wifi-off",
  "wifi-signal-none":"iconoir-wifi-signal-none",
  "wifi-tag":"iconoir-wifi-tag",
  "wifi":"iconoir-wifi",
  "wind":"iconoir-wind",
  "windows":"iconoir-windows",
  "women-t-shirt":"iconoir-women-t-shirt",
  "wrap-text":"iconoir-wrap-text",
  "wrench":"iconoir-wrench",
  "wristwatch":"iconoir-wristwatch",
  "www":"iconoir-www",
  "x-coordinate":"iconoir-x-coordinate",
  "xbox-a":"iconoir-xbox-a",
  "xbox-b":"iconoir-xbox-b",
  "xbox-x":"iconoir-xbox-x",
  "xbox-y":"iconoir-xbox-y",
  "xray-view":"iconoir-xray-view",
  "y-coordinate":"iconoir-y-coordinate",
  "yen-square":"iconoir-yen-square",
  "yen":"iconoir-yen",
  "yoga":"iconoir-yoga",
  "youtube":"iconoir-youtube",
  "z-coordinate":"iconoir-z-coordinate",
  "zoom-in":"iconoir-zoom-in",
  "zoom-out":"iconoir-zoom-out"
}`);

// main.ts
var IconoirPlugin = class extends import_obsidian.Plugin {
  async litBlockHandler(type, source, el, ctx) {
    const element = document.createRange().createContextualFragment(source);
    let input = element;
    const blk = el.createEl("div", { cls: "lit-block" });
    let inputElement;
    inputElement = blk.createEl("div", { text: input, cls: "lit-innerblock" });
  }
  async onload() {
    this.registerEditorSuggest(new IconoirSuggester(this));
    this.registerMarkdownCodeBlockProcessor("iconoir", this.litBlockHandler.bind(this, null));
    this.registerMarkdownPostProcessor(buildPostProcessor());
    this.iconoirNames = Object.keys(iconoir);
    this.isListItem = false;
    console.log("iconoir-icons loaded");
  }
  onunload() {
    console.log("iconoir-icons unloaded");
  }
};
function buildPostProcessor() {
  return (el) => {
    el.findAll("code").forEach((code) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      let text = code.innerText.trim();
      console.log(text);
      if (text.startsWith("~![")) {
        let frag = text.substring(2).trim();
        if (frag.endsWith("]")) {
          let content = frag.substring(frag.length - 1, 1).trim();
          const arr = ((_a = code.parentElement) == null ? void 0 : _a.tagName) === "TD" || ((_b = code.parentElement) == null ? void 0 : _b.tagName) === "TH" ? content.split("\\|") : content.split("|");
          if (arr[0] === "" || arr[0] === void 0) {
            return "";
          }
          if (((_c = code.parentElement) == null ? void 0 : _c.tagName) === "LI") {
            (_d = code.parentElement) == null ? void 0 : _d.addClass("special-iconoir-list-callout");
            (_e = code.parentElement) == null ? void 0 : _e.setAttr("data-icon", arr[0]);
          }
          if (((_f = code.parentElement) == null ? void 0 : _f.tagName) === "TH") {
            (_g = code.parentElement) == null ? void 0 : _g.addClass("special-iconoir-th-callout");
            (_h = code.parentElement) == null ? void 0 : _h.setAttr("data-icon", arr[0]);
          }
          if (((_i = code.parentElement) == null ? void 0 : _i.tagName) === "TD") {
            (_j = code.parentElement) == null ? void 0 : _j.addClass("special-iconoir-td-callout");
            (_k = code.parentElement) == null ? void 0 : _k.setAttr("data-icon", arr[0]);
          }
          var newEl = document.createElement("iconoir-icon");
          newEl.setAttribute("name", arr[0]);
          newEl.setAttribute("aria-label", arr[0] + " icon");
          newEl.setAttribute("aria-label-position", "top");
          if (arr[1] !== void 0) {
            newEl.setAttribute("stroke", arr[1]);
          }
          if (arr[2] !== void 0) {
            newEl.setAttribute("width", arr[2]);
          }
          if (arr[3] !== void 0) {
            newEl.setAttribute("height", arr[3]);
          }
          if (arr[4] !== void 0) {
            newEl.setAttribute("style", arr[4]);
          }
          (_l = code.parentNode) == null ? void 0 : _l.replaceChild(newEl, code);
        }
      }
    });
  };
}
var IconoirSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, _2) {
    var _a;
    let foo = "bar";
    if (foo === "bar") {
      const sub = editor.getLine(cursor.line).substring(0, cursor.ch);
      const match = (_a = sub.match(/&&\S+$/)) == null ? void 0 : _a.first();
      if (match) {
        return {
          end: cursor,
          start: {
            ch: sub.lastIndexOf(match),
            line: cursor.line
          },
          query: match
        };
      }
    }
    return null;
  }
  getSuggestions(context) {
    let iconoir_query = context.query.replace("&&", "").toLowerCase();
    return this.plugin.iconoirNames.filter((p2) => p2.includes(iconoir_query));
  }
  renderSuggestion(suggestion, el) {
    const outer = el.createDiv({ cls: "icon-suggester-container" });
    outer.createDiv({ cls: "iconoir-icon-name" }).setText(suggestion);
  }
  selectSuggestion(suggestion) {
    if (this.context) {
      this.context.editor.replaceRange("`~![" + iconoir[suggestion] + "]`", this.context.start, this.context.end);
    }
  }
};
var IconoirIcon = class extends s4 {
  static get properties() {
    return {
      name: { type: String },
      stroke: { type: String },
      width: { type: String },
      height: { type: String },
      css: { type: String }
    };
  }
  constructor() {
    super();
    this.name = "iconoir-1st-medal";
    this.stroke = "currentColor";
    this.width = "1.2em";
    this.height = "1.2em";
    this.css = "";
  }
  render() {
    return y`
    <i class="${this.name}" style="${this.css}"></i>
      <style>
        i[class^="iconoir-"]::before,
        i[class*=" iconoir-"]::before {
          content: " ";
          display: var(--special-display);
          -webkit-mask-image:var(--${this.name});
          mask-image:var(--${this.name});
          background: ${this.stroke};
          mask-size: cover;
          -webkit-mask-size: cover;
          width: ${this.width};
          height: ${this.height};
        }
        i[class^="iconoir-"],
        i[class*=" iconoir-"] {
          display:inline-flex !important;
          border: var(--special-border);
          margin: var(--special-margin);
          padding: var(--special-padding);
        }
      </style>  
    `;
  }
};
var isRegistered = window.customElements.get("iconoir-icon");
if (isRegistered === void 0) {
  window.customElements.define("iconoir-icon", IconoirIcon);
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3NyYy9jc3MtdGFnLnRzIiwgIm5vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvc3JjL3JlYWN0aXZlLWVsZW1lbnQudHMiLCAibm9kZV9tb2R1bGVzL2xpdC1odG1sL3NyYy9saXQtaHRtbC50cyIsICJub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvc3JjL2xpdC1lbGVtZW50LnRzIiwgImljb25vaXJOYW1lcy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSxcbiAgRWRpdG9yLCBFZGl0b3JQb3NpdGlvbixcbiAgRWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvLCBcbiAgRWRpdG9yU3VnZ2VzdCwgRWRpdG9yU3VnZ2VzdENvbnRleHQsXG4gIE1hcmtkb3duUG9zdFByb2Nlc3NvciB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7aHRtbCwgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGljb25vaXIgfSBmcm9tICcuL2ljb25vaXJOYW1lcyc7XG5cbmVudW0gQ29tcG9uZW50Q2hvaWNlIHtcblx0RGVmYXVsdCA9IFwiRGVmYXVsdFwiLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29ub2lyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgaWNvbm9pck5hbWVzOiBzdHJpbmdbXTtcbiAgaXNMaXN0SXRlbTogYW55O1xuXHRcbiAgYXN5bmMgbGl0QmxvY2tIYW5kbGVyKHR5cGU6IENvbXBvbmVudENob2ljZSwgc291cmNlOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCwgY3R4OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuXHRcdGNvbnN0IGVsZW1lbnQ6YW55ID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoc291cmNlKTtcblx0XHRsZXQgaW5wdXQgPSBlbGVtZW50XG5cdFx0Y29uc3QgYmxrID0gZWwuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJsaXQtYmxvY2tcIn0pO1xuXHRcdGxldCBpbnB1dEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXHRcdGlucHV0RWxlbWVudCA9IGJsay5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogaW5wdXQsIGNsczogXCJsaXQtaW5uZXJibG9ja1wifSk7XG5cdH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG4gICAgdGhpcy5yZWdpc3RlckVkaXRvclN1Z2dlc3QobmV3IEljb25vaXJTdWdnZXN0ZXIodGhpcykpO1xuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcImljb25vaXJcIiwgdGhpcy5saXRCbG9ja0hhbmRsZXIuYmluZCh0aGlzLCBudWxsKSk7XG4gICAgdGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcihidWlsZFBvc3RQcm9jZXNzb3IoKSk7XG4gICAgdGhpcy5pY29ub2lyTmFtZXMgPSBPYmplY3Qua2V5cyhpY29ub2lyKTtcbiAgICB0aGlzLmlzTGlzdEl0ZW0gPSBmYWxzZTtcbiAgICBjb25zb2xlLmxvZygnaWNvbm9pci1pY29ucyBsb2FkZWQnKTtcbiAgfVxuXHRvbnVubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnaWNvbm9pci1pY29ucyB1bmxvYWRlZCcpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFBvc3RQcm9jZXNzb3IoKTogTWFya2Rvd25Qb3N0UHJvY2Vzc29yIHtcblx0cmV0dXJuIChlbCkgPT4ge1xuICAgIGVsLmZpbmRBbGwoXCJjb2RlXCIpLmZvckVhY2goKGNvZGUpID0+IHtcbiAgICAgIGxldCB0ZXh0ID0gY29kZS5pbm5lclRleHQudHJpbSgpO1xuICAgICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICBpZiAodGV4dC5zdGFydHNXaXRoKCd+IVsnKSkge1xuICAgICAgICBsZXQgZnJhZyA9IHRleHQuc3Vic3RyaW5nKDIpLnRyaW0oKTtcbiAgICAgICAgaWYgKGZyYWcuZW5kc1dpdGgoJ10nKSkge1xuICAgICAgICAgIGxldCBjb250ZW50ID0gZnJhZy5zdWJzdHJpbmcoZnJhZy5sZW5ndGgtMSwxKS50cmltKCk7XG4gICAgICAgICAgY29uc3QgYXJyID0gKGNvZGUucGFyZW50RWxlbWVudD8udGFnTmFtZSA9PT0gJ1REJyB8fCBjb2RlLnBhcmVudEVsZW1lbnQ/LnRhZ05hbWUgPT09ICdUSCcpIFxuICAgICAgICAgICAgPyBjb250ZW50LnNwbGl0KCdcXFxcfCcpXG4gICAgICAgICAgICA6IGNvbnRlbnQuc3BsaXQoJ3wnKTtcbiAgICAgICAgICBpZiAoYXJyWzBdID09PSAnJyB8fCBhcnJbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZS5wYXJlbnRFbGVtZW50Py50YWdOYW1lID09PSAnTEknKSB7XG4gICAgICAgICAgICBjb2RlLnBhcmVudEVsZW1lbnQ/LmFkZENsYXNzKCdzcGVjaWFsLWljb25vaXItbGlzdC1jYWxsb3V0Jyk7XG4gICAgICAgICAgICBjb2RlLnBhcmVudEVsZW1lbnQ/LnNldEF0dHIoXCJkYXRhLWljb25cIiwgYXJyWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvZGUucGFyZW50RWxlbWVudD8udGFnTmFtZSA9PT0gJ1RIJykge1xuICAgICAgICAgICAgY29kZS5wYXJlbnRFbGVtZW50Py5hZGRDbGFzcygnc3BlY2lhbC1pY29ub2lyLXRoLWNhbGxvdXQnKTtcbiAgICAgICAgICAgIGNvZGUucGFyZW50RWxlbWVudD8uc2V0QXR0cihcImRhdGEtaWNvblwiLCBhcnJbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZS5wYXJlbnRFbGVtZW50Py50YWdOYW1lID09PSAnVEQnKSB7XG4gICAgICAgICAgICBjb2RlLnBhcmVudEVsZW1lbnQ/LmFkZENsYXNzKCdzcGVjaWFsLWljb25vaXItdGQtY2FsbG91dCcpO1xuICAgICAgICAgICAgY29kZS5wYXJlbnRFbGVtZW50Py5zZXRBdHRyKFwiZGF0YS1pY29uXCIsIGFyclswXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBuZXdFbCAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImljb25vaXItaWNvblwiKTtcbiAgICAgICAgICBuZXdFbC5zZXRBdHRyaWJ1dGUoJ25hbWUnLGFyclswXSk7XG4gICAgICAgICAgbmV3RWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJyxhcnJbMF0rJyBpY29uJyk7XG4gICAgICAgICAgbmV3RWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsLXBvc2l0aW9uJywgJ3RvcCcpO1xuICAgICAgICAgIGlmIChhcnJbMV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3RWwuc2V0QXR0cmlidXRlKCdzdHJva2UnLGFyclsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcnJbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3RWwuc2V0QXR0cmlidXRlKCd3aWR0aCcsYXJyWzJdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFyclszXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdFbC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsYXJyWzNdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFycls0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdFbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJyxhcnJbNF0pO1xuICAgICAgICAgIH0gXG4gICAgICAgICAgY29kZS5wYXJlbnROb2RlPy5yZXBsYWNlQ2hpbGQobmV3RWwsIGNvZGUpOyBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuY2xhc3MgSWNvbm9pclN1Z2dlc3RlciBleHRlbmRzIEVkaXRvclN1Z2dlc3Q8c3RyaW5nPiB7XG5cdHBsdWdpbjogSWNvbm9pclBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IEljb25vaXJQbHVnaW4pIHtcblx0XHRzdXBlcihwbHVnaW4uYXBwKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdG9uVHJpZ2dlcihjdXJzb3I6IEVkaXRvclBvc2l0aW9uLCBlZGl0b3I6IEVkaXRvciwgXzogVEZpbGUpOiBFZGl0b3JTdWdnZXN0VHJpZ2dlckluZm8gfCBudWxsIHtcbiAgICBsZXQgZm9vPSdiYXInO1xuXHRcdGlmIChmb289PT0nYmFyJykge1xuXHRcdFx0Y29uc3Qgc3ViID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpLnN1YnN0cmluZygwLCBjdXJzb3IuY2gpO1xuICAgICAgY29uc3QgbWF0Y2ggPSBzdWIubWF0Y2goLyYmXFxTKyQvKT8uZmlyc3QoKTtcblx0XHRcdGlmIChtYXRjaCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVuZDogY3Vyc29yLFxuXHRcdFx0XHRcdHN0YXJ0OiB7XG5cdFx0XHRcdFx0XHRjaDogc3ViLmxhc3RJbmRleE9mKG1hdGNoKSxcblx0XHRcdFx0XHRcdGxpbmU6IGN1cnNvci5saW5lLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cXVlcnk6IG1hdGNoLFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Z2V0U3VnZ2VzdGlvbnMoY29udGV4dDogRWRpdG9yU3VnZ2VzdENvbnRleHQpOiBzdHJpbmdbXSB7XG5cdFx0bGV0IGljb25vaXJfcXVlcnkgPSBjb250ZXh0LnF1ZXJ5LnJlcGxhY2UoJyYmJywgJycpLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIHRoaXMucGx1Z2luLmljb25vaXJOYW1lcy5maWx0ZXIocCA9PiBwLmluY2x1ZGVzKGljb25vaXJfcXVlcnkpKTtcbiAgfVxuXG5cdHJlbmRlclN1Z2dlc3Rpb24oc3VnZ2VzdGlvbjogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblx0XHRjb25zdCBvdXRlciA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJpY29uLXN1Z2dlc3Rlci1jb250YWluZXJcIiB9KTtcblx0XHRvdXRlci5jcmVhdGVEaXYoeyBjbHM6IFwiaWNvbm9pci1pY29uLW5hbWVcIiB9KS5zZXRUZXh0KHN1Z2dlc3Rpb24pO1xuXHR9XG5cblx0c2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZih0aGlzLmNvbnRleHQpIHtcblx0XHRcdC8vICh0aGlzLmNvbnRleHQuZWRpdG9yIGFzIEVkaXRvcikucmVwbGFjZVJhbmdlKCdgfiFbJytpY29ub2lyW3N1Z2dlc3Rpb25dKyd8Y3VycmVudENvbG9yXWAnLCB0aGlzLmNvbnRleHQuc3RhcnQsIHRoaXMuY29udGV4dC5lbmQpO1xuXHRcdFx0KHRoaXMuY29udGV4dC5lZGl0b3IgYXMgRWRpdG9yKS5yZXBsYWNlUmFuZ2UoJ2B+IVsnK2ljb25vaXJbc3VnZ2VzdGlvbl0rJ11gJywgdGhpcy5jb250ZXh0LnN0YXJ0LCB0aGlzLmNvbnRleHQuZW5kKTtcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgSWNvbm9pckljb24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuXHQgIHJldHVybiB7XG4gICAgICBuYW1lOiAgIHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBzdHJva2U6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICB3aWR0aDogIHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBoZWlnaHQ6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBjc3M6ICB7IHR5cGU6IFN0cmluZyB9XG5cdCAgfVxuXHR9XG4gIGNvbnN0cnVjdG9yKCkge1xuXHQgIHN1cGVyKCk7XG4gICAgdGhpcy5uYW1lID0gJ2ljb25vaXItMXN0LW1lZGFsJztcbiAgICB0aGlzLnN0cm9rZSA9ICdjdXJyZW50Q29sb3InO1xuICAgIHRoaXMud2lkdGggPSAnMS4yZW0nO1xuICAgIHRoaXMuaGVpZ2h0ID0gJzEuMmVtJztcbiAgICB0aGlzLmNzcyA9ICcnO1xuICB9XG5cdHJlbmRlcigpIHtcblx0ICByZXR1cm4gaHRtbGBcbiAgICA8aSBjbGFzcz1cIiR7dGhpcy5uYW1lfVwiIHN0eWxlPVwiJHt0aGlzLmNzc31cIj48L2k+XG4gICAgICA8c3R5bGU+XG4gICAgICAgIGlbY2xhc3NePVwiaWNvbm9pci1cIl06OmJlZm9yZSxcbiAgICAgICAgaVtjbGFzcyo9XCIgaWNvbm9pci1cIl06OmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICAgICAgZGlzcGxheTogdmFyKC0tc3BlY2lhbC1kaXNwbGF5KTtcbiAgICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6dmFyKC0tJHt0aGlzLm5hbWV9KTtcbiAgICAgICAgICBtYXNrLWltYWdlOnZhcigtLSR7dGhpcy5uYW1lfSk7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHt0aGlzLnN0cm9rZX07XG4gICAgICAgICAgbWFzay1zaXplOiBjb3ZlcjtcbiAgICAgICAgICAtd2Via2l0LW1hc2stc2l6ZTogY292ZXI7XG4gICAgICAgICAgd2lkdGg6ICR7dGhpcy53aWR0aH07XG4gICAgICAgICAgaGVpZ2h0OiAke3RoaXMuaGVpZ2h0fTtcbiAgICAgICAgfVxuICAgICAgICBpW2NsYXNzXj1cImljb25vaXItXCJdLFxuICAgICAgICBpW2NsYXNzKj1cIiBpY29ub2lyLVwiXSB7XG4gICAgICAgICAgZGlzcGxheTppbmxpbmUtZmxleCAhaW1wb3J0YW50O1xuICAgICAgICAgIGJvcmRlcjogdmFyKC0tc3BlY2lhbC1ib3JkZXIpO1xuICAgICAgICAgIG1hcmdpbjogdmFyKC0tc3BlY2lhbC1tYXJnaW4pO1xuICAgICAgICAgIHBhZGRpbmc6IHZhcigtLXNwZWNpYWwtcGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgIDwvc3R5bGU+ICBcbiAgICBgO1xuXHR9XG59XG5cbnZhciBpc1JlZ2lzdGVyZWQgPSB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZ2V0KCdpY29ub2lyLWljb24nKTtcbmlmIChpc1JlZ2lzdGVyZWQgPT09IHVuZGVmaW5lZCkge1xuICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdpY29ub2lyLWljb24nLCBJY29ub2lySWNvbik7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbmNvbnN0IE5PREVfTU9ERSA9IGZhbHNlO1xuY29uc3QgZ2xvYmFsID0gTk9ERV9NT0RFID8gZ2xvYmFsVGhpcyA6IHdpbmRvdztcblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgc3VwcG9ydHMgYGFkb3B0ZWRTdHlsZVNoZWV0c2AuXG4gKi9cbmV4cG9ydCBjb25zdCBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgPVxuICBnbG9iYWwuU2hhZG93Um9vdCAmJlxuICAoZ2xvYmFsLlNoYWR5Q1NTID09PSB1bmRlZmluZWQgfHwgZ2xvYmFsLlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykgJiZcbiAgJ2Fkb3B0ZWRTdHlsZVNoZWV0cycgaW4gRG9jdW1lbnQucHJvdG90eXBlICYmXG4gICdyZXBsYWNlJyBpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBBIENTU1Jlc3VsdCBvciBuYXRpdmUgQ1NTU3R5bGVTaGVldC5cbiAqXG4gKiBJbiBicm93c2VycyB0aGF0IHN1cHBvcnQgY29uc3RydWN0aWJsZSBDU1Mgc3R5bGUgc2hlZXRzLCBDU1NTdHlsZVNoZWV0XG4gKiBvYmplY3QgY2FuIGJlIHVzZWQgZm9yIHN0eWxpbmcgYWxvbmcgc2lkZSBDU1NSZXN1bHQgZnJvbSB0aGUgYGNzc2BcbiAqIHRlbXBsYXRlIHRhZy5cbiAqL1xuZXhwb3J0IHR5cGUgQ1NTUmVzdWx0T3JOYXRpdmUgPSBDU1NSZXN1bHQgfCBDU1NTdHlsZVNoZWV0O1xuXG5leHBvcnQgdHlwZSBDU1NSZXN1bHRBcnJheSA9IEFycmF5PENTU1Jlc3VsdE9yTmF0aXZlIHwgQ1NTUmVzdWx0QXJyYXk+O1xuXG4vKipcbiAqIEEgc2luZ2xlIENTU1Jlc3VsdCwgQ1NTU3R5bGVTaGVldCwgb3IgYW4gYXJyYXkgb3IgbmVzdGVkIGFycmF5cyBvZiB0aG9zZS5cbiAqL1xuZXhwb3J0IHR5cGUgQ1NTUmVzdWx0R3JvdXAgPSBDU1NSZXN1bHRPck5hdGl2ZSB8IENTU1Jlc3VsdEFycmF5O1xuXG5jb25zdCBjb25zdHJ1Y3Rpb25Ub2tlbiA9IFN5bWJvbCgpO1xuXG5jb25zdCBjc3NUYWdDYWNoZSA9IG5ldyBXZWFrTWFwPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBDU1NTdHlsZVNoZWV0PigpO1xuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIHN0cmluZyBvZiBDU1MgdGV4dCwgdGhhdCBtYXkgYmUgdXNlZCB0byBjcmVhdGUgYSBDU1NTdHlsZVNoZWV0LlxuICpcbiAqIENTU1Jlc3VsdCBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGBjc3NgLXRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFscyBhbmRcbiAqIGB1bnNhZmVDU1MoKWAuIEluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IENTU1Jlc3VsdHMgYXJlIG9ubHkgY3JlYXRlZCB2aWEgdGhlXG4gKiBgY3NzYCB0YWcgYW5kIGB1bnNhZmVDU1MoKWAsIENTU1Jlc3VsdCBjYW5ub3QgYmUgY29uc3RydWN0ZWQgZGlyZWN0bHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBDU1NSZXN1bHQge1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICBbJ18kY3NzUmVzdWx0JCddID0gdHJ1ZTtcbiAgcmVhZG9ubHkgY3NzVGV4dDogc3RyaW5nO1xuICBwcml2YXRlIF9zdHlsZVNoZWV0PzogQ1NTU3R5bGVTaGVldDtcbiAgcHJpdmF0ZSBfc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXkgfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBjc3NUZXh0OiBzdHJpbmcsXG4gICAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXkgfCB1bmRlZmluZWQsXG4gICAgc2FmZVRva2VuOiBzeW1ib2xcbiAgKSB7XG4gICAgaWYgKHNhZmVUb2tlbiAhPT0gY29uc3RydWN0aW9uVG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5jc3NUZXh0ID0gY3NzVGV4dDtcbiAgICB0aGlzLl9zdHJpbmdzID0gc3RyaW5ncztcbiAgfVxuXG4gIC8vIFRoaXMgaXMgYSBnZXR0ZXIgc28gdGhhdCBpdCdzIGxhenkuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zIHN0eWxlc2hlZXRzXG4gIC8vIGFyZSBub3QgY3JlYXRlZCB1bnRpbCB0aGUgZmlyc3QgZWxlbWVudCBpbnN0YW5jZSBpcyBtYWRlLlxuICBnZXQgc3R5bGVTaGVldCgpOiBDU1NTdHlsZVNoZWV0IHwgdW5kZWZpbmVkIHtcbiAgICAvLyBJZiBgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzYCBpcyB0cnVlIHRoZW4gd2UgYXNzdW1lIENTU1N0eWxlU2hlZXQgaXNcbiAgICAvLyBjb25zdHJ1Y3RhYmxlLlxuICAgIGxldCBzdHlsZVNoZWV0ID0gdGhpcy5fc3R5bGVTaGVldDtcbiAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5fc3RyaW5ncztcbiAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzICYmIHN0eWxlU2hlZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgY2FjaGVhYmxlID0gc3RyaW5ncyAhPT0gdW5kZWZpbmVkICYmIHN0cmluZ3MubGVuZ3RoID09PSAxO1xuICAgICAgaWYgKGNhY2hlYWJsZSkge1xuICAgICAgICBzdHlsZVNoZWV0ID0gY3NzVGFnQ2FjaGUuZ2V0KHN0cmluZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlU2hlZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAodGhpcy5fc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpKS5yZXBsYWNlU3luYyhcbiAgICAgICAgICB0aGlzLmNzc1RleHRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNhY2hlYWJsZSkge1xuICAgICAgICAgIGNzc1RhZ0NhY2hlLnNldChzdHJpbmdzLCBzdHlsZVNoZWV0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVTaGVldDtcbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY3NzVGV4dDtcbiAgfVxufVxuXG50eXBlIENvbnN0cnVjdGFibGVDU1NSZXN1bHQgPSBDU1NSZXN1bHQgJiB7XG4gIG5ldyAoXG4gICAgY3NzVGV4dDogc3RyaW5nLFxuICAgIHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5IHwgdW5kZWZpbmVkLFxuICAgIHNhZmVUb2tlbjogc3ltYm9sXG4gICk6IENTU1Jlc3VsdDtcbn07XG5cbmNvbnN0IHRleHRGcm9tQ1NTUmVzdWx0ID0gKHZhbHVlOiBDU1NSZXN1bHRHcm91cCB8IG51bWJlcikgPT4ge1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICBpZiAoKHZhbHVlIGFzIENTU1Jlc3VsdClbJ18kY3NzUmVzdWx0JCddID09PSB0cnVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBhcyBDU1NSZXN1bHQpLmNzc1RleHQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IGAgK1xuICAgICAgICBgJHt2YWx1ZX0uIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSBgICtcbiAgICAgICAgYHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LmBcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyYXAgYSB2YWx1ZSBmb3IgaW50ZXJwb2xhdGlvbiBpbiBhIHtAbGlua2NvZGUgY3NzfSB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbC5cbiAqXG4gKiBUaGlzIGlzIHVuc2FmZSBiZWNhdXNlIHVudHJ1c3RlZCBDU1MgdGV4dCBjYW4gYmUgdXNlZCB0byBwaG9uZSBob21lXG4gKiBvciBleGZpbHRyYXRlIGRhdGEgdG8gYW4gYXR0YWNrZXIgY29udHJvbGxlZCBzaXRlLiBUYWtlIGNhcmUgdG8gb25seSB1c2VcbiAqIHRoaXMgd2l0aCB0cnVzdGVkIGlucHV0LlxuICovXG5leHBvcnQgY29uc3QgdW5zYWZlQ1NTID0gKHZhbHVlOiB1bmtub3duKSA9PlxuICBuZXcgKENTU1Jlc3VsdCBhcyBDb25zdHJ1Y3RhYmxlQ1NTUmVzdWx0KShcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpLFxuICAgIHVuZGVmaW5lZCxcbiAgICBjb25zdHJ1Y3Rpb25Ub2tlblxuICApO1xuXG4vKipcbiAqIEEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgd2hpY2ggY2FuIGJlIHVzZWQgd2l0aCBMaXRFbGVtZW50J3NcbiAqIHtAbGlua2NvZGUgTGl0RWxlbWVudC5zdHlsZXN9IHByb3BlcnR5IHRvIHNldCBlbGVtZW50IHN0eWxlcy5cbiAqXG4gKiBGb3Igc2VjdXJpdHkgcmVhc29ucywgb25seSBsaXRlcmFsIHN0cmluZyB2YWx1ZXMgYW5kIG51bWJlciBtYXkgYmUgdXNlZCBpblxuICogZW1iZWRkZWQgZXhwcmVzc2lvbnMuIFRvIGluY29ycG9yYXRlIG5vbi1saXRlcmFsIHZhbHVlcyB7QGxpbmtjb2RlIHVuc2FmZUNTU31cbiAqIG1heSBiZSB1c2VkIGluc2lkZSBhbiBleHByZXNzaW9uLlxuICovXG5leHBvcnQgY29uc3QgY3NzID0gKFxuICBzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSxcbiAgLi4udmFsdWVzOiAoQ1NTUmVzdWx0R3JvdXAgfCBudW1iZXIpW11cbik6IENTU1Jlc3VsdCA9PiB7XG4gIGNvbnN0IGNzc1RleHQgPVxuICAgIHN0cmluZ3MubGVuZ3RoID09PSAxXG4gICAgICA/IHN0cmluZ3NbMF1cbiAgICAgIDogdmFsdWVzLnJlZHVjZShcbiAgICAgICAgICAoYWNjLCB2LCBpZHgpID0+IGFjYyArIHRleHRGcm9tQ1NTUmVzdWx0KHYpICsgc3RyaW5nc1tpZHggKyAxXSxcbiAgICAgICAgICBzdHJpbmdzWzBdXG4gICAgICAgICk7XG4gIHJldHVybiBuZXcgKENTU1Jlc3VsdCBhcyBDb25zdHJ1Y3RhYmxlQ1NTUmVzdWx0KShcbiAgICBjc3NUZXh0LFxuICAgIHN0cmluZ3MsXG4gICAgY29uc3RydWN0aW9uVG9rZW5cbiAgKTtcbn07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgZ2l2ZW4gc3R5bGVzIHRvIGEgYHNoYWRvd1Jvb3RgLiBXaGVuIFNoYWRvdyBET00gaXNcbiAqIGF2YWlsYWJsZSBidXQgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgbm90LCBzdHlsZXMgYXJlIGFwcGVuZGVkIHRvIHRoZVxuICogYHNoYWRvd1Jvb3RgIHRvIFttaW1pYyBzcGVjIGJlaGF2aW9yXShodHRwczovL3dpY2cuZ2l0aHViLmlvL2NvbnN0cnVjdC1zdHlsZXNoZWV0cy8jdXNpbmctY29uc3RydWN0ZWQtc3R5bGVzaGVldHMpLlxuICogTm90ZSwgd2hlbiBzaGltbWluZyBpcyB1c2VkLCBhbnkgc3R5bGVzIHRoYXQgYXJlIHN1YnNlcXVlbnRseSBwbGFjZWQgaW50b1xuICogdGhlIHNoYWRvd1Jvb3Qgc2hvdWxkIGJlIHBsYWNlZCAqYmVmb3JlKiBhbnkgc2hpbW1lZCBhZG9wdGVkIHN0eWxlcy4gVGhpc1xuICogd2lsbCBtYXRjaCBzcGVjIGJlaGF2aW9yIHRoYXQgZ2l2ZXMgYWRvcHRlZCBzaGVldHMgcHJlY2VkZW5jZSBvdmVyIHN0eWxlcyBpblxuICogc2hhZG93Um9vdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGFkb3B0U3R5bGVzID0gKFxuICByZW5kZXJSb290OiBTaGFkb3dSb290LFxuICBzdHlsZXM6IEFycmF5PENTU1Jlc3VsdE9yTmF0aXZlPlxuKSA9PiB7XG4gIGlmIChzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMpIHtcbiAgICAocmVuZGVyUm9vdCBhcyBTaGFkb3dSb290KS5hZG9wdGVkU3R5bGVTaGVldHMgPSBzdHlsZXMubWFwKChzKSA9PlxuICAgICAgcyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgPyBzIDogcy5zdHlsZVNoZWV0IVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGVzLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBjb25zdCBub25jZSA9IChnbG9iYWwgYXMgYW55KVsnbGl0Tm9uY2UnXTtcbiAgICAgIGlmIChub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gICAgICB9XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9IChzIGFzIENTU1Jlc3VsdCkuY3NzVGV4dDtcbiAgICAgIHJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5jb25zdCBjc3NSZXN1bHRGcm9tU3R5bGVTaGVldCA9IChzaGVldDogQ1NTU3R5bGVTaGVldCkgPT4ge1xuICBsZXQgY3NzVGV4dCA9ICcnO1xuICBmb3IgKGNvbnN0IHJ1bGUgb2Ygc2hlZXQuY3NzUnVsZXMpIHtcbiAgICBjc3NUZXh0ICs9IHJ1bGUuY3NzVGV4dDtcbiAgfVxuICByZXR1cm4gdW5zYWZlQ1NTKGNzc1RleHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbXBhdGlibGVTdHlsZSA9XG4gIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyB8fFxuICAoTk9ERV9NT0RFICYmIGdsb2JhbC5DU1NTdHlsZVNoZWV0ID09PSB1bmRlZmluZWQpXG4gICAgPyAoczogQ1NTUmVzdWx0T3JOYXRpdmUpID0+IHNcbiAgICA6IChzOiBDU1NSZXN1bHRPck5hdGl2ZSkgPT5cbiAgICAgICAgcyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgPyBjc3NSZXN1bHRGcm9tU3R5bGVTaGVldChzKSA6IHM7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVXNlIHRoaXMgbW9kdWxlIGlmIHlvdSB3YW50IHRvIGNyZWF0ZSB5b3VyIG93biBiYXNlIGNsYXNzIGV4dGVuZGluZ1xuICoge0BsaW5rIFJlYWN0aXZlRWxlbWVudH0uXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG5pbXBvcnQge1xuICBnZXRDb21wYXRpYmxlU3R5bGUsXG4gIGFkb3B0U3R5bGVzLFxuICBDU1NSZXN1bHRHcm91cCxcbiAgQ1NTUmVzdWx0T3JOYXRpdmUsXG59IGZyb20gJy4vY3NzLXRhZy5qcyc7XG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0aXZlQ29udHJvbGxlcixcbiAgUmVhY3RpdmVDb250cm9sbGVySG9zdCxcbn0gZnJvbSAnLi9yZWFjdGl2ZS1jb250cm9sbGVyLmpzJztcblxuLy8gSW4gdGhlIE5vZGUgYnVpbGQsIHRoaXMgaW1wb3J0IHdpbGwgYmUgaW5qZWN0ZWQgYnkgUm9sbHVwOlxuLy8gaW1wb3J0IHtIVE1MRWxlbWVudCwgY3VzdG9tRWxlbWVudHN9IGZyb20gJ0BsaXQtbGFicy9zc3ItZG9tLXNoaW0nO1xuXG5leHBvcnQgKiBmcm9tICcuL2Nzcy10YWcuanMnO1xuZXhwb3J0IHR5cGUge1xuICBSZWFjdGl2ZUNvbnRyb2xsZXIsXG4gIFJlYWN0aXZlQ29udHJvbGxlckhvc3QsXG59IGZyb20gJy4vcmVhY3RpdmUtY29udHJvbGxlci5qcyc7XG5cbmNvbnN0IE5PREVfTU9ERSA9IGZhbHNlO1xuY29uc3QgZ2xvYmFsID0gTk9ERV9NT0RFID8gZ2xvYmFsVGhpcyA6IHdpbmRvdztcblxuaWYgKE5PREVfTU9ERSkge1xuICBnbG9iYWwuY3VzdG9tRWxlbWVudHMgPz89IGN1c3RvbUVsZW1lbnRzO1xufVxuXG5jb25zdCBERVZfTU9ERSA9IHRydWU7XG5cbmxldCByZXF1ZXN0VXBkYXRlVGhlbmFibGU6IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgdGhlbjogKFxuICAgIG9uZnVsZmlsbGVkPzogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkLFxuICAgIF9vbnJlamVjdGVkPzogKCkgPT4gdm9pZFxuICApID0+IHZvaWQ7XG59O1xuXG5sZXQgaXNzdWVXYXJuaW5nOiAoY29kZTogc3RyaW5nLCB3YXJuaW5nOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmNvbnN0IHRydXN0ZWRUeXBlcyA9IChnbG9iYWwgYXMgdW5rbm93biBhcyB7dHJ1c3RlZFR5cGVzPzoge2VtcHR5U2NyaXB0OiAnJ319KVxuICAudHJ1c3RlZFR5cGVzO1xuXG4vLyBUZW1wb3Jhcnkgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9jcmJ1Zy5jb20vOTkzMjY4XG4vLyBDdXJyZW50bHksIGFueSBhdHRyaWJ1dGUgc3RhcnRpbmcgd2l0aCBcIm9uXCIgaXMgY29uc2lkZXJlZCB0byBiZSBhXG4vLyBUcnVzdGVkU2NyaXB0IHNvdXJjZS4gU3VjaCBib29sZWFuIGF0dHJpYnV0ZXMgbXVzdCBiZSBzZXQgdG8gdGhlIGVxdWl2YWxlbnRcbi8vIHRydXN0ZWQgZW1wdHlTY3JpcHQgdmFsdWUuXG5jb25zdCBlbXB0eVN0cmluZ0ZvckJvb2xlYW5BdHRyaWJ1dGUgPSB0cnVzdGVkVHlwZXNcbiAgPyAodHJ1c3RlZFR5cGVzLmVtcHR5U2NyaXB0IGFzIHVua25vd24gYXMgJycpXG4gIDogJyc7XG5cbmNvbnN0IHBvbHlmaWxsU3VwcG9ydCA9IERFVl9NT0RFXG4gID8gZ2xvYmFsLnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydERldk1vZGVcbiAgOiBnbG9iYWwucmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0O1xuXG5pZiAoREVWX01PREUpIHtcbiAgLy8gRW5zdXJlIHdhcm5pbmdzIGFyZSBpc3N1ZWQgb25seSAxeCwgZXZlbiBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBMaXRcbiAgLy8gYXJlIGxvYWRlZC5cbiAgY29uc3QgaXNzdWVkV2FybmluZ3M6IFNldDxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gKGdsb2JhbC5saXRJc3N1ZWRXYXJuaW5ncyA/Pz1cbiAgICBuZXcgU2V0KCkpO1xuXG4gIC8vIElzc3VlIGEgd2FybmluZywgaWYgd2UgaGF2ZW4ndCBhbHJlYWR5LlxuICBpc3N1ZVdhcm5pbmcgPSAoY29kZTogc3RyaW5nLCB3YXJuaW5nOiBzdHJpbmcpID0+IHtcbiAgICB3YXJuaW5nICs9IGAgU2VlIGh0dHBzOi8vbGl0LmRldi9tc2cvJHtjb2RlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gO1xuICAgIGlmICghaXNzdWVkV2FybmluZ3MuaGFzKHdhcm5pbmcpKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICBpc3N1ZWRXYXJuaW5ncy5hZGQod2FybmluZyk7XG4gICAgfVxuICB9O1xuXG4gIGlzc3VlV2FybmluZyhcbiAgICAnZGV2LW1vZGUnLFxuICAgIGBMaXQgaXMgaW4gZGV2IG1vZGUuIE5vdCByZWNvbW1lbmRlZCBmb3IgcHJvZHVjdGlvbiFgXG4gICk7XG5cbiAgLy8gSXNzdWUgcG9seWZpbGwgc3VwcG9ydCB3YXJuaW5nLlxuICBpZiAoZ2xvYmFsLlNoYWR5RE9NPy5pblVzZSAmJiBwb2x5ZmlsbFN1cHBvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIGlzc3VlV2FybmluZyhcbiAgICAgICdwb2x5ZmlsbC1zdXBwb3J0LW1pc3NpbmcnLFxuICAgICAgYFNoYWRvdyBET00gaXMgYmVpbmcgcG9seWZpbGxlZCB2aWEgXFxgU2hhZHlET01cXGAgYnV0IGAgK1xuICAgICAgICBgdGhlIFxcYHBvbHlmaWxsLXN1cHBvcnRcXGAgbW9kdWxlIGhhcyBub3QgYmVlbiBsb2FkZWQuYFxuICAgICk7XG4gIH1cblxuICByZXF1ZXN0VXBkYXRlVGhlbmFibGUgPSAobmFtZSkgPT4gKHtcbiAgICB0aGVuOiAoXG4gICAgICBvbmZ1bGZpbGxlZD86ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCxcbiAgICAgIF9vbnJlamVjdGVkPzogKCkgPT4gdm9pZFxuICAgICkgPT4ge1xuICAgICAgaXNzdWVXYXJuaW5nKFxuICAgICAgICAncmVxdWVzdC11cGRhdGUtcHJvbWlzZScsXG4gICAgICAgIGBUaGUgXFxgcmVxdWVzdFVwZGF0ZVxcYCBtZXRob2Qgc2hvdWxkIG5vIGxvbmdlciByZXR1cm4gYSBQcm9taXNlIGJ1dCBgICtcbiAgICAgICAgICBgZG9lcyBzbyBvbiBcXGAke25hbWV9XFxgLiBVc2UgXFxgdXBkYXRlQ29tcGxldGVcXGAgaW5zdGVhZC5gXG4gICAgICApO1xuICAgICAgaWYgKG9uZnVsZmlsbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb25mdWxmaWxsZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnRhaW5zIHR5cGVzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIHVuc3RhYmxlIGRlYnVnIEFQSS5cbiAqXG4gKiBFdmVyeXRoaW5nIGluIHRoaXMgQVBJIGlzIG5vdCBzdGFibGUgYW5kIG1heSBjaGFuZ2Ugb3IgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLFxuICogZXZlbiBvbiBwYXRjaCByZWxlYXNlcy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgUmVhY3RpdmVVbnN0YWJsZSB7XG4gIC8qKlxuICAgKiBXaGVuIExpdCBpcyBydW5uaW5nIGluIGRldiBtb2RlIGFuZCBgd2luZG93LmVtaXRMaXREZWJ1Z0xvZ0V2ZW50c2AgaXMgdHJ1ZSxcbiAgICogd2Ugd2lsbCBlbWl0ICdsaXQtZGVidWcnIGV2ZW50cyB0byB3aW5kb3csIHdpdGggbGl2ZSBkZXRhaWxzIGFib3V0IHRoZSB1cGRhdGUgYW5kIHJlbmRlclxuICAgKiBsaWZlY3ljbGUuIFRoZXNlIGNhbiBiZSB1c2VmdWwgZm9yIHdyaXRpbmcgZGVidWcgdG9vbGluZyBhbmQgdmlzdWFsaXphdGlvbnMuXG4gICAqXG4gICAqIFBsZWFzZSBiZSBhd2FyZSB0aGF0IHJ1bm5pbmcgd2l0aCB3aW5kb3cuZW1pdExpdERlYnVnTG9nRXZlbnRzIGhhcyBwZXJmb3JtYW5jZSBvdmVyaGVhZCxcbiAgICogbWFraW5nIGNlcnRhaW4gb3BlcmF0aW9ucyB0aGF0IGFyZSBub3JtYWxseSB2ZXJ5IGNoZWFwIChsaWtlIGEgbm8tb3AgcmVuZGVyKSBtdWNoIHNsb3dlcixcbiAgICogYmVjYXVzZSB3ZSBtdXN0IGNvcHkgZGF0YSBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbiAgZXhwb3J0IG5hbWVzcGFjZSBEZWJ1Z0xvZyB7XG4gICAgZXhwb3J0IHR5cGUgRW50cnkgPSBVcGRhdGU7XG4gICAgZXhwb3J0IGludGVyZmFjZSBVcGRhdGUge1xuICAgICAga2luZDogJ3VwZGF0ZSc7XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBEZWJ1Z0xvZ2dpbmdXaW5kb3cge1xuICAvLyBFdmVuIGluIGRldiBtb2RlLCB3ZSBnZW5lcmFsbHkgZG9uJ3Qgd2FudCB0byBlbWl0IHRoZXNlIGV2ZW50cywgYXMgdGhhdCdzXG4gIC8vIGFub3RoZXIgbGV2ZWwgb2YgY29zdCwgc28gb25seSBlbWl0IHRoZW0gd2hlbiBERVZfTU9ERSBpcyB0cnVlIF9hbmRfIHdoZW5cbiAgLy8gd2luZG93LmVtaXRMaXREZWJ1Z0V2ZW50cyBpcyB0cnVlLlxuICBlbWl0TGl0RGVidWdMb2dFdmVudHM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFVzZWZ1bCBmb3IgdmlzdWFsaXppbmcgYW5kIGxvZ2dpbmcgaW5zaWdodHMgaW50byB3aGF0IHRoZSBMaXQgdGVtcGxhdGUgc3lzdGVtIGlzIGRvaW5nLlxuICpcbiAqIENvbXBpbGVkIG91dCBvZiBwcm9kIG1vZGUgYnVpbGRzLlxuICovXG5jb25zdCBkZWJ1Z0xvZ0V2ZW50ID0gREVWX01PREVcbiAgPyAoZXZlbnQ6IFJlYWN0aXZlVW5zdGFibGUuRGVidWdMb2cuRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IHNob3VsZEVtaXQgPSAoZ2xvYmFsIGFzIHVua25vd24gYXMgRGVidWdMb2dnaW5nV2luZG93KVxuICAgICAgICAuZW1pdExpdERlYnVnTG9nRXZlbnRzO1xuICAgICAgaWYgKCFzaG91bGRFbWl0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQ8UmVhY3RpdmVVbnN0YWJsZS5EZWJ1Z0xvZy5FbnRyeT4oJ2xpdC1kZWJ1ZycsIHtcbiAgICAgICAgICBkZXRhaWw6IGV2ZW50LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIDogdW5kZWZpbmVkO1xuXG4vKlxuICogV2hlbiB1c2luZyBDbG9zdXJlIENvbXBpbGVyLCBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KHByb3BlcnR5LCBvYmplY3QpIGlzXG4gKiByZXBsYWNlZCBhdCBjb21waWxlIHRpbWUgYnkgdGhlIG11bmdlZCBuYW1lIGZvciBvYmplY3RbcHJvcGVydHldLiBXZSBjYW5ub3RcbiAqIGFsaWFzIHRoaXMgZnVuY3Rpb24sIHNvIHdlIGhhdmUgdG8gdXNlIGEgc21hbGwgc2hpbSB0aGF0IGhhcyB0aGUgc2FtZVxuICogYmVoYXZpb3Igd2hlbiBub3QgY29tcGlsaW5nLlxuICovXG4vKkBfX0lOTElORV9fKi9cbmNvbnN0IEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkgPSA8UCBleHRlbmRzIFByb3BlcnR5S2V5PihcbiAgcHJvcDogUCxcbiAgX29iajogdW5rbm93blxuKTogUCA9PiBwcm9wO1xuXG4vKipcbiAqIENvbnZlcnRzIHByb3BlcnR5IHZhbHVlcyB0byBhbmQgZnJvbSBhdHRyaWJ1dGUgdmFsdWVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXhBdHRyaWJ1dGVDb252ZXJ0ZXI8VHlwZSA9IHVua25vd24sIFR5cGVIaW50ID0gdW5rbm93bj4ge1xuICAvKipcbiAgICogQ2FsbGVkIHRvIGNvbnZlcnQgYW4gYXR0cmlidXRlIHZhbHVlIHRvIGEgcHJvcGVydHlcbiAgICogdmFsdWUuXG4gICAqL1xuICBmcm9tQXR0cmlidXRlPyh2YWx1ZTogc3RyaW5nIHwgbnVsbCwgdHlwZT86IFR5cGVIaW50KTogVHlwZTtcblxuICAvKipcbiAgICogQ2FsbGVkIHRvIGNvbnZlcnQgYSBwcm9wZXJ0eSB2YWx1ZSB0byBhbiBhdHRyaWJ1dGVcbiAgICogdmFsdWUuXG4gICAqXG4gICAqIEl0IHJldHVybnMgdW5rbm93biBpbnN0ZWFkIG9mIHN0cmluZywgdG8gYmUgY29tcGF0aWJsZSB3aXRoXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL3RydXN0ZWQtdHlwZXMgKGFuZCBzaW1pbGFyIGVmZm9ydHMpLlxuICAgKi9cbiAgdG9BdHRyaWJ1dGU/KHZhbHVlOiBUeXBlLCB0eXBlPzogVHlwZUhpbnQpOiB1bmtub3duO1xufVxuXG50eXBlIEF0dHJpYnV0ZUNvbnZlcnRlcjxUeXBlID0gdW5rbm93biwgVHlwZUhpbnQgPSB1bmtub3duPiA9XG4gIHwgQ29tcGxleEF0dHJpYnV0ZUNvbnZlcnRlcjxUeXBlPlxuICB8ICgodmFsdWU6IHN0cmluZyB8IG51bGwsIHR5cGU/OiBUeXBlSGludCkgPT4gVHlwZSk7XG5cbi8qKlxuICogRGVmaW5lcyBvcHRpb25zIGZvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5RGVjbGFyYXRpb248VHlwZSA9IHVua25vd24sIFR5cGVIaW50ID0gdW5rbm93bj4ge1xuICAvKipcbiAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBpbmRpY2F0ZXMgdGhlIHByb3BlcnR5IGlzIGludGVybmFsIHByaXZhdGUgc3RhdGUuIFRoZVxuICAgKiBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIHNldCBieSB1c2Vycy4gV2hlbiB1c2luZyBUeXBlU2NyaXB0LCB0aGlzIHByb3BlcnR5XG4gICAqIHNob3VsZCBiZSBtYXJrZWQgYXMgYHByaXZhdGVgIG9yIGBwcm90ZWN0ZWRgLCBhbmQgaXQgaXMgYWxzbyBhIGNvbW1vblxuICAgKiBwcmFjdGljZSB0byB1c2UgYSBsZWFkaW5nIGBfYCBpbiB0aGUgbmFtZS4gVGhlIHByb3BlcnR5IGlzIG5vdCBhZGRlZCB0b1xuICAgKiBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYC5cbiAgICovXG4gIHJlYWRvbmx5IHN0YXRlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGhvdyBhbmQgd2hldGhlciB0aGUgcHJvcGVydHkgYmVjb21lcyBhbiBvYnNlcnZlZCBhdHRyaWJ1dGUuXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBgZmFsc2VgLCB0aGUgcHJvcGVydHkgaXMgbm90IGFkZGVkIHRvIGBvYnNlcnZlZEF0dHJpYnV0ZXNgLlxuICAgKiBJZiB0cnVlIG9yIGFic2VudCwgdGhlIGxvd2VyY2FzZWQgcHJvcGVydHkgbmFtZSBpcyBvYnNlcnZlZCAoZS5nLiBgZm9vQmFyYFxuICAgKiBiZWNvbWVzIGBmb29iYXJgKS4gSWYgYSBzdHJpbmcsIHRoZSBzdHJpbmcgdmFsdWUgaXMgb2JzZXJ2ZWQgKGUuZ1xuICAgKiBgYXR0cmlidXRlOiAnZm9vLWJhcidgKS5cbiAgICovXG4gIHJlYWRvbmx5IGF0dHJpYnV0ZT86IGJvb2xlYW4gfCBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGUgdHlwZSBvZiB0aGUgcHJvcGVydHkuIFRoaXMgaXMgdXNlZCBvbmx5IGFzIGEgaGludCBmb3IgdGhlXG4gICAqIGBjb252ZXJ0ZXJgIHRvIGRldGVybWluZSBob3cgdG8gY29udmVydCB0aGUgYXR0cmlidXRlXG4gICAqIHRvL2Zyb20gYSBwcm9wZXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU/OiBUeXBlSGludDtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGhvdyB0byBjb252ZXJ0IHRoZSBhdHRyaWJ1dGUgdG8vZnJvbSBhIHByb3BlcnR5LiBJZiB0aGlzIHZhbHVlXG4gICAqIGlzIGEgZnVuY3Rpb24sIGl0IGlzIHVzZWQgdG8gY29udmVydCB0aGUgYXR0cmlidXRlIHZhbHVlIGEgdGhlIHByb3BlcnR5XG4gICAqIHZhbHVlLiBJZiBpdCdzIGFuIG9iamVjdCwgaXQgY2FuIGhhdmUga2V5cyBmb3IgYGZyb21BdHRyaWJ1dGVgIGFuZFxuICAgKiBgdG9BdHRyaWJ1dGVgLiBJZiBubyBgdG9BdHRyaWJ1dGVgIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGFuZFxuICAgKiBgcmVmbGVjdGAgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHNldCBkaXJlY3RseSB0byB0aGVcbiAgICogYXR0cmlidXRlLiBBIGRlZmF1bHQgYGNvbnZlcnRlcmAgaXMgdXNlZCBpZiBub25lIGlzIHByb3ZpZGVkOyBpdCBzdXBwb3J0c1xuICAgKiBgQm9vbGVhbmAsIGBTdHJpbmdgLCBgTnVtYmVyYCwgYE9iamVjdGAsIGFuZCBgQXJyYXlgLiBOb3RlLFxuICAgKiB3aGVuIGEgcHJvcGVydHkgY2hhbmdlcyBhbmQgdGhlIGNvbnZlcnRlciBpcyB1c2VkIHRvIHVwZGF0ZSB0aGUgYXR0cmlidXRlLFxuICAgKiB0aGUgcHJvcGVydHkgaXMgbmV2ZXIgdXBkYXRlZCBhZ2FpbiBhcyBhIHJlc3VsdCBvZiB0aGUgYXR0cmlidXRlIGNoYW5naW5nLFxuICAgKiBhbmQgdmljZSB2ZXJzYS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnZlcnRlcj86IEF0dHJpYnV0ZUNvbnZlcnRlcjxUeXBlLCBUeXBlSGludD47XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIHJlZmxlY3QgdG8gYW4gYXR0cmlidXRlLlxuICAgKiBJZiBgdHJ1ZWAsIHdoZW4gdGhlIHByb3BlcnR5IGlzIHNldCwgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgdXNpbmcgdGhlXG4gICAqIGF0dHJpYnV0ZSBuYW1lIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBmb3IgdGhlIGBhdHRyaWJ1dGVgXG4gICAqIHByb3BlcnR5IG9wdGlvbiBhbmQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBjb252ZXJ0ZWQgdXNpbmcgdGhlIHJ1bGVzXG4gICAqIGZyb20gdGhlIGBjb252ZXJ0ZXJgIHByb3BlcnR5IG9wdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IHJlZmxlY3Q/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIGlmIGEgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgY2hhbmdlZCB3aGVuXG4gICAqIGl0IGlzIHNldC4gVGhlIGZ1bmN0aW9uIHNob3VsZCB0YWtlIHRoZSBgbmV3VmFsdWVgIGFuZCBgb2xkVmFsdWVgIGFuZFxuICAgKiByZXR1cm4gYHRydWVgIGlmIGFuIHVwZGF0ZSBzaG91bGQgYmUgcmVxdWVzdGVkLlxuICAgKi9cbiAgaGFzQ2hhbmdlZD8odmFsdWU6IFR5cGUsIG9sZFZhbHVlOiBUeXBlKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgYW4gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkIGZvciB0aGlzIHByb3BlcnR5LiBCeVxuICAgKiBkZWZhdWx0LCBhbiBhY2Nlc3NvciB3aWxsIGJlIGdlbmVyYXRlZCBmb3IgdGhpcyBwcm9wZXJ0eSB0aGF0IHJlcXVlc3RzIGFuXG4gICAqIHVwZGF0ZSB3aGVuIHNldC4gSWYgdGhpcyBmbGFnIGlzIGB0cnVlYCwgbm8gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkLCBhbmRcbiAgICogaXQgd2lsbCBiZSB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGNhbGxcbiAgICogYHRoaXMucmVxdWVzdFVwZGF0ZShwcm9wZXJ0eU5hbWUsIG9sZFZhbHVlKWAgdG8gcmVxdWVzdCBhbiB1cGRhdGUgd2hlblxuICAgKiB0aGUgcHJvcGVydHkgY2hhbmdlcy5cbiAgICovXG4gIHJlYWRvbmx5IG5vQWNjZXNzb3I/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1hcCBvZiBwcm9wZXJ0aWVzIHRvIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy4gRm9yIGVhY2ggcHJvcGVydHkgYW5cbiAqIGFjY2Vzc29yIGlzIG1hZGUsIGFuZCB0aGUgcHJvcGVydHkgaXMgcHJvY2Vzc2VkIGFjY29yZGluZyB0byB0aGVcbiAqIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eURlY2xhcmF0aW9ucyB7XG4gIHJlYWRvbmx5IFtrZXk6IHN0cmluZ106IFByb3BlcnR5RGVjbGFyYXRpb247XG59XG5cbnR5cGUgUHJvcGVydHlEZWNsYXJhdGlvbk1hcCA9IE1hcDxQcm9wZXJ0eUtleSwgUHJvcGVydHlEZWNsYXJhdGlvbj47XG5cbnR5cGUgQXR0cmlidXRlTWFwID0gTWFwPHN0cmluZywgUHJvcGVydHlLZXk+O1xuXG4vKipcbiAqIEEgTWFwIG9mIHByb3BlcnR5IGtleXMgdG8gdmFsdWVzLlxuICpcbiAqIFRha2VzIGFuIG9wdGlvbmFsIHR5cGUgcGFyYW1ldGVyIFQsIHdoaWNoIHdoZW4gc3BlY2lmaWVkIGFzIGEgbm9uLWFueSxcbiAqIG5vbi11bmtub3duIHR5cGUsIHdpbGwgbWFrZSB0aGUgTWFwIG1vcmUgc3Ryb25nbHktdHlwZWQsIGFzc29jaWF0aW5nIHRoZSBtYXBcbiAqIGtleXMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIHZhbHVlIHR5cGUgb24gVC5cbiAqXG4gKiBVc2UgYFByb3BlcnR5VmFsdWVzPHRoaXM+YCB3aGVuIG92ZXJyaWRpbmcgUmVhY3RpdmVFbGVtZW50LnVwZGF0ZSgpIGFuZFxuICogb3RoZXIgbGlmZWN5Y2xlIG1ldGhvZHMgaW4gb3JkZXIgdG8gZ2V0IHN0cm9uZ2VyIHR5cGUtY2hlY2tpbmcgb24ga2V5c1xuICogYW5kIHZhbHVlcy5cbiAqL1xuLy8gVGhpcyB0eXBlIGlzIGNvbmRpdGlvbmFsIHNvIHRoYXQgaWYgdGhlIHBhcmFtZXRlciBUIGlzIG5vdCBzcGVjaWZpZWQsIG9yXG4vLyBpcyBgYW55YCwgdGhlIHR5cGUgd2lsbCBpbmNsdWRlIGBNYXA8UHJvcGVydHlLZXksIHVua25vd24+YC4gU2luY2UgVCBpcyBub3Rcbi8vIGdpdmVuIGluIHRoZSB1c2VzIG9mIFByb3BlcnR5VmFsdWVzIGluIHRoaXMgZmlsZSwgYWxsIHVzZXMgaGVyZSBmYWxsYmFjayB0b1xuLy8gbWVhbmluZyBgTWFwPFByb3BlcnR5S2V5LCB1bmtub3duPmAsIGJ1dCBpZiBhIGRldmVsb3BlciB1c2VzXG4vLyBgUHJvcGVydHlWYWx1ZXM8dGhpcz5gIChvciBhbnkgb3RoZXIgdmFsdWUgZm9yIFQpIHRoZXkgd2lsbCBnZXQgYVxuLy8gc3Ryb25nbHktdHlwZWQgTWFwIHR5cGUuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IHR5cGUgUHJvcGVydHlWYWx1ZXM8VCA9IGFueT4gPSBUIGV4dGVuZHMgb2JqZWN0XG4gID8gUHJvcGVydHlWYWx1ZU1hcDxUPlxuICA6IE1hcDxQcm9wZXJ0eUtleSwgdW5rbm93bj47XG5cbi8qKlxuICogRG8gbm90IHVzZSwgaW5zdGVhZCBwcmVmZXIge0BsaW5rY29kZSBQcm9wZXJ0eVZhbHVlc30uXG4gKi9cbi8vIFRoaXMgdHlwZSBtdXN0IGJlIGV4cG9ydGVkIHN1Y2ggdGhhdCBKYXZhU2NyaXB0IGdlbmVyYXRlZCBieSB0aGUgR29vZ2xlXG4vLyBDbG9zdXJlIENvbXBpbGVyIGNhbiBpbXBvcnQgYSB0eXBlIHJlZmVyZW5jZS5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlWYWx1ZU1hcDxUPiBleHRlbmRzIE1hcDxQcm9wZXJ0eUtleSwgdW5rbm93bj4ge1xuICBnZXQ8SyBleHRlbmRzIGtleW9mIFQ+KGs6IEspOiBUW0tdO1xuICBzZXQ8SyBleHRlbmRzIGtleW9mIFQ+KGtleTogSywgdmFsdWU6IFRbS10pOiB0aGlzO1xuICBoYXM8SyBleHRlbmRzIGtleW9mIFQ+KGs6IEspOiBib29sZWFuO1xuICBkZWxldGU8SyBleHRlbmRzIGtleW9mIFQ+KGs6IEspOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbnZlcnRlcjogQ29tcGxleEF0dHJpYnV0ZUNvbnZlcnRlciA9IHtcbiAgdG9BdHRyaWJ1dGUodmFsdWU6IHVua25vd24sIHR5cGU/OiB1bmtub3duKTogdW5rbm93biB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPyBlbXB0eVN0cmluZ0ZvckJvb2xlYW5BdHRyaWJ1dGUgOiBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgLy8gaWYgdGhlIHZhbHVlIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCBwYXNzIHRoaXMgdGhyb3VnaFxuICAgICAgICAvLyB0byBhbGxvdyByZW1vdmluZy9ubyBjaGFuZ2UgYmVoYXZpb3IuXG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIGZyb21BdHRyaWJ1dGUodmFsdWU6IHN0cmluZyB8IG51bGwsIHR5cGU/OiB1bmtub3duKSB7XG4gICAgbGV0IGZyb21WYWx1ZTogdW5rbm93biA9IHZhbHVlO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICBmcm9tVmFsdWUgPSB2YWx1ZSAhPT0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgZnJvbVZhbHVlID0gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIC8vIERvICpub3QqIGdlbmVyYXRlIGV4Y2VwdGlvbiB3aGVuIGludmFsaWQgSlNPTiBpcyBzZXQgYXMgZWxlbWVudHNcbiAgICAgICAgLy8gZG9uJ3Qgbm9ybWFsbHkgY29tcGxhaW4gb24gYmVpbmcgbWlzLWNvbmZpZ3VyZWQuXG4gICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IERvIGdlbmVyYXRlIGV4Y2VwdGlvbiBpbiAqZGV2IG1vZGUqLlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEFzc2VydCB0byBhZGhlcmUgdG8gQmF6ZWwncyBcIm11c3QgdHlwZSBhc3NlcnQgSlNPTiBwYXJzZVwiIHJ1bGUuXG4gICAgICAgICAgZnJvbVZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSEpIGFzIHVua25vd247XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBmcm9tVmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbVZhbHVlO1xuICB9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBIYXNDaGFuZ2VkIHtcbiAgKHZhbHVlOiB1bmtub3duLCBvbGQ6IHVua25vd24pOiBib29sZWFuO1xufVxuXG4vKipcbiAqIENoYW5nZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGRpZmZlcmVudCBmcm9tIGBvbGRWYWx1ZWAuXG4gKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGFzIHRoZSBkZWZhdWx0IGZvciBhIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgY29uc3Qgbm90RXF1YWw6IEhhc0NoYW5nZWQgPSAodmFsdWU6IHVua25vd24sIG9sZDogdW5rbm93bik6IGJvb2xlYW4gPT4ge1xuICAvLyBUaGlzIGVuc3VyZXMgKG9sZD09TmFOLCB2YWx1ZT09TmFOKSBhbHdheXMgcmV0dXJucyBmYWxzZVxuICByZXR1cm4gb2xkICE9PSB2YWx1ZSAmJiAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKTtcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uOiBQcm9wZXJ0eURlY2xhcmF0aW9uID0ge1xuICBhdHRyaWJ1dGU6IHRydWUsXG4gIHR5cGU6IFN0cmluZyxcbiAgY29udmVydGVyOiBkZWZhdWx0Q29udmVydGVyLFxuICByZWZsZWN0OiBmYWxzZSxcbiAgaGFzQ2hhbmdlZDogbm90RXF1YWwsXG59O1xuXG4vKipcbiAqIFRoZSBDbG9zdXJlIEpTIENvbXBpbGVyIGRvZXNuJ3QgY3VycmVudGx5IGhhdmUgZ29vZCBzdXBwb3J0IGZvciBzdGF0aWNcbiAqIHByb3BlcnR5IHNlbWFudGljcyB3aGVyZSBcInRoaXNcIiBpcyBkeW5hbWljIChlLmcuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMxNzcgYW5kIG90aGVycykgc28gd2UgdXNlXG4gKiB0aGlzIGhhY2sgdG8gYnlwYXNzIGFueSByZXdyaXRpbmcgYnkgdGhlIGNvbXBpbGVyLlxuICovXG5jb25zdCBmaW5hbGl6ZWQgPSAnZmluYWxpemVkJztcblxuLyoqXG4gKiBBIHN0cmluZyByZXByZXNlbnRpbmcgb25lIG9mIHRoZSBzdXBwb3J0ZWQgZGV2IG1vZGUgd2FybmluZyBjYXRlZ29yaWVzLlxuICovXG5leHBvcnQgdHlwZSBXYXJuaW5nS2luZCA9ICdjaGFuZ2UtaW4tdXBkYXRlJyB8ICdtaWdyYXRpb24nO1xuXG5leHBvcnQgdHlwZSBJbml0aWFsaXplciA9IChlbGVtZW50OiBSZWFjdGl2ZUVsZW1lbnQpID0+IHZvaWQ7XG5cbi8qKlxuICogQmFzZSBlbGVtZW50IGNsYXNzIHdoaWNoIG1hbmFnZXMgZWxlbWVudCBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzLiBXaGVuXG4gKiBwcm9wZXJ0aWVzIGNoYW5nZSwgdGhlIGB1cGRhdGVgIG1ldGhvZCBpcyBhc3luY2hyb25vdXNseSBjYWxsZWQuIFRoaXMgbWV0aG9kXG4gKiBzaG91bGQgYmUgc3VwcGxpZWQgYnkgc3ViY2xhc3NlcnMgdG8gcmVuZGVyIHVwZGF0ZXMgYXMgZGVzaXJlZC5cbiAqIEBub0luaGVyaXREb2NcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWN0aXZlRWxlbWVudFxuICAvLyBJbiB0aGUgTm9kZSBidWlsZCwgdGhpcyBgZXh0ZW5kc2AgY2xhdXNlIHdpbGwgYmUgc3Vic3RpdHV0ZWQgd2l0aFxuICAvLyBgKGdsb2JhbFRoaXMuSFRNTEVsZW1lbnQgPz8gSFRNTEVsZW1lbnQpYC5cbiAgLy9cbiAgLy8gVGhpcyB3YXksIHdlIHdpbGwgZmlyc3QgcHJlZmVyIGFueSBnbG9iYWwgYEhUTUxFbGVtZW50YCBwb2x5ZmlsbCB0aGF0IHRoZVxuICAvLyB1c2VyIGhhcyBhc3NpZ25lZCwgYW5kIHRoZW4gZmFsbCBiYWNrIHRvIHRoZSBgSFRNTEVsZW1lbnRgIHNoaW0gd2hpY2ggaGFzXG4gIC8vIGJlZW4gaW1wb3J0ZWQgKHNlZSBub3RlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlIGFib3V0IGhvdyB0aGlzIGltcG9ydCBpc1xuICAvLyBnZW5lcmF0ZWQgYnkgUm9sbHVwKS4gTm90ZSB0aGF0IHRoZSBgSFRNTEVsZW1lbnRgIHZhcmlhYmxlIGhhcyBiZWVuXG4gIC8vIHNoYWRvd2VkIGJ5IHRoaXMgaW1wb3J0LCBzbyBpdCBubyBsb25nZXIgcmVmZXJzIHRvIHRoZSBnbG9iYWwuXG4gIGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAgaW1wbGVtZW50cyBSZWFjdGl2ZUNvbnRyb2xsZXJIb3N0XG57XG4gIC8vIE5vdGU6IHRoZXNlIGFyZSBwYXRjaGVkIGluIG9ubHkgaW4gREVWX01PREUuXG4gIC8qKlxuICAgKiBSZWFkIG9yIHNldCBhbGwgdGhlIGVuYWJsZWQgd2FybmluZyBjYXRlZ29yaWVzIGZvciB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgdXNlZCBpbiBkZXZlbG9wbWVudCBidWlsZHMuXG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBkZXYtbW9kZVxuICAgKi9cbiAgc3RhdGljIGVuYWJsZWRXYXJuaW5ncz86IFdhcm5pbmdLaW5kW107XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgZ2l2ZW4gd2FybmluZyBjYXRlZ29yeSBmb3IgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgb25seSBleGlzdHMgaW4gZGV2ZWxvcG1lbnQgYnVpbGRzLCBzbyBpdCBzaG91bGQgYmUgYWNjZXNzZWRcbiAgICogd2l0aCBhIGd1YXJkIGxpa2U6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIC8vIEVuYWJsZSBmb3IgYWxsIFJlYWN0aXZlRWxlbWVudCBzdWJjbGFzc2VzXG4gICAqIFJlYWN0aXZlRWxlbWVudC5lbmFibGVXYXJuaW5nPy4oJ21pZ3JhdGlvbicpO1xuICAgKlxuICAgKiAvLyBFbmFibGUgZm9yIG9ubHkgTXlFbGVtZW50IGFuZCBzdWJjbGFzc2VzXG4gICAqIE15RWxlbWVudC5lbmFibGVXYXJuaW5nPy4oJ21pZ3JhdGlvbicpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG5vY29sbGFwc2VcbiAgICogQGNhdGVnb3J5IGRldi1tb2RlXG4gICAqL1xuICBzdGF0aWMgZW5hYmxlV2FybmluZz86ICh3YXJuaW5nS2luZDogV2FybmluZ0tpbmQpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGdpdmVuIHdhcm5pbmcgY2F0ZWdvcnkgZm9yIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIG9ubHkgZXhpc3RzIGluIGRldmVsb3BtZW50IGJ1aWxkcywgc28gaXQgc2hvdWxkIGJlIGFjY2Vzc2VkXG4gICAqIHdpdGggYSBndWFyZCBsaWtlOlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiAvLyBEaXNhYmxlIGZvciBhbGwgUmVhY3RpdmVFbGVtZW50IHN1YmNsYXNzZXNcbiAgICogUmVhY3RpdmVFbGVtZW50LmRpc2FibGVXYXJuaW5nPy4oJ21pZ3JhdGlvbicpO1xuICAgKlxuICAgKiAvLyBEaXNhYmxlIGZvciBvbmx5IE15RWxlbWVudCBhbmQgc3ViY2xhc3Nlc1xuICAgKiBNeUVsZW1lbnQuZGlzYWJsZVdhcm5pbmc/LignbWlncmF0aW9uJyk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKiBAY2F0ZWdvcnkgZGV2LW1vZGVcbiAgICovXG4gIHN0YXRpYyBkaXNhYmxlV2FybmluZz86ICh3YXJuaW5nS2luZDogV2FybmluZ0tpbmQpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gaW5pdGlhbGl6ZXIgZnVuY3Rpb24gdG8gdGhlIGNsYXNzIHRoYXQgaXMgY2FsbGVkIGR1cmluZyBpbnN0YW5jZVxuICAgKiBjb25zdHJ1Y3Rpb24uXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb2RlIHRoYXQgcnVucyBhZ2FpbnN0IGEgYFJlYWN0aXZlRWxlbWVudGBcbiAgICogc3ViY2xhc3MsIHN1Y2ggYXMgYSBkZWNvcmF0b3IsIHRoYXQgbmVlZHMgdG8gZG8gd29yayBmb3IgZWFjaFxuICAgKiBpbnN0YW5jZSwgc3VjaCBhcyBzZXR0aW5nIHVwIGEgYFJlYWN0aXZlQ29udHJvbGxlcmAuXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IG15RGVjb3JhdG9yID0gKHRhcmdldDogdHlwZW9mIFJlYWN0aXZlRWxlbWVudCwga2V5OiBzdHJpbmcpID0+IHtcbiAgICogICB0YXJnZXQuYWRkSW5pdGlhbGl6ZXIoKGluc3RhbmNlOiBSZWFjdGl2ZUVsZW1lbnQpID0+IHtcbiAgICogICAgIC8vIFRoaXMgaXMgcnVuIGR1cmluZyBjb25zdHJ1Y3Rpb24gb2YgdGhlIGVsZW1lbnRcbiAgICogICAgIG5ldyBNeUNvbnRyb2xsZXIoaW5zdGFuY2UpO1xuICAgKiAgIH0pO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBEZWNvcmF0aW5nIGEgZmllbGQgd2lsbCB0aGVuIGNhdXNlIGVhY2ggaW5zdGFuY2UgdG8gcnVuIGFuIGluaXRpYWxpemVyXG4gICAqIHRoYXQgYWRkcyBhIGNvbnRyb2xsZXI6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGNsYXNzIE15RWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgKiAgIEBteURlY29yYXRvciBmb287XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEluaXRpYWxpemVycyBhcmUgc3RvcmVkIHBlci1jb25zdHJ1Y3Rvci4gQWRkaW5nIGFuIGluaXRpYWxpemVyIHRvIGFcbiAgICogc3ViY2xhc3MgZG9lcyBub3QgYWRkIGl0IHRvIGEgc3VwZXJjbGFzcy4gU2luY2UgaW5pdGlhbGl6ZXJzIGFyZSBydW4gaW5cbiAgICogY29uc3RydWN0b3JzLCBpbml0aWFsaXplcnMgd2lsbCBydW4gaW4gb3JkZXIgb2YgdGhlIGNsYXNzIGhpZXJhcmNoeSxcbiAgICogc3RhcnRpbmcgd2l0aCBzdXBlcmNsYXNzZXMgYW5kIHByb2dyZXNzaW5nIHRvIHRoZSBpbnN0YW5jZSdzIGNsYXNzLlxuICAgKlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIGFkZEluaXRpYWxpemVyKGluaXRpYWxpemVyOiBJbml0aWFsaXplcikge1xuICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICAodGhpcy5faW5pdGlhbGl6ZXJzID8/PSBbXSkucHVzaChpbml0aWFsaXplcik7XG4gIH1cblxuICBzdGF0aWMgX2luaXRpYWxpemVycz86IEluaXRpYWxpemVyW107XG5cbiAgLypcbiAgICogRHVlIHRvIGNsb3N1cmUgY29tcGlsZXIgRVM2IGNvbXBpbGF0aW9uIGJ1Z3MsIEBub2NvbGxhcHNlIGlzIHJlcXVpcmVkIG9uXG4gICAqIGFsbCBzdGF0aWMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB3aXRoIGluaXRpYWxpemVycy4gIFJlZmVyZW5jZTpcbiAgICogLSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzE3NzZcbiAgICovXG5cbiAgLyoqXG4gICAqIE1hcHMgYXR0cmlidXRlIG5hbWVzIHRvIHByb3BlcnRpZXM7IGZvciBleGFtcGxlIGBmb29iYXJgIGF0dHJpYnV0ZSB0b1xuICAgKiBgZm9vQmFyYCBwcm9wZXJ0eS4gQ3JlYXRlZCBsYXppbHkgb24gdXNlciBzdWJjbGFzc2VzIHdoZW4gZmluYWxpemluZyB0aGVcbiAgICogY2xhc3MuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBfX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXA6IEF0dHJpYnV0ZU1hcDtcblxuICAvKipcbiAgICogTWFya3MgY2xhc3MgYXMgaGF2aW5nIGZpbmlzaGVkIGNyZWF0aW5nIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIFtmaW5hbGl6ZWRdID0gdHJ1ZTtcblxuICAvKipcbiAgICogTWVtb2l6ZWQgbGlzdCBvZiBhbGwgZWxlbWVudCBwcm9wZXJ0aWVzLCBpbmNsdWRpbmcgYW55IHN1cGVyY2xhc3MgcHJvcGVydGllcy5cbiAgICogQ3JlYXRlZCBsYXppbHkgb24gdXNlciBzdWJjbGFzc2VzIHdoZW4gZmluYWxpemluZyB0aGUgY2xhc3MuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgZWxlbWVudFByb3BlcnRpZXM6IFByb3BlcnR5RGVjbGFyYXRpb25NYXAgPSBuZXcgTWFwKCk7XG5cbiAgLyoqXG4gICAqIFVzZXItc3VwcGxpZWQgb2JqZWN0IHRoYXQgbWFwcyBwcm9wZXJ0eSBuYW1lcyB0byBgUHJvcGVydHlEZWNsYXJhdGlvbmBcbiAgICogb2JqZWN0cyBjb250YWluaW5nIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMuIFdoZW5cbiAgICogYSByZWFjdGl2ZSBwcm9wZXJ0eSBpcyBzZXQgdGhlIGVsZW1lbnQgd2lsbCB1cGRhdGUgYW5kIHJlbmRlci5cbiAgICpcbiAgICogQnkgZGVmYXVsdCBwcm9wZXJ0aWVzIGFyZSBwdWJsaWMgZmllbGRzLCBhbmQgYXMgc3VjaCwgdGhleSBzaG91bGQgYmVcbiAgICogY29uc2lkZXJlZCBhcyBwcmltYXJpbHkgc2V0dGFibGUgYnkgZWxlbWVudCB1c2VycywgZWl0aGVyIHZpYSBhdHRyaWJ1dGUgb3JcbiAgICogdGhlIHByb3BlcnR5IGl0c2VsZi5cbiAgICpcbiAgICogR2VuZXJhbGx5LCBwcm9wZXJ0aWVzIHRoYXQgYXJlIGNoYW5nZWQgYnkgdGhlIGVsZW1lbnQgc2hvdWxkIGJlIHByaXZhdGUgb3JcbiAgICogcHJvdGVjdGVkIGZpZWxkcyBhbmQgc2hvdWxkIHVzZSB0aGUgYHN0YXRlOiB0cnVlYCBvcHRpb24uIFByb3BlcnRpZXNcbiAgICogbWFya2VkIGFzIGBzdGF0ZWAgZG8gbm90IHJlZmxlY3QgZnJvbSB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVcbiAgICpcbiAgICogSG93ZXZlciwgc29tZXRpbWVzIGVsZW1lbnQgY29kZSBkb2VzIG5lZWQgdG8gc2V0IGEgcHVibGljIHByb3BlcnR5LiBUaGlzXG4gICAqIHNob3VsZCB0eXBpY2FsbHkgb25seSBiZSBkb25lIGluIHJlc3BvbnNlIHRvIHVzZXIgaW50ZXJhY3Rpb24sIGFuZCBhbiBldmVudFxuICAgKiBzaG91bGQgYmUgZmlyZWQgaW5mb3JtaW5nIHRoZSB1c2VyOyBmb3IgZXhhbXBsZSwgYSBjaGVja2JveCBzZXRzIGl0c1xuICAgKiBgY2hlY2tlZGAgcHJvcGVydHkgd2hlbiBjbGlja2VkIGFuZCBmaXJlcyBhIGBjaGFuZ2VkYCBldmVudC4gTXV0YXRpbmdcbiAgICogcHVibGljIHByb3BlcnRpZXMgc2hvdWxkIHR5cGljYWxseSBub3QgYmUgZG9uZSBmb3Igbm9uLXByaW1pdGl2ZSAob2JqZWN0IG9yXG4gICAqIGFycmF5KSBwcm9wZXJ0aWVzLiBJbiBvdGhlciBjYXNlcyB3aGVuIGFuIGVsZW1lbnQgbmVlZHMgdG8gbWFuYWdlIHN0YXRlLCBhXG4gICAqIHByaXZhdGUgcHJvcGVydHkgc2V0IHdpdGggdGhlIGBzdGF0ZTogdHJ1ZWAgb3B0aW9uIHNob3VsZCBiZSB1c2VkLiBXaGVuXG4gICAqIG5lZWRlZCwgc3RhdGUgcHJvcGVydGllcyBjYW4gYmUgaW5pdGlhbGl6ZWQgdmlhIHB1YmxpYyBwcm9wZXJ0aWVzIHRvXG4gICAqIGZhY2lsaXRhdGUgY29tcGxleCBpbnRlcmFjdGlvbnMuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgcHJvcGVydGllczogUHJvcGVydHlEZWNsYXJhdGlvbnM7XG5cbiAgLyoqXG4gICAqIE1lbW9pemVkIGxpc3Qgb2YgYWxsIGVsZW1lbnQgc3R5bGVzLlxuICAgKiBDcmVhdGVkIGxhemlseSBvbiB1c2VyIHN1YmNsYXNzZXMgd2hlbiBmaW5hbGl6aW5nIHRoZSBjbGFzcy5cbiAgICogQG5vY29sbGFwc2VcbiAgICogQGNhdGVnb3J5IHN0eWxlc1xuICAgKi9cbiAgc3RhdGljIGVsZW1lbnRTdHlsZXM6IEFycmF5PENTU1Jlc3VsdE9yTmF0aXZlPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBzdHlsZXMgdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQuIFRoZSBzdHlsZXMgc2hvdWxkIGJlIGRlZmluZWRcbiAgICogdXNpbmcgdGhlIHtAbGlua2NvZGUgY3NzfSB0YWcgZnVuY3Rpb24sIHZpYSBjb25zdHJ1Y3RpYmxlIHN0eWxlc2hlZXRzLCBvclxuICAgKiBpbXBvcnRlZCBmcm9tIG5hdGl2ZSBDU1MgbW9kdWxlIHNjcmlwdHMuXG4gICAqXG4gICAqIE5vdGUgb24gQ29udGVudCBTZWN1cml0eSBQb2xpY3k6XG4gICAqXG4gICAqIEVsZW1lbnQgc3R5bGVzIGFyZSBpbXBsZW1lbnRlZCB3aXRoIGA8c3R5bGU+YCB0YWdzIHdoZW4gdGhlIGJyb3dzZXIgZG9lc24ndFxuICAgKiBzdXBwb3J0IGFkb3B0ZWQgU3R5bGVTaGVldHMuIFRvIHVzZSBzdWNoIGA8c3R5bGU+YCB0YWdzIHdpdGggdGhlIHN0eWxlLXNyY1xuICAgKiBDU1AgZGlyZWN0aXZlLCB0aGUgc3R5bGUtc3JjIHZhbHVlIG11c3QgZWl0aGVyIGluY2x1ZGUgJ3Vuc2FmZS1pbmxpbmUnIG9yXG4gICAqIGBub25jZS08YmFzZTY0LXZhbHVlPmAgd2l0aCBgPGJhc2U2NC12YWx1ZT5gIHJlcGxhY2VkIGJlIGEgc2VydmVyLWdlbmVyYXRlZFxuICAgKiBub25jZS5cbiAgICpcbiAgICogVG8gcHJvdmlkZSBhIG5vbmNlIHRvIHVzZSBvbiBnZW5lcmF0ZWQgYDxzdHlsZT5gIGVsZW1lbnRzLCBzZXRcbiAgICogYHdpbmRvdy5saXROb25jZWAgdG8gYSBzZXJ2ZXItZ2VuZXJhdGVkIG5vbmNlIGluIHlvdXIgcGFnZSdzIEhUTUwsIGJlZm9yZVxuICAgKiBsb2FkaW5nIGFwcGxpY2F0aW9uIGNvZGU6XG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPHNjcmlwdD5cbiAgICogICAvLyBHZW5lcmF0ZWQgYW5kIHVuaXF1ZSBwZXIgcmVxdWVzdDpcbiAgICogICB3aW5kb3cubGl0Tm9uY2UgPSAnYTFiMmMzZDQnO1xuICAgKiA8L3NjcmlwdD5cbiAgICogYGBgXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBzdHlsZXNcbiAgICovXG4gIHN0YXRpYyBzdHlsZXM/OiBDU1NSZXN1bHRHcm91cDtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBwcm9wZXJ0aWVzIGRlZmluZWQgYnkgdGhpcyBjbGFzcyB0aGF0IGNhdXNlZCBhbiBhY2Nlc3NvciB0byBiZVxuICAgKiBhZGRlZCBkdXJpbmcgYGNyZWF0ZVByb3BlcnR5YC5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9fcmVhY3RpdmVQcm9wZXJ0eUtleXM/OiBTZXQ8UHJvcGVydHlLZXk+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhdHRyaWJ1dGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICogQG5vY29sbGFwc2VcbiAgICogQGNhdGVnb3J5IGF0dHJpYnV0ZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIC8vIG5vdGU6IHBpZ2d5IGJhY2tpbmcgb24gdGhpcyB0byBlbnN1cmUgd2UncmUgZmluYWxpemVkLlxuICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKHYsIHApID0+IHtcbiAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLl9fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHAsIHYpO1xuICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5zZXQoYXR0ciwgcCk7XG4gICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcHJvcGVydHkgYWNjZXNzb3Igb24gdGhlIGVsZW1lbnQgcHJvdG90eXBlIGlmIG9uZSBkb2VzIG5vdCBleGlzdFxuICAgKiBhbmQgc3RvcmVzIGEge0BsaW5rY29kZSBQcm9wZXJ0eURlY2xhcmF0aW9ufSBmb3IgdGhlIHByb3BlcnR5IHdpdGggdGhlXG4gICAqIGdpdmVuIG9wdGlvbnMuIFRoZSBwcm9wZXJ0eSBzZXR0ZXIgY2FsbHMgdGhlIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgXG4gICAqIHByb3BlcnR5IG9wdGlvbiBvciB1c2VzIGEgc3RyaWN0IGlkZW50aXR5IGNoZWNrIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdFxuICAgKiB0byByZXF1ZXN0IGFuIHVwZGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gY3VzdG9taXplIHByb3BlcnRpZXM7IGhvd2V2ZXIsXG4gICAqIHdoZW4gZG9pbmcgc28sIGl0J3MgaW1wb3J0YW50IHRvIGNhbGwgYHN1cGVyLmNyZWF0ZVByb3BlcnR5YCB0byBlbnN1cmVcbiAgICogdGhlIHByb3BlcnR5IGlzIHNldHVwIGNvcnJlY3RseS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICogYGdldFByb3BlcnR5RGVzY3JpcHRvcmAgaW50ZXJuYWxseSB0byBnZXQgYSBkZXNjcmlwdG9yIHRvIGluc3RhbGwuXG4gICAqIFRvIGN1c3RvbWl6ZSB3aGF0IHByb3BlcnRpZXMgZG8gd2hlbiB0aGV5IGFyZSBnZXQgb3Igc2V0LCBvdmVycmlkZVxuICAgKiBgZ2V0UHJvcGVydHlEZXNjcmlwdG9yYC4gVG8gY3VzdG9taXplIHRoZSBvcHRpb25zIGZvciBhIHByb3BlcnR5LFxuICAgKiBpbXBsZW1lbnQgYGNyZWF0ZVByb3BlcnR5YCBsaWtlIHRoaXM6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zKSB7XG4gICAqICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucywge215T3B0aW9uOiB0cnVlfSk7XG4gICAqICAgc3VwZXIuY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlUHJvcGVydHkoXG4gICAgbmFtZTogUHJvcGVydHlLZXksXG4gICAgb3B0aW9uczogUHJvcGVydHlEZWNsYXJhdGlvbiA9IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uXG4gICkge1xuICAgIC8vIGlmIHRoaXMgaXMgYSBzdGF0ZSBwcm9wZXJ0eSwgZm9yY2UgdGhlIGF0dHJpYnV0ZSB0byBmYWxzZS5cbiAgICBpZiAob3B0aW9ucy5zdGF0ZSkge1xuICAgICAgLy8gQ2FzdCBhcyBhbnkgc2luY2UgdGhpcyBpcyByZWFkb25seS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAob3B0aW9ucyBhcyBhbnkpLmF0dHJpYnV0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBOb3RlLCBzaW5jZSB0aGlzIGNhbiBiZSBjYWxsZWQgYnkgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciB3aGljaFxuICAgIC8vIGlzIGNhbGxlZCBiZWZvcmUgYGZpbmFsaXplYCwgd2UgZW5zdXJlIGZpbmFsaXphdGlvbiBoYXMgYmVlbiBraWNrZWQgb2ZmLlxuICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTtcbiAgICAvLyBEbyBub3QgZ2VuZXJhdGUgYW4gYWNjZXNzb3IgaWYgdGhlIHByb3RvdHlwZSBhbHJlYWR5IGhhcyBvbmUsIHNpbmNlXG4gICAgLy8gaXQgd291bGQgYmUgbG9zdCBvdGhlcndpc2UgYW5kIHRoYXQgd291bGQgbmV2ZXIgYmUgdGhlIHVzZXIncyBpbnRlbnRpb247XG4gICAgLy8gSW5zdGVhZCwgd2UgZXhwZWN0IHVzZXJzIHRvIGNhbGwgYHJlcXVlc3RVcGRhdGVgIHRoZW1zZWx2ZXMgZnJvbVxuICAgIC8vIHVzZXItZGVmaW5lZCBhY2Nlc3NvcnMuIE5vdGUgdGhhdCBpZiB0aGUgc3VwZXIgaGFzIGFuIGFjY2Vzc29yIHdlIHdpbGxcbiAgICAvLyBzdGlsbCBvdmVyd3JpdGUgaXRcbiAgICBpZiAoIW9wdGlvbnMubm9BY2Nlc3NvciAmJiAhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnN0IGtleSA9IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJyA/IFN5bWJvbCgpIDogYF9fJHtuYW1lfWA7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjbGFzcyBkb2Vzbid0IGhhdmUgaXRzIG93biBzZXQsIGNyZWF0ZSBvbmUgYW5kIGluaXRpYWxpemVcbiAgICAgICAgICAvLyB3aXRoIHRoZSB2YWx1ZXMgaW4gdGhlIHNldCBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGNsYXNzLCBpZiBhbnkuXG4gICAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdfX3JlYWN0aXZlUHJvcGVydHlLZXlzJykpIHtcbiAgICAgICAgICAgIHRoaXMuX19yZWFjdGl2ZVByb3BlcnR5S2V5cyA9IG5ldyBTZXQoXG4gICAgICAgICAgICAgIHRoaXMuX19yZWFjdGl2ZVByb3BlcnR5S2V5cyA/PyBbXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fX3JlYWN0aXZlUHJvcGVydHlLZXlzIS5hZGQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gYmUgZGVmaW5lZCBvbiB0aGUgZ2l2ZW4gbmFtZWQgcHJvcGVydHkuXG4gICAqIElmIG5vIGRlc2NyaXB0b3IgaXMgcmV0dXJuZWQsIHRoZSBwcm9wZXJ0eSB3aWxsIG5vdCBiZWNvbWUgYW4gYWNjZXNzb3IuXG4gICAqIEZvciBleGFtcGxlLFxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBjbGFzcyBNeUVsZW1lbnQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICogICBzdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG5hbWUsIGtleSwgb3B0aW9ucykge1xuICAgKiAgICAgY29uc3QgZGVmYXVsdERlc2NyaXB0b3IgPVxuICAgKiAgICAgICAgIHN1cGVyLmdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpO1xuICAgKiAgICAgY29uc3Qgc2V0dGVyID0gZGVmYXVsdERlc2NyaXB0b3Iuc2V0O1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgZ2V0OiBkZWZhdWx0RGVzY3JpcHRvci5nZXQsXG4gICAqICAgICAgIHNldCh2YWx1ZSkge1xuICAgKiAgICAgICAgIHNldHRlci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICogICAgICAgICAvLyBjdXN0b20gYWN0aW9uLlxuICAgKiAgICAgICB9LFxuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBjYXRlZ29yeSBwcm9wZXJ0aWVzXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcihcbiAgICBuYW1lOiBQcm9wZXJ0eUtleSxcbiAgICBrZXk6IHN0cmluZyB8IHN5bWJvbCxcbiAgICBvcHRpb25zOiBQcm9wZXJ0eURlY2xhcmF0aW9uXG4gICk6IFByb3BlcnR5RGVzY3JpcHRvciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBnZXQoKTogYW55IHtcbiAgICAgICAgcmV0dXJuICh0aGlzIGFzIHtba2V5OiBzdHJpbmddOiB1bmtub3dufSlba2V5IGFzIHN0cmluZ107XG4gICAgICB9LFxuICAgICAgc2V0KHRoaXM6IFJlYWN0aXZlRWxlbWVudCwgdmFsdWU6IHVua25vd24pIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSAodGhpcyBhcyB7fSBhcyB7W2tleTogc3RyaW5nXTogdW5rbm93bn0pW1xuICAgICAgICAgIG5hbWUgYXMgc3RyaW5nXG4gICAgICAgIF07XG4gICAgICAgICh0aGlzIGFzIHt9IGFzIHtba2V5OiBzdHJpbmddOiB1bmtub3dufSlba2V5IGFzIHN0cmluZ10gPSB2YWx1ZTtcbiAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyBSZWFjdGl2ZUVsZW1lbnQpLnJlcXVlc3RVcGRhdGUoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnR5IG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICogVGhlc2Ugb3B0aW9ucyBhcmUgZGVmaW5lZCB3aXRoIGEgYFByb3BlcnR5RGVjbGFyYXRpb25gIHZpYSB0aGUgYHByb3BlcnRpZXNgXG4gICAqIG9iamVjdCBvciB0aGUgYEBwcm9wZXJ0eWAgZGVjb3JhdG9yIGFuZCBhcmUgcmVnaXN0ZXJlZCBpblxuICAgKiBgY3JlYXRlUHJvcGVydHkoLi4uKWAuXG4gICAqXG4gICAqIE5vdGUsIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjb25zaWRlcmVkIFwiZmluYWxcIiBhbmQgbm90IG92ZXJyaWRkZW4uIFRvXG4gICAqIGN1c3RvbWl6ZSB0aGUgb3B0aW9ucyBmb3IgYSBnaXZlbiBwcm9wZXJ0eSwgb3ZlcnJpZGVcbiAgICoge0BsaW5rY29kZSBjcmVhdGVQcm9wZXJ0eX0uXG4gICAqXG4gICAqIEBub2NvbGxhcHNlXG4gICAqIEBmaW5hbFxuICAgKiBAY2F0ZWdvcnkgcHJvcGVydGllc1xuICAgKi9cbiAgc3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyhuYW1lOiBQcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmdldChuYW1lKSB8fCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLCBzZXRzIHVwIGVsZW1lbnRcbiAgICogc3R5bGluZywgYW5kIGVuc3VyZXMgYW55IHN1cGVyY2xhc3NlcyBhcmUgYWxzbyBmaW5hbGl6ZWQuIFJldHVybnMgdHJ1ZSBpZlxuICAgKiB0aGUgZWxlbWVudCB3YXMgZmluYWxpemVkLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyBmaW5hbGl6ZSgpIHtcbiAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShmaW5hbGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXNbZmluYWxpemVkXSA9IHRydWU7XG4gICAgLy8gZmluYWxpemUgYW55IHN1cGVyY2xhc3Nlc1xuICAgIGNvbnN0IHN1cGVyQ3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSBhcyB0eXBlb2YgUmVhY3RpdmVFbGVtZW50O1xuICAgIHN1cGVyQ3Rvci5maW5hbGl6ZSgpO1xuICAgIC8vIENyZWF0ZSBvd24gc2V0IG9mIGluaXRpYWxpemVycyBmb3IgdGhpcyBjbGFzcyBpZiBhbnkgZXhpc3Qgb24gdGhlXG4gICAgLy8gc3VwZXJjbGFzcyBhbmQgY29weSB0aGVtIGRvd24uIE5vdGUsIGZvciBhIHNtYWxsIHBlcmYgYm9vc3QsIGF2b2lkXG4gICAgLy8gY3JlYXRpbmcgaW5pdGlhbGl6ZXJzIHVubGVzcyBuZWVkZWQuXG4gICAgaWYgKHN1cGVyQ3Rvci5faW5pdGlhbGl6ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVycyA9IFsuLi5zdXBlckN0b3IuX2luaXRpYWxpemVyc107XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudFByb3BlcnRpZXMgPSBuZXcgTWFwKHN1cGVyQ3Rvci5lbGVtZW50UHJvcGVydGllcyk7XG4gICAgLy8gaW5pdGlhbGl6ZSBNYXAgcG9wdWxhdGVkIGluIG9ic2VydmVkQXR0cmlidXRlc1xuICAgIHRoaXMuX19hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwID0gbmV3IE1hcCgpO1xuICAgIC8vIG1ha2UgYW55IHByb3BlcnRpZXNcbiAgICAvLyBOb3RlLCBvbmx5IHByb2Nlc3MgXCJvd25cIiBwcm9wZXJ0aWVzIHNpbmNlIHRoaXMgZWxlbWVudCB3aWxsIGluaGVyaXRcbiAgICAvLyBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBzdXBlckNsYXNzLCBhbmQgZmluYWxpemF0aW9uIGVuc3VyZXNcbiAgICAvLyB0aGUgZW50aXJlIHByb3RvdHlwZSBjaGFpbiBpcyBmaW5hbGl6ZWQuXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgncHJvcGVydGllcycsIHRoaXMpKSkge1xuICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BlcnRpZXM7XG4gICAgICAvLyBzdXBwb3J0IHN5bWJvbHMgaW4gcHJvcGVydGllcyAoSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMpXG4gICAgICBjb25zdCBwcm9wS2V5cyA9IFtcbiAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcHMpLFxuICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BzKSxcbiAgICAgIF07XG4gICAgICAvLyBUaGlzIGZvci9vZiBpcyBvayBiZWNhdXNlIHByb3BLZXlzIGlzIGFuIGFycmF5XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgcHJvcEtleXMpIHtcbiAgICAgICAgLy8gbm90ZSwgdXNlIG9mIGBhbnlgIGlzIGR1ZSB0byBUeXBlU2NyaXB0IGxhY2sgb2Ygc3VwcG9ydCBmb3Igc3ltYm9sIGluXG4gICAgICAgIC8vIGluZGV4IHR5cGVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydHkocCwgKHByb3BzIGFzIGFueSlbcF0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRTdHlsZXMgPSB0aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKTtcbiAgICAvLyBERVYgbW9kZSB3YXJuaW5nc1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgY29uc3Qgd2FyblJlbW92ZWRPclJlbmFtZWQgPSAobmFtZTogc3RyaW5nLCByZW5hbWVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgaXNzdWVXYXJuaW5nKFxuICAgICAgICAgICAgcmVuYW1lZCA/ICdyZW5hbWVkLWFwaScgOiAncmVtb3ZlZC1hcGknLFxuICAgICAgICAgICAgYFxcYCR7bmFtZX1cXGAgaXMgaW1wbGVtZW50ZWQgb24gY2xhc3MgJHt0aGlzLm5hbWV9LiBJdCBgICtcbiAgICAgICAgICAgICAgYGhhcyBiZWVuICR7cmVuYW1lZCA/ICdyZW5hbWVkJyA6ICdyZW1vdmVkJ30gYCArXG4gICAgICAgICAgICAgIGBpbiB0aGlzIHZlcnNpb24gb2YgTGl0RWxlbWVudC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHdhcm5SZW1vdmVkT3JSZW5hbWVkKCdpbml0aWFsaXplJyk7XG4gICAgICB3YXJuUmVtb3ZlZE9yUmVuYW1lZCgncmVxdWVzdFVwZGF0ZUludGVybmFsJyk7XG4gICAgICB3YXJuUmVtb3ZlZE9yUmVuYW1lZCgnX2dldFVwZGF0ZUNvbXBsZXRlJywgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wdGlvbnMgdXNlZCB3aGVuIGNhbGxpbmcgYGF0dGFjaFNoYWRvd2AuIFNldCB0aGlzIHByb3BlcnR5IHRvIGN1c3RvbWl6ZVxuICAgKiB0aGUgb3B0aW9ucyBmb3IgdGhlIHNoYWRvd1Jvb3Q7IGZvciBleGFtcGxlLCB0byBjcmVhdGUgYSBjbG9zZWRcbiAgICogc2hhZG93Um9vdDogYHttb2RlOiAnY2xvc2VkJ31gLlxuICAgKlxuICAgKiBOb3RlLCB0aGVzZSBvcHRpb25zIGFyZSB1c2VkIGluIGBjcmVhdGVSZW5kZXJSb290YC4gSWYgdGhpcyBtZXRob2RcbiAgICogaXMgY3VzdG9taXplZCwgb3B0aW9ucyBzaG91bGQgYmUgcmVzcGVjdGVkIGlmIHBvc3NpYmxlLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKiBAY2F0ZWdvcnkgcmVuZGVyaW5nXG4gICAqL1xuICBzdGF0aWMgc2hhZG93Um9vdE9wdGlvbnM6IFNoYWRvd1Jvb3RJbml0ID0ge21vZGU6ICdvcGVuJ307XG5cbiAgLyoqXG4gICAqIFRha2VzIHRoZSBzdHlsZXMgdGhlIHVzZXIgc3VwcGxpZWQgdmlhIHRoZSBgc3RhdGljIHN0eWxlc2AgcHJvcGVydHkgYW5kXG4gICAqIHJldHVybnMgdGhlIGFycmF5IG9mIHN0eWxlcyB0byBhcHBseSB0byB0aGUgZWxlbWVudC5cbiAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaW50ZWdyYXRlIGludG8gYSBzdHlsZSBtYW5hZ2VtZW50IHN5c3RlbS5cbiAgICpcbiAgICogU3R5bGVzIGFyZSBkZWR1cGxpY2F0ZWQgcHJlc2VydmluZyB0aGUgX2xhc3RfIGluc3RhbmNlIGluIHRoZSBsaXN0LiBUaGlzXG4gICAqIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHRvIGF2b2lkIGR1cGxpY2F0ZWQgc3R5bGVzIHRoYXQgY2FuIG9jY3VyXG4gICAqIGVzcGVjaWFsbHkgd2hlbiBjb21wb3NpbmcgdmlhIHN1YmNsYXNzaW5nLiBUaGUgbGFzdCBpdGVtIGlzIGtlcHQgdG8gdHJ5XG4gICAqIHRvIHByZXNlcnZlIHRoZSBjYXNjYWRlIG9yZGVyIHdpdGggdGhlIGFzc3VtcHRpb24gdGhhdCBpdCdzIG1vc3QgaW1wb3J0YW50XG4gICAqIHRoYXQgbGFzdCBhZGRlZCBzdHlsZXMgb3ZlcnJpZGUgcHJldmlvdXMgc3R5bGVzLlxuICAgKlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKiBAY2F0ZWdvcnkgc3R5bGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplU3R5bGVzKFxuICAgIHN0eWxlcz86IENTU1Jlc3VsdEdyb3VwXG4gICk6IEFycmF5PENTU1Jlc3VsdE9yTmF0aXZlPiB7XG4gICAgY29uc3QgZWxlbWVudFN0eWxlcyA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlcykpIHtcbiAgICAgIC8vIERlZHVwZSB0aGUgZmxhdHRlbmVkIGFycmF5IGluIHJldmVyc2Ugb3JkZXIgdG8gcHJlc2VydmUgdGhlIGxhc3QgaXRlbXMuXG4gICAgICAvLyBDYXN0aW5nIHRvIEFycmF5PHVua25vd24+IHdvcmtzIGFyb3VuZCBUUyBlcnJvciB0aGF0XG4gICAgICAvLyBhcHBlYXJzIHRvIGNvbWUgZnJvbSB0cnlpbmcgdG8gZmxhdHRlbiBhIHR5cGUgQ1NTUmVzdWx0QXJyYXkuXG4gICAgICBjb25zdCBzZXQgPSBuZXcgU2V0KChzdHlsZXMgYXMgQXJyYXk8dW5rbm93bj4pLmZsYXQoSW5maW5pdHkpLnJldmVyc2UoKSk7XG4gICAgICAvLyBUaGVuIHByZXNlcnZlIG9yaWdpbmFsIG9yZGVyIGJ5IGFkZGluZyB0aGUgc2V0IGl0ZW1zIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICBmb3IgKGNvbnN0IHMgb2Ygc2V0KSB7XG4gICAgICAgIGVsZW1lbnRTdHlsZXMudW5zaGlmdChnZXRDb21wYXRpYmxlU3R5bGUocyBhcyBDU1NSZXN1bHRPck5hdGl2ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVsZW1lbnRTdHlsZXMucHVzaChnZXRDb21wYXRpYmxlU3R5bGUoc3R5bGVzKSk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50U3R5bGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vZGUgb3IgU2hhZG93Um9vdCBpbnRvIHdoaWNoIGVsZW1lbnQgRE9NIHNob3VsZCBiZSByZW5kZXJlZC4gRGVmYXVsdHNcbiAgICogdG8gYW4gb3BlbiBzaGFkb3dSb290LlxuICAgKiBAY2F0ZWdvcnkgcmVuZGVyaW5nXG4gICAqL1xuICByZWFkb25seSByZW5kZXJSb290ITogSFRNTEVsZW1lbnQgfCBTaGFkb3dSb290O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlIGBuYW1lYC5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KFxuICAgIG5hbWU6IFByb3BlcnR5S2V5LFxuICAgIG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb25cbiAgKSB7XG4gICAgY29uc3QgYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZSA9PT0gZmFsc2VcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnXG4gICAgICA/IGF0dHJpYnV0ZVxuICAgICAgOiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZydcbiAgICAgID8gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgX19pbnN0YW5jZVByb3BlcnRpZXM/OiBQcm9wZXJ0eVZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgLy8gSW5pdGlhbGl6ZSB0byBhbiB1bnJlc29sdmVkIFByb21pc2Ugc28gd2UgY2FuIG1ha2Ugc3VyZSB0aGUgZWxlbWVudCBoYXNcbiAgLy8gY29ubmVjdGVkIGJlZm9yZSBmaXJzdCB1cGRhdGUuXG4gIHByaXZhdGUgX191cGRhdGVQcm9taXNlITogUHJvbWlzZTxib29sZWFuPjtcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgdXBkYXRlIGFzIGEgcmVzdWx0IG9mIGNhbGxpbmcgYHJlcXVlc3RVcGRhdGUoKWAuXG4gICAqIFNob3VsZCBvbmx5IGJlIHJlYWQuXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBpc1VwZGF0ZVBlbmRpbmcgPSBmYWxzZTtcblxuICAvKipcbiAgICogSXMgc2V0IHRvIGB0cnVlYCBhZnRlciB0aGUgZmlyc3QgdXBkYXRlLiBUaGUgZWxlbWVudCBjb2RlIGNhbm5vdCBhc3N1bWVcbiAgICogdGhhdCBgcmVuZGVyUm9vdGAgZXhpc3RzIGJlZm9yZSB0aGUgZWxlbWVudCBgaGFzVXBkYXRlZGAuXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBoYXNVcGRhdGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE1hcCB3aXRoIGtleXMgZm9yIGFueSBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0XG4gICAqIHVwZGF0ZSBjeWNsZSB3aXRoIHByZXZpb3VzIHZhbHVlcy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfJGNoYW5nZWRQcm9wZXJ0aWVzITogUHJvcGVydHlWYWx1ZXM7XG5cbiAgLyoqXG4gICAqIE1hcCB3aXRoIGtleXMgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSByZWZsZWN0ZWQgd2hlbiB1cGRhdGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfX3JlZmxlY3RpbmdQcm9wZXJ0aWVzPzogTWFwPFByb3BlcnR5S2V5LCBQcm9wZXJ0eURlY2xhcmF0aW9uPjtcblxuICAvKipcbiAgICogTmFtZSBvZiBjdXJyZW50bHkgcmVmbGVjdGluZyBwcm9wZXJ0eVxuICAgKi9cbiAgcHJpdmF0ZSBfX3JlZmxlY3RpbmdQcm9wZXJ0eTogUHJvcGVydHlLZXkgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIGNvbnRyb2xsZXJzLlxuICAgKi9cbiAgcHJpdmF0ZSBfX2NvbnRyb2xsZXJzPzogUmVhY3RpdmVDb250cm9sbGVyW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgb25seSBvdmVycmlkZSBwb2ludCBmb3IgY3VzdG9taXppbmcgd29yayBkb25lIHdoZW4gZWxlbWVudHNcbiAgICogYXJlIGNvbnN0cnVjdGVkLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9pbml0aWFsaXplKCkge1xuICAgIHRoaXMuX191cGRhdGVQcm9taXNlID0gbmV3IFByb21pc2U8Ym9vbGVhbj4oXG4gICAgICAocmVzKSA9PiAodGhpcy5lbmFibGVVcGRhdGluZyA9IHJlcylcbiAgICApO1xuICAgIHRoaXMuXyRjaGFuZ2VkUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9fc2F2ZUluc3RhbmNlUHJvcGVydGllcygpO1xuICAgIC8vIGVuc3VyZXMgZmlyc3QgdXBkYXRlIHdpbGwgYmUgY2F1Z2h0IGJ5IGFuIGVhcmx5IGFjY2VzcyBvZlxuICAgIC8vIGB1cGRhdGVDb21wbGV0ZWBcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgUmVhY3RpdmVFbGVtZW50KS5faW5pdGlhbGl6ZXJzPy5mb3JFYWNoKChpKSA9PlxuICAgICAgaSh0aGlzKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgYFJlYWN0aXZlQ29udHJvbGxlcmAgdG8gcGFydGljaXBhdGUgaW4gdGhlIGVsZW1lbnQncyByZWFjdGl2ZVxuICAgKiB1cGRhdGUgY3ljbGUuIFRoZSBlbGVtZW50IGF1dG9tYXRpY2FsbHkgY2FsbHMgaW50byBhbnkgcmVnaXN0ZXJlZFxuICAgKiBjb250cm9sbGVycyBkdXJpbmcgaXRzIGxpZmVjeWNsZSBjYWxsYmFja3MuXG4gICAqXG4gICAqIElmIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCB3aGVuIGBhZGRDb250cm9sbGVyKClgIGlzIGNhbGxlZCwgdGhlXG4gICAqIGNvbnRyb2xsZXIncyBgaG9zdENvbm5lY3RlZCgpYCBjYWxsYmFjayB3aWxsIGJlIGltbWVkaWF0ZWx5IGNhbGxlZC5cbiAgICogQGNhdGVnb3J5IGNvbnRyb2xsZXJzXG4gICAqL1xuICBhZGRDb250cm9sbGVyKGNvbnRyb2xsZXI6IFJlYWN0aXZlQ29udHJvbGxlcikge1xuICAgICh0aGlzLl9fY29udHJvbGxlcnMgPz89IFtdKS5wdXNoKGNvbnRyb2xsZXIpO1xuICAgIC8vIElmIGEgY29udHJvbGxlciBpcyBhZGRlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbiBjb25uZWN0ZWQsXG4gICAgLy8gY2FsbCBob3N0Q29ubmVjdGVkLiBOb3RlLCByZS11c2luZyBleGlzdGVuY2Ugb2YgYHJlbmRlclJvb3RgIGhlcmVcbiAgICAvLyAod2hpY2ggaXMgc2V0IGluIGNvbm5lY3RlZENhbGxiYWNrKSB0byBhdm9pZCB0aGUgbmVlZCB0byB0cmFjayBhXG4gICAgLy8gZmlyc3QgY29ubmVjdGVkIHN0YXRlLlxuICAgIGlmICh0aGlzLnJlbmRlclJvb3QgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICBjb250cm9sbGVyLmhvc3RDb25uZWN0ZWQ/LigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgYFJlYWN0aXZlQ29udHJvbGxlcmAgZnJvbSB0aGUgZWxlbWVudC5cbiAgICogQGNhdGVnb3J5IGNvbnRyb2xsZXJzXG4gICAqL1xuICByZW1vdmVDb250cm9sbGVyKGNvbnRyb2xsZXI6IFJlYWN0aXZlQ29udHJvbGxlcikge1xuICAgIC8vIE5vdGUsIGlmIHRoZSBpbmRleE9mIGlzIC0xLCB0aGUgPj4+IHdpbGwgZmxpcCB0aGUgc2lnbiB3aGljaCBtYWtlcyB0aGVcbiAgICAvLyBzcGxpY2UgZG8gbm90aGluZy5cbiAgICB0aGlzLl9fY29udHJvbGxlcnM/LnNwbGljZSh0aGlzLl9fY29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA+Pj4gMCwgMSk7XG4gIH1cblxuICAvKipcbiAgICogRml4ZXMgYW55IHByb3BlcnRpZXMgc2V0IG9uIHRoZSBpbnN0YW5jZSBiZWZvcmUgdXBncmFkZSB0aW1lLlxuICAgKiBPdGhlcndpc2UgdGhlc2Ugd291bGQgc2hhZG93IHRoZSBhY2Nlc3NvciBhbmQgYnJlYWsgdGhlc2UgcHJvcGVydGllcy5cbiAgICogVGhlIHByb3BlcnRpZXMgYXJlIHN0b3JlZCBpbiBhIE1hcCB3aGljaCBpcyBwbGF5ZWQgYmFjayBhZnRlciB0aGVcbiAgICogY29uc3RydWN0b3IgcnVucy4gTm90ZSwgb24gdmVyeSBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpICg8PTkpIG9yIENocm9tZVxuICAgKiAoPD00MSksIHByb3BlcnRpZXMgY3JlYXRlZCBmb3IgbmF0aXZlIHBsYXRmb3JtIHByb3BlcnRpZXMgbGlrZSAoYGlkYCBvclxuICAgKiBgbmFtZWApIG1heSBub3QgaGF2ZSBkZWZhdWx0IHZhbHVlcyBzZXQgaW4gdGhlIGVsZW1lbnQgY29uc3RydWN0b3IuIE9uXG4gICAqIHRoZXNlIGJyb3dzZXJzIG5hdGl2ZSBwcm9wZXJ0aWVzIGFwcGVhciBvbiBpbnN0YW5jZXMgYW5kIHRoZXJlZm9yZSB0aGVpclxuICAgKiBkZWZhdWx0IHZhbHVlIHdpbGwgb3ZlcndyaXRlIGFueSBlbGVtZW50IGRlZmF1bHQgKGUuZy4gaWYgdGhlIGVsZW1lbnQgc2V0c1xuICAgKiB0aGlzLmlkID0gJ2lkJyBpbiB0aGUgY29uc3RydWN0b3IsIHRoZSAnaWQnIHdpbGwgYmVjb21lICcnIHNpbmNlIHRoaXMgaXNcbiAgICogdGhlIG5hdGl2ZSBwbGF0Zm9ybSBkZWZhdWx0KS5cbiAgICovXG4gIHByaXZhdGUgX19zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCkge1xuICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgUmVhY3RpdmVFbGVtZW50KS5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKFxuICAgICAgKF92LCBwKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgdGhpcy5fX2luc3RhbmNlUHJvcGVydGllcyEuc2V0KHAsIHRoaXNbcCBhcyBrZXlvZiB0aGlzXSk7XG4gICAgICAgICAgZGVsZXRlIHRoaXNbcCBhcyBrZXlvZiB0aGlzXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9kZSBpbnRvIHdoaWNoIHRoZSBlbGVtZW50IHNob3VsZCByZW5kZXIgYW5kIGJ5IGRlZmF1bHRcbiAgICogY3JlYXRlcyBhbmQgcmV0dXJucyBhbiBvcGVuIHNoYWRvd1Jvb3QuIEltcGxlbWVudCB0byBjdXN0b21pemUgd2hlcmUgdGhlXG4gICAqIGVsZW1lbnQncyBET00gaXMgcmVuZGVyZWQuIEZvciBleGFtcGxlLCB0byByZW5kZXIgaW50byB0aGUgZWxlbWVudCdzXG4gICAqIGNoaWxkTm9kZXMsIHJldHVybiBgdGhpc2AuXG4gICAqXG4gICAqIEByZXR1cm4gUmV0dXJucyBhIG5vZGUgaW50byB3aGljaCB0byByZW5kZXIuXG4gICAqIEBjYXRlZ29yeSByZW5kZXJpbmdcbiAgICovXG4gIHByb3RlY3RlZCBjcmVhdGVSZW5kZXJSb290KCk6IEVsZW1lbnQgfCBTaGFkb3dSb290IHtcbiAgICBjb25zdCByZW5kZXJSb290ID1cbiAgICAgIHRoaXMuc2hhZG93Um9vdCA/P1xuICAgICAgdGhpcy5hdHRhY2hTaGFkb3coXG4gICAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQpLnNoYWRvd1Jvb3RPcHRpb25zXG4gICAgICApO1xuICAgIGFkb3B0U3R5bGVzKFxuICAgICAgcmVuZGVyUm9vdCxcbiAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQpLmVsZW1lbnRTdHlsZXNcbiAgICApO1xuICAgIHJldHVybiByZW5kZXJSb290O1xuICB9XG5cbiAgLyoqXG4gICAqIE9uIGZpcnN0IGNvbm5lY3Rpb24sIGNyZWF0ZXMgdGhlIGVsZW1lbnQncyByZW5kZXJSb290LCBzZXRzIHVwXG4gICAqIGVsZW1lbnQgc3R5bGluZywgYW5kIGVuYWJsZXMgdXBkYXRpbmcuXG4gICAqIEBjYXRlZ29yeSBsaWZlY3ljbGVcbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIC8vIGNyZWF0ZSByZW5kZXJSb290IGJlZm9yZSBmaXJzdCB1cGRhdGUuXG4gICAgaWYgKHRoaXMucmVuZGVyUm9vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAoXG4gICAgICAgIHRoaXMgYXMge1xuICAgICAgICAgIHJlbmRlclJvb3Q6IEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50O1xuICAgICAgICB9XG4gICAgICApLnJlbmRlclJvb3QgPSB0aGlzLmNyZWF0ZVJlbmRlclJvb3QoKTtcbiAgICB9XG4gICAgdGhpcy5lbmFibGVVcGRhdGluZyh0cnVlKTtcbiAgICB0aGlzLl9fY29udHJvbGxlcnM/LmZvckVhY2goKGMpID0+IGMuaG9zdENvbm5lY3RlZD8uKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdGUsIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjb25zaWRlcmVkIGZpbmFsIGFuZCBub3Qgb3ZlcnJpZGRlbi4gSXQgaXNcbiAgICogb3ZlcnJpZGRlbiBvbiB0aGUgZWxlbWVudCBpbnN0YW5jZSB3aXRoIGEgZnVuY3Rpb24gdGhhdCB0cmlnZ2VycyB0aGUgZmlyc3RcbiAgICogdXBkYXRlLlxuICAgKiBAY2F0ZWdvcnkgdXBkYXRlc1xuICAgKi9cbiAgcHJvdGVjdGVkIGVuYWJsZVVwZGF0aW5nKF9yZXF1ZXN0ZWRVcGRhdGU6IGJvb2xlYW4pIHt9XG5cbiAgLyoqXG4gICAqIEFsbG93cyBmb3IgYHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGluIGV4dGVuc2lvbnMgd2hpbGVcbiAgICogcmVzZXJ2aW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgbm9uLWJyZWFraW5nIGZlYXR1cmUgYWRkaXRpb25zXG4gICAqIHdoZW4gZGlzY29ubmVjdGluZyBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gICAqIEBjYXRlZ29yeSBsaWZlY3ljbGVcbiAgICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX19jb250cm9sbGVycz8uZm9yRWFjaCgoYykgPT4gYy5ob3N0RGlzY29ubmVjdGVkPy4oKSk7XG4gIH1cblxuICAvKipcbiAgICogU3luY2hyb25pemVzIHByb3BlcnR5IHZhbHVlcyB3aGVuIGF0dHJpYnV0ZXMgY2hhbmdlLlxuICAgKlxuICAgKiBTcGVjaWZpY2FsbHksIHdoZW4gYW4gYXR0cmlidXRlIGlzIHNldCwgdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgaXMgc2V0LlxuICAgKiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRvIGltcGxlbWVudCB0aGlzIGNhbGxiYWNrLiBJZiB0aGlzIG1ldGhvZCBpc1xuICAgKiBvdmVycmlkZGVuLCBgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIF9vbGQsIHZhbHVlKWAgbXVzdCBiZVxuICAgKiBjYWxsZWQuXG4gICAqXG4gICAqIFNlZSBbdXNpbmcgdGhlIGxpZmVjeWNsZSBjYWxsYmFja3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1dlYl9Db21wb25lbnRzL1VzaW5nX2N1c3RvbV9lbGVtZW50cyN1c2luZ190aGVfbGlmZWN5Y2xlX2NhbGxiYWNrcylcbiAgICogb24gTUROIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYC5cbiAgICogQGNhdGVnb3J5IGF0dHJpYnV0ZXNcbiAgICovXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX29sZDogc3RyaW5nIHwgbnVsbCxcbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICB0aGlzLl8kYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIF9fcHJvcGVydHlUb0F0dHJpYnV0ZShcbiAgICBuYW1lOiBQcm9wZXJ0eUtleSxcbiAgICB2YWx1ZTogdW5rbm93bixcbiAgICBvcHRpb25zOiBQcm9wZXJ0eURlY2xhcmF0aW9uID0gZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb25cbiAgKSB7XG4gICAgY29uc3QgYXR0ciA9IChcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFJlYWN0aXZlRWxlbWVudFxuICAgICkuX19hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG4gICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlZmxlY3QgPT09IHRydWUpIHtcbiAgICAgIGNvbnN0IGNvbnZlcnRlciA9XG4gICAgICAgIChvcHRpb25zLmNvbnZlcnRlciBhcyBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyKT8udG9BdHRyaWJ1dGUgIT09XG4gICAgICAgIHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9wdGlvbnMuY29udmVydGVyIGFzIENvbXBsZXhBdHRyaWJ1dGVDb252ZXJ0ZXIpXG4gICAgICAgICAgOiBkZWZhdWx0Q29udmVydGVyO1xuICAgICAgY29uc3QgYXR0clZhbHVlID0gY29udmVydGVyLnRvQXR0cmlidXRlISh2YWx1ZSwgb3B0aW9ucy50eXBlKTtcbiAgICAgIGlmIChcbiAgICAgICAgREVWX01PREUgJiZcbiAgICAgICAgKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFJlYWN0aXZlRWxlbWVudCkuZW5hYmxlZFdhcm5pbmdzIS5pbmRleE9mKFxuICAgICAgICAgICdtaWdyYXRpb24nXG4gICAgICAgICkgPj0gMCAmJlxuICAgICAgICBhdHRyVmFsdWUgPT09IHVuZGVmaW5lZFxuICAgICAgKSB7XG4gICAgICAgIGlzc3VlV2FybmluZyhcbiAgICAgICAgICAndW5kZWZpbmVkLWF0dHJpYnV0ZS12YWx1ZScsXG4gICAgICAgICAgYFRoZSBhdHRyaWJ1dGUgdmFsdWUgZm9yIHRoZSAke25hbWUgYXMgc3RyaW5nfSBwcm9wZXJ0eSBpcyBgICtcbiAgICAgICAgICAgIGB1bmRlZmluZWQgb24gZWxlbWVudCAke3RoaXMubG9jYWxOYW1lfS4gVGhlIGF0dHJpYnV0ZSB3aWxsIGJlIGAgK1xuICAgICAgICAgICAgYHJlbW92ZWQsIGJ1dCBpbiB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiBcXGBSZWFjdGl2ZUVsZW1lbnRcXGAsIGAgK1xuICAgICAgICAgICAgYHRoZSBhdHRyaWJ1dGUgd291bGQgbm90IGhhdmUgY2hhbmdlZC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBUcmFjayBpZiB0aGUgcHJvcGVydHkgaXMgYmVpbmcgcmVmbGVjdGVkIHRvIGF2b2lkXG4gICAgICAvLyBzZXR0aW5nIHRoZSBwcm9wZXJ0eSBhZ2FpbiB2aWEgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AuIE5vdGU6XG4gICAgICAvLyAxLiB0aGlzIHRha2VzIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGF0IHRoZSBjYWxsYmFjayBpcyBzeW5jaHJvbm91cy5cbiAgICAgIC8vIDIuIHdpbGwgYmVoYXZlIGluY29ycmVjdGx5IGlmIG11bHRpcGxlIGF0dHJpYnV0ZXMgYXJlIGluIHRoZSByZWFjdGlvblxuICAgICAgLy8gc3RhY2sgYXQgdGltZSBvZiBjYWxsaW5nLiBIb3dldmVyLCBzaW5jZSB3ZSBwcm9jZXNzIGF0dHJpYnV0ZXNcbiAgICAgIC8vIGluIGB1cGRhdGVgIHRoaXMgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSAob3IgYW4gZXh0cmVtZSBjb3JuZXIgY2FzZVxuICAgICAgLy8gdGhhdCB3ZSdkIGxpa2UgdG8gZGlzY292ZXIpLlxuICAgICAgLy8gbWFyayBzdGF0ZSByZWZsZWN0aW5nXG4gICAgICB0aGlzLl9fcmVmbGVjdGluZ1Byb3BlcnR5ID0gbmFtZTtcbiAgICAgIGlmIChhdHRyVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJWYWx1ZSBhcyBzdHJpbmcpO1xuICAgICAgfVxuICAgICAgLy8gbWFyayBzdGF0ZSBub3QgcmVmbGVjdGluZ1xuICAgICAgdGhpcy5fX3JlZmxlY3RpbmdQcm9wZXJ0eSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGF0dHJpYnV0ZVRvUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQ7XG4gICAgLy8gTm90ZSwgaGludCB0aGlzIGFzIGFuIGBBdHRyaWJ1dGVNYXBgIHNvIGNsb3N1cmUgY2xlYXJseSB1bmRlcnN0YW5kc1xuICAgIC8vIHRoZSB0eXBlOyBpdCBoYXMgaXNzdWVzIHdpdGggdHJhY2tpbmcgdHlwZXMgdGhyb3VnaCBzdGF0aWNzXG4gICAgY29uc3QgcHJvcE5hbWUgPSAoY3Rvci5fX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAgYXMgQXR0cmlidXRlTWFwKS5nZXQobmFtZSk7XG4gICAgLy8gVXNlIHRyYWNraW5nIGluZm8gdG8gYXZvaWQgcmVmbGVjdGluZyBhIHByb3BlcnR5IHZhbHVlIHRvIGFuIGF0dHJpYnV0ZVxuICAgIC8vIGlmIGl0IHdhcyBqdXN0IHNldCBiZWNhdXNlIHRoZSBhdHRyaWJ1dGUgY2hhbmdlZC5cbiAgICBpZiAocHJvcE5hbWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9fcmVmbGVjdGluZ1Byb3BlcnR5ICE9PSBwcm9wTmFtZSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHByb3BOYW1lKTtcbiAgICAgIGNvbnN0IGNvbnZlcnRlciA9XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNvbnZlcnRlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8ge2Zyb21BdHRyaWJ1dGU6IG9wdGlvbnMuY29udmVydGVyfVxuICAgICAgICAgIDogb3B0aW9ucy5jb252ZXJ0ZXI/LmZyb21BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gb3B0aW9ucy5jb252ZXJ0ZXJcbiAgICAgICAgICA6IGRlZmF1bHRDb252ZXJ0ZXI7XG4gICAgICAvLyBtYXJrIHN0YXRlIHJlZmxlY3RpbmdcbiAgICAgIHRoaXMuX19yZWZsZWN0aW5nUHJvcGVydHkgPSBwcm9wTmFtZTtcbiAgICAgIHRoaXNbcHJvcE5hbWUgYXMga2V5b2YgdGhpc10gPSBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZSEoXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvcHRpb25zLnR5cGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICkgYXMgYW55O1xuICAgICAgLy8gbWFyayBzdGF0ZSBub3QgcmVmbGVjdGluZ1xuICAgICAgdGhpcy5fX3JlZmxlY3RpbmdQcm9wZXJ0eSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIGFuIHVwZGF0ZSB3aGljaCBpcyBwcm9jZXNzZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgc2hvdWxkIGJlIGNhbGxlZFxuICAgKiB3aGVuIGFuIGVsZW1lbnQgc2hvdWxkIHVwZGF0ZSBiYXNlZCBvbiBzb21lIHN0YXRlIG5vdCB0cmlnZ2VyZWQgYnkgc2V0dGluZ1xuICAgKiBhIHJlYWN0aXZlIHByb3BlcnR5LiBJbiB0aGlzIGNhc2UsIHBhc3Mgbm8gYXJndW1lbnRzLiBJdCBzaG91bGQgYWxzbyBiZVxuICAgKiBjYWxsZWQgd2hlbiBtYW51YWxseSBpbXBsZW1lbnRpbmcgYSBwcm9wZXJ0eSBzZXR0ZXIuIEluIHRoaXMgY2FzZSwgcGFzcyB0aGVcbiAgICogcHJvcGVydHkgYG5hbWVgIGFuZCBgb2xkVmFsdWVgIHRvIGVuc3VyZSB0aGF0IGFueSBjb25maWd1cmVkIHByb3BlcnR5XG4gICAqIG9wdGlvbnMgYXJlIGhvbm9yZWQuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gb2xkVmFsdWUgb2xkIHZhbHVlIG9mIHJlcXVlc3RpbmcgcHJvcGVydHlcbiAgICogQHBhcmFtIG9wdGlvbnMgcHJvcGVydHkgb3B0aW9ucyB0byB1c2UgaW5zdGVhZCBvZiB0aGUgcHJldmlvdXNseVxuICAgKiAgICAgY29uZmlndXJlZCBvcHRpb25zXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICByZXF1ZXN0VXBkYXRlKFxuICAgIG5hbWU/OiBQcm9wZXJ0eUtleSxcbiAgICBvbGRWYWx1ZT86IHVua25vd24sXG4gICAgb3B0aW9ucz86IFByb3BlcnR5RGVjbGFyYXRpb25cbiAgKTogdm9pZCB7XG4gICAgbGV0IHNob3VsZFJlcXVlc3RVcGRhdGUgPSB0cnVlO1xuICAgIC8vIElmIHdlIGhhdmUgYSBwcm9wZXJ0eSBrZXksIHBlcmZvcm0gcHJvcGVydHkgdXBkYXRlIHN0ZXBzLlxuICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMgPVxuICAgICAgICBvcHRpb25zIHx8XG4gICAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQpLmdldFByb3BlcnR5T3B0aW9ucyhuYW1lKTtcbiAgICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBvcHRpb25zLmhhc0NoYW5nZWQgfHwgbm90RXF1YWw7XG4gICAgICBpZiAoaGFzQ2hhbmdlZCh0aGlzW25hbWUgYXMga2V5b2YgdGhpc10sIG9sZFZhbHVlKSkge1xuICAgICAgICBpZiAoIXRoaXMuXyRjaGFuZ2VkUHJvcGVydGllcy5oYXMobmFtZSkpIHtcbiAgICAgICAgICB0aGlzLl8kY2hhbmdlZFByb3BlcnRpZXMuc2V0KG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdG8gcmVmbGVjdGluZyBwcm9wZXJ0aWVzIHNldC5cbiAgICAgICAgLy8gTm90ZSwgaXQncyBpbXBvcnRhbnQgdGhhdCBldmVyeSBjaGFuZ2UgaGFzIGEgY2hhbmNlIHRvIGFkZCB0aGVcbiAgICAgICAgLy8gcHJvcGVydHkgdG8gYF9yZWZsZWN0aW5nUHJvcGVydGllc2AuIFRoaXMgZW5zdXJlcyBzZXR0aW5nXG4gICAgICAgIC8vIGF0dHJpYnV0ZSArIHByb3BlcnR5IHJlZmxlY3RzIGNvcnJlY3RseS5cbiAgICAgICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdHJ1ZSAmJiB0aGlzLl9fcmVmbGVjdGluZ1Byb3BlcnR5ICE9PSBuYW1lKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX19yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19yZWZsZWN0aW5nUHJvcGVydGllcy5zZXQobmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFib3J0IHRoZSByZXF1ZXN0IGlmIHRoZSBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgY2hhbmdlZC5cbiAgICAgICAgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNVcGRhdGVQZW5kaW5nICYmIHNob3VsZFJlcXVlc3RVcGRhdGUpIHtcbiAgICAgIHRoaXMuX191cGRhdGVQcm9taXNlID0gdGhpcy5fX2VucXVldWVVcGRhdGUoKTtcbiAgICB9XG4gICAgLy8gTm90ZSwgc2luY2UgdGhpcyBubyBsb25nZXIgcmV0dXJucyBhIHByb21pc2UsIGluIGRldiBtb2RlIHdlIHJldHVybiBhXG4gICAgLy8gdGhlbmFibGUgd2hpY2ggd2FybnMgaWYgaXQncyBjYWxsZWQuXG4gICAgcmV0dXJuIERFVl9NT0RFXG4gICAgICA/IChyZXF1ZXN0VXBkYXRlVGhlbmFibGUodGhpcy5sb2NhbE5hbWUpIGFzIHVua25vd24gYXMgdm9pZClcbiAgICAgIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgdGhlIGVsZW1lbnQgdG8gYXN5bmNocm9ub3VzbHkgdXBkYXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBfX2VucXVldWVVcGRhdGUoKSB7XG4gICAgdGhpcy5pc1VwZGF0ZVBlbmRpbmcgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAvLyBFbnN1cmUgYW55IHByZXZpb3VzIHVwZGF0ZSBoYXMgcmVzb2x2ZWQgYmVmb3JlIHVwZGF0aW5nLlxuICAgICAgLy8gVGhpcyBgYXdhaXRgIGFsc28gZW5zdXJlcyB0aGF0IHByb3BlcnR5IGNoYW5nZXMgYXJlIGJhdGNoZWQuXG4gICAgICBhd2FpdCB0aGlzLl9fdXBkYXRlUHJvbWlzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBSZWZpcmUgYW55IHByZXZpb3VzIGVycm9ycyBhc3luYyBzbyB0aGV5IGRvIG5vdCBkaXNydXB0IHRoZSB1cGRhdGVcbiAgICAgIC8vIGN5Y2xlLiBFcnJvcnMgYXJlIHJlZmlyZWQgc28gZGV2ZWxvcGVycyBoYXZlIGEgY2hhbmNlIHRvIG9ic2VydmVcbiAgICAgIC8vIHRoZW0sIGFuZCB0aGlzIGNhbiBiZSBkb25lIGJ5IGltcGxlbWVudGluZ1xuICAgICAgLy8gYHdpbmRvdy5vbnVuaGFuZGxlZHJlamVjdGlvbmAuXG4gICAgICBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIC8vIElmIGBzY2hlZHVsZVVwZGF0ZWAgcmV0dXJucyBhIFByb21pc2UsIHdlIGF3YWl0IGl0LiBUaGlzIGlzIGRvbmUgdG9cbiAgICAvLyBlbmFibGUgY29vcmRpbmF0aW5nIHVwZGF0ZXMgd2l0aCBhIHNjaGVkdWxlci4gTm90ZSwgdGhlIHJlc3VsdCBpc1xuICAgIC8vIGNoZWNrZWQgdG8gYXZvaWQgZGVsYXlpbmcgYW4gYWRkaXRpb25hbCBtaWNyb3Rhc2sgdW5sZXNzIHdlIG5lZWQgdG8uXG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBhd2FpdCByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiAhdGhpcy5pc1VwZGF0ZVBlbmRpbmc7XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGVzIGFuIGVsZW1lbnQgdXBkYXRlLiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGVcbiAgICogdGltaW5nIG9mIHVwZGF0ZXMgYnkgcmV0dXJuaW5nIGEgUHJvbWlzZS4gVGhlIHVwZGF0ZSB3aWxsIGF3YWl0IHRoZVxuICAgKiByZXR1cm5lZCBQcm9taXNlLCBhbmQgeW91IHNob3VsZCByZXNvbHZlIHRoZSBQcm9taXNlIHRvIGFsbG93IHRoZSB1cGRhdGVcbiAgICogdG8gcHJvY2VlZC4gSWYgdGhpcyBtZXRob2QgaXMgb3ZlcnJpZGRlbiwgYHN1cGVyLnNjaGVkdWxlVXBkYXRlKClgXG4gICAqIG11c3QgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRvIHNjaGVkdWxlIHVwZGF0ZXMgdG8gb2NjdXIganVzdCBiZWZvcmUgdGhlIG5leHQgZnJhbWU6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIG92ZXJyaWRlIHByb3RlY3RlZCBhc3luYyBzY2hlZHVsZVVwZGF0ZSgpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICogICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc29sdmUoKSkpO1xuICAgKiAgIHN1cGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgc2NoZWR1bGVVcGRhdGUoKTogdm9pZCB8IFByb21pc2U8dW5rbm93bj4ge1xuICAgIHJldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbiBlbGVtZW50IHVwZGF0ZS4gTm90ZSwgaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBkdXJpbmcgdGhlXG4gICAqIHVwZGF0ZSwgYGZpcnN0VXBkYXRlZGAgYW5kIGB1cGRhdGVkYCB3aWxsIG5vdCBiZSBjYWxsZWQuXG4gICAqXG4gICAqIENhbGwgYHBlcmZvcm1VcGRhdGUoKWAgdG8gaW1tZWRpYXRlbHkgcHJvY2VzcyBhIHBlbmRpbmcgdXBkYXRlLiBUaGlzIHNob3VsZFxuICAgKiBnZW5lcmFsbHkgbm90IGJlIG5lZWRlZCwgYnV0IGl0IGNhbiBiZSBkb25lIGluIHJhcmUgY2FzZXMgd2hlbiB5b3UgbmVlZCB0b1xuICAgKiB1cGRhdGUgc3luY2hyb25vdXNseS5cbiAgICpcbiAgICogTm90ZTogVG8gZW5zdXJlIGBwZXJmb3JtVXBkYXRlKClgIHN5bmNocm9ub3VzbHkgY29tcGxldGVzIGEgcGVuZGluZyB1cGRhdGUsXG4gICAqIGl0IHNob3VsZCBub3QgYmUgb3ZlcnJpZGRlbi4gSW4gTGl0RWxlbWVudCAyLnggaXQgd2FzIHN1Z2dlc3RlZCB0byBvdmVycmlkZVxuICAgKiBgcGVyZm9ybVVwZGF0ZSgpYCB0byBhbHNvIGN1c3RvbWl6aW5nIHVwZGF0ZSBzY2hlZHVsaW5nLiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIG5vd1xuICAgKiBvdmVycmlkZSBgc2NoZWR1bGVVcGRhdGUoKWAuIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIExpdEVsZW1lbnQgMi54LFxuICAgKiBzY2hlZHVsaW5nIHVwZGF0ZXMgdmlhIGBwZXJmb3JtVXBkYXRlKClgIGNvbnRpbnVlcyB0byB3b3JrLCBidXQgd2lsbCBtYWtlXG4gICAqIGFsc28gY2FsbGluZyBgcGVyZm9ybVVwZGF0ZSgpYCB0byBzeW5jaHJvbm91c2x5IHByb2Nlc3MgdXBkYXRlcyBkaWZmaWN1bHQuXG4gICAqXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgcGVyZm9ybVVwZGF0ZSgpOiB2b2lkIHwgUHJvbWlzZTx1bmtub3duPiB7XG4gICAgLy8gQWJvcnQgYW55IHVwZGF0ZSBpZiBvbmUgaXMgbm90IHBlbmRpbmcgd2hlbiB0aGlzIGlzIGNhbGxlZC5cbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgYHBlcmZvcm1VcGRhdGVgIGlzIGNhbGxlZCBlYXJseSB0byBcImZsdXNoXCJcbiAgICAvLyB0aGUgdXBkYXRlLlxuICAgIGlmICghdGhpcy5pc1VwZGF0ZVBlbmRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdMb2dFdmVudD8uKHtraW5kOiAndXBkYXRlJ30pO1xuICAgIC8vIGNyZWF0ZSByZW5kZXJSb290IGJlZm9yZSBmaXJzdCB1cGRhdGUuXG4gICAgaWYgKCF0aGlzLmhhc1VwZGF0ZWQpIHtcbiAgICAgIC8vIFByb2R1Y2Ugd2FybmluZyBpZiBhbnkgY2xhc3MgcHJvcGVydGllcyBhcmUgc2hhZG93ZWQgYnkgY2xhc3MgZmllbGRzXG4gICAgICBpZiAoREVWX01PREUpIHtcbiAgICAgICAgY29uc3Qgc2hhZG93ZWRQcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAoXG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgUmVhY3RpdmVFbGVtZW50XG4gICAgICAgICkuX19yZWFjdGl2ZVByb3BlcnR5S2V5cz8uZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApICYmICF0aGlzLl9faW5zdGFuY2VQcm9wZXJ0aWVzPy5oYXMocCkpIHtcbiAgICAgICAgICAgIHNoYWRvd2VkUHJvcGVydGllcy5wdXNoKHAgYXMgc3RyaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2hhZG93ZWRQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgb24gZWxlbWVudCAke3RoaXMubG9jYWxOYW1lfSB3aWxsIG5vdCBgICtcbiAgICAgICAgICAgICAgYHRyaWdnZXIgdXBkYXRlcyBhcyBleHBlY3RlZCBiZWNhdXNlIHRoZXkgYXJlIHNldCB1c2luZyBjbGFzcyBgICtcbiAgICAgICAgICAgICAgYGZpZWxkczogJHtzaGFkb3dlZFByb3BlcnRpZXMuam9pbignLCAnKX0uIGAgK1xuICAgICAgICAgICAgICBgTmF0aXZlIGNsYXNzIGZpZWxkcyBhbmQgc29tZSBjb21waWxlZCBvdXRwdXQgd2lsbCBvdmVyd3JpdGUgYCArXG4gICAgICAgICAgICAgIGBhY2Nlc3NvcnMgdXNlZCBmb3IgZGV0ZWN0aW5nIGNoYW5nZXMuIFNlZSBgICtcbiAgICAgICAgICAgICAgYGh0dHBzOi8vbGl0LmRldi9tc2cvY2xhc3MtZmllbGQtc2hhZG93aW5nIGAgK1xuICAgICAgICAgICAgICBgZm9yIG1vcmUgaW5mb3JtYXRpb24uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTWl4aW4gaW5zdGFuY2UgcHJvcGVydGllcyBvbmNlLCBpZiB0aGV5IGV4aXN0LlxuICAgIGlmICh0aGlzLl9faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICB0aGlzLl9faW5zdGFuY2VQcm9wZXJ0aWVzIS5mb3JFYWNoKCh2LCBwKSA9PiAoKHRoaXMgYXMgYW55KVtwXSA9IHYpKTtcbiAgICAgIHRoaXMuX19pbnN0YW5jZVByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuXyRjaGFuZ2VkUHJvcGVydGllcztcbiAgICB0cnkge1xuICAgICAgc2hvdWxkVXBkYXRlID0gdGhpcy5zaG91bGRVcGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICB0aGlzLndpbGxVcGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLl9fY29udHJvbGxlcnM/LmZvckVhY2goKGMpID0+IGMuaG9zdFVwZGF0ZT8uKCkpO1xuICAgICAgICB0aGlzLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fbWFya1VwZGF0ZWQoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBQcmV2ZW50IGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgZnJvbSBydW5uaW5nIHdoZW4gdGhlcmUncyBhblxuICAgICAgLy8gdXBkYXRlIGV4Y2VwdGlvbi5cbiAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgLy8gRW5zdXJlIGVsZW1lbnQgY2FuIGFjY2VwdCBhZGRpdGlvbmFsIHVwZGF0ZXMgYWZ0ZXIgYW4gZXhjZXB0aW9uLlxuICAgICAgdGhpcy5fX21hcmtVcGRhdGVkKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICAvLyBUaGUgdXBkYXRlIGlzIG5vIGxvbmdlciBjb25zaWRlcmVkIHBlbmRpbmcgYW5kIGZ1cnRoZXIgdXBkYXRlcyBhcmUgbm93IGFsbG93ZWQuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy5fJGRpZFVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGB1cGRhdGUoKWAgdG8gY29tcHV0ZSB2YWx1ZXMgbmVlZGVkIGR1cmluZyB0aGUgdXBkYXRlLlxuICAgKlxuICAgKiBJbXBsZW1lbnQgYHdpbGxVcGRhdGVgIHRvIGNvbXB1dGUgcHJvcGVydHkgdmFsdWVzIHRoYXQgZGVwZW5kIG9uIG90aGVyXG4gICAqIHByb3BlcnRpZXMgYW5kIGFyZSB1c2VkIGluIHRoZSByZXN0IG9mIHRoZSB1cGRhdGUgcHJvY2Vzcy5cbiAgICpcbiAgICogYGBgdHNcbiAgICogd2lsbFVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcykge1xuICAgKiAgIC8vIG9ubHkgbmVlZCB0byBjaGVjayBjaGFuZ2VkIHByb3BlcnRpZXMgZm9yIGFuIGV4cGVuc2l2ZSBjb21wdXRhdGlvbi5cbiAgICogICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdmaXJzdE5hbWUnKSB8fCBjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2xhc3ROYW1lJykpIHtcbiAgICogICAgIHRoaXMuc2hhID0gY29tcHV0ZVNIQShgJHt0aGlzLmZpcnN0TmFtZX0gJHt0aGlzLmxhc3ROYW1lfWApO1xuICAgKiAgIH1cbiAgICogfVxuICAgKlxuICAgKiByZW5kZXIoKSB7XG4gICAqICAgcmV0dXJuIGh0bWxgU0hBOiAke3RoaXMuc2hhfWA7XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgd2lsbFVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKTogdm9pZCB7fVxuXG4gIC8vIE5vdGUsIHRoaXMgaXMgYW4gb3ZlcnJpZGUgcG9pbnQgZm9yIHBvbHlmaWxsLXN1cHBvcnQuXG4gIC8vIEBpbnRlcm5hbFxuICBfJGRpZFVwZGF0ZShjaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZXMpIHtcbiAgICB0aGlzLl9fY29udHJvbGxlcnM/LmZvckVhY2goKGMpID0+IGMuaG9zdFVwZGF0ZWQ/LigpKTtcbiAgICBpZiAoIXRoaXMuaGFzVXBkYXRlZCkge1xuICAgICAgdGhpcy5oYXNVcGRhdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICBpZiAoXG4gICAgICBERVZfTU9ERSAmJlxuICAgICAgdGhpcy5pc1VwZGF0ZVBlbmRpbmcgJiZcbiAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQpLmVuYWJsZWRXYXJuaW5ncyEuaW5kZXhPZihcbiAgICAgICAgJ2NoYW5nZS1pbi11cGRhdGUnXG4gICAgICApID49IDBcbiAgICApIHtcbiAgICAgIGlzc3VlV2FybmluZyhcbiAgICAgICAgJ2NoYW5nZS1pbi11cGRhdGUnLFxuICAgICAgICBgRWxlbWVudCAke3RoaXMubG9jYWxOYW1lfSBzY2hlZHVsZWQgYW4gdXBkYXRlIGAgK1xuICAgICAgICAgIGAoZ2VuZXJhbGx5IGJlY2F1c2UgYSBwcm9wZXJ0eSB3YXMgc2V0KSBgICtcbiAgICAgICAgICBgYWZ0ZXIgYW4gdXBkYXRlIGNvbXBsZXRlZCwgY2F1c2luZyBhIG5ldyB1cGRhdGUgdG8gYmUgc2NoZWR1bGVkLiBgICtcbiAgICAgICAgICBgVGhpcyBpcyBpbmVmZmljaWVudCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgdW5sZXNzIHRoZSBuZXh0IHVwZGF0ZSBgICtcbiAgICAgICAgICBgY2FuIG9ubHkgYmUgc2NoZWR1bGVkIGFzIGEgc2lkZSBlZmZlY3Qgb2YgdGhlIHByZXZpb3VzIHVwZGF0ZS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX19tYXJrVXBkYXRlZCgpIHtcbiAgICB0aGlzLl8kY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5pc1VwZGF0ZVBlbmRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGNvbXBsZXRlZCB1cGRhdGluZy5cbiAgICogVGhlIFByb21pc2UgdmFsdWUgaXMgYSBib29sZWFuIHRoYXQgaXMgYHRydWVgIGlmIHRoZSBlbGVtZW50IGNvbXBsZXRlZCB0aGVcbiAgICogdXBkYXRlIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS4gVGhlIFByb21pc2UgcmVzdWx0IGlzIGBmYWxzZWAgaWZcbiAgICogYSBwcm9wZXJ0eSB3YXMgc2V0IGluc2lkZSBgdXBkYXRlZCgpYC4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGFuXG4gICAqIGV4Y2VwdGlvbiB3YXMgdGhyb3duIGR1cmluZyB0aGUgdXBkYXRlLlxuICAgKlxuICAgKiBUbyBhd2FpdCBhZGRpdGlvbmFsIGFzeW5jaHJvbm91cyB3b3JrLCBvdmVycmlkZSB0aGUgYGdldFVwZGF0ZUNvbXBsZXRlYFxuICAgKiBtZXRob2QuIEZvciBleGFtcGxlLCBpdCBpcyBzb21ldGltZXMgdXNlZnVsIHRvIGF3YWl0IGEgcmVuZGVyZWQgZWxlbWVudFxuICAgKiBiZWZvcmUgZnVsZmlsbGluZyB0aGlzIFByb21pc2UuIFRvIGRvIHRoaXMsIGZpcnN0IGF3YWl0XG4gICAqIGBzdXBlci5nZXRVcGRhdGVDb21wbGV0ZSgpYCwgdGhlbiBhbnkgc3Vic2VxdWVudCBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybiBBIHByb21pc2Ugb2YgYSBib29sZWFuIHRoYXQgcmVzb2x2ZXMgdG8gdHJ1ZSBpZiB0aGUgdXBkYXRlIGNvbXBsZXRlZFxuICAgKiAgICAgd2l0aG91dCB0cmlnZ2VyaW5nIGFub3RoZXIgdXBkYXRlLlxuICAgKiBAY2F0ZWdvcnkgdXBkYXRlc1xuICAgKi9cbiAgZ2V0IHVwZGF0ZUNvbXBsZXRlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgcG9pbnQgZm9yIHRoZSBgdXBkYXRlQ29tcGxldGVgIHByb21pc2UuXG4gICAqXG4gICAqIEl0IGlzIG5vdCBzYWZlIHRvIG92ZXJyaWRlIHRoZSBgdXBkYXRlQ29tcGxldGVgIGdldHRlciBkaXJlY3RseSBkdWUgdG8gYVxuICAgKiBsaW1pdGF0aW9uIGluIFR5cGVTY3JpcHQgd2hpY2ggbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGNhbGwgYVxuICAgKiBzdXBlcmNsYXNzIGdldHRlciAoZS5nLiBgc3VwZXIudXBkYXRlQ29tcGxldGUudGhlbiguLi4pYCkgd2hlbiB0aGUgdGFyZ2V0XG4gICAqIGxhbmd1YWdlIGlzIEVTNSAoaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzgpLlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlbiBpbnN0ZWFkLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYGBgdHNcbiAgICogY2xhc3MgTXlFbGVtZW50IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAqICAgb3ZlcnJpZGUgYXN5bmMgZ2V0VXBkYXRlQ29tcGxldGUoKSB7XG4gICAqICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5nZXRVcGRhdGVDb21wbGV0ZSgpO1xuICAgKiAgICAgYXdhaXQgdGhpcy5fbXlDaGlsZC51cGRhdGVDb21wbGV0ZTtcbiAgICogICAgIHJldHVybiByZXN1bHQ7XG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSBvZiBhIGJvb2xlYW4gdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHRoZSB1cGRhdGUgY29tcGxldGVkXG4gICAqICAgICB3aXRob3V0IHRyaWdnZXJpbmcgYW5vdGhlciB1cGRhdGUuXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0VXBkYXRlQ29tcGxldGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX191cGRhdGVQcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IGB1cGRhdGUoKWAgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IHJlcXVlc3RzXG4gICAqIGFuIHVwZGF0ZS4gQnkgZGVmYXVsdCwgdGhpcyBtZXRob2QgYWx3YXlzIHJldHVybnMgYHRydWVgLCBidXQgdGhpcyBjYW4gYmVcbiAgICogY3VzdG9taXplZCB0byBjb250cm9sIHdoZW4gdG8gdXBkYXRlLlxuICAgKlxuICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgc2hvdWxkVXBkYXRlKF9jaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZXMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBlbGVtZW50LiBUaGlzIG1ldGhvZCByZWZsZWN0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYXR0cmlidXRlcy5cbiAgICogSXQgY2FuIGJlIG92ZXJyaWRkZW4gdG8gcmVuZGVyIGFuZCBrZWVwIHVwZGF0ZWQgZWxlbWVudCBET00uXG4gICAqIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyXG4gICAqIGFub3RoZXIgdXBkYXRlLlxuICAgKlxuICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlKF9jaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZXMpIHtcbiAgICBpZiAodGhpcy5fX3JlZmxlY3RpbmdQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvclxuICAgICAgLy8gbG9vcHMgZXhwZWN0aW5nIGFycmF5c1xuICAgICAgdGhpcy5fX3JlZmxlY3RpbmdQcm9wZXJ0aWVzLmZvckVhY2goKHYsIGspID0+XG4gICAgICAgIHRoaXMuX19wcm9wZXJ0eVRvQXR0cmlidXRlKGssIHRoaXNbayBhcyBrZXlvZiB0aGlzXSwgdilcbiAgICAgICk7XG4gICAgICB0aGlzLl9fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuX19tYXJrVXBkYXRlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbmV2ZXIgdGhlIGVsZW1lbnQgaXMgdXBkYXRlZC4gSW1wbGVtZW50IHRvIHBlcmZvcm1cbiAgICogcG9zdC11cGRhdGluZyB0YXNrcyB2aWEgRE9NIEFQSXMsIGZvciBleGFtcGxlLCBmb2N1c2luZyBhbiBlbGVtZW50LlxuICAgKlxuICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB0aGUgZWxlbWVudCB0byB1cGRhdGVcbiAgICogYWdhaW4gYWZ0ZXIgdGhpcyB1cGRhdGUgY3ljbGUgY29tcGxldGVzLlxuICAgKlxuICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqIEBjYXRlZ29yeSB1cGRhdGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7fVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGVsZW1lbnQgaXMgZmlyc3QgdXBkYXRlZC4gSW1wbGVtZW50IHRvIHBlcmZvcm0gb25lIHRpbWVcbiAgICogd29yayBvbiB0aGUgZWxlbWVudCBhZnRlciB1cGRhdGUuXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGZpcnN0VXBkYXRlZCgpIHtcbiAgICogICB0aGlzLnJlbmRlclJvb3QuZ2V0RWxlbWVudEJ5SWQoJ215LXRleHQtYXJlYScpLmZvY3VzKCk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCB0cmlnZ2VyIHRoZSBlbGVtZW50IHRvIHVwZGF0ZVxuICAgKiBhZ2FpbiBhZnRlciB0aGlzIHVwZGF0ZSBjeWNsZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICogQGNhdGVnb3J5IHVwZGF0ZXNcbiAgICovXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlcykge31cbn1cblxuLy8gQXBwbHkgcG9seWZpbGxzIGlmIGF2YWlsYWJsZVxucG9seWZpbGxTdXBwb3J0Py4oe1JlYWN0aXZlRWxlbWVudH0pO1xuXG4vLyBEZXYgbW9kZSB3YXJuaW5ncy4uLlxuaWYgKERFVl9NT0RFKSB7XG4gIC8vIERlZmF1bHQgd2FybmluZyBzZXQuXG4gIFJlYWN0aXZlRWxlbWVudC5lbmFibGVkV2FybmluZ3MgPSBbJ2NoYW5nZS1pbi11cGRhdGUnXTtcbiAgY29uc3QgZW5zdXJlT3duV2FybmluZ3MgPSBmdW5jdGlvbiAoY3RvcjogdHlwZW9mIFJlYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChcbiAgICAgICFjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2VuYWJsZWRXYXJuaW5ncycsIGN0b3IpKVxuICAgICkge1xuICAgICAgY3Rvci5lbmFibGVkV2FybmluZ3MgPSBjdG9yLmVuYWJsZWRXYXJuaW5ncyEuc2xpY2UoKTtcbiAgICB9XG4gIH07XG4gIFJlYWN0aXZlRWxlbWVudC5lbmFibGVXYXJuaW5nID0gZnVuY3Rpb24gKFxuICAgIHRoaXM6IHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQsXG4gICAgd2FybmluZzogV2FybmluZ0tpbmRcbiAgKSB7XG4gICAgZW5zdXJlT3duV2FybmluZ3ModGhpcyk7XG4gICAgaWYgKHRoaXMuZW5hYmxlZFdhcm5pbmdzIS5pbmRleE9mKHdhcm5pbmcpIDwgMCkge1xuICAgICAgdGhpcy5lbmFibGVkV2FybmluZ3MhLnB1c2god2FybmluZyk7XG4gICAgfVxuICB9O1xuICBSZWFjdGl2ZUVsZW1lbnQuZGlzYWJsZVdhcm5pbmcgPSBmdW5jdGlvbiAoXG4gICAgdGhpczogdHlwZW9mIFJlYWN0aXZlRWxlbWVudCxcbiAgICB3YXJuaW5nOiBXYXJuaW5nS2luZFxuICApIHtcbiAgICBlbnN1cmVPd25XYXJuaW5ncyh0aGlzKTtcbiAgICBjb25zdCBpID0gdGhpcy5lbmFibGVkV2FybmluZ3MhLmluZGV4T2Yod2FybmluZyk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5lbmFibGVkV2FybmluZ3MhLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgUmVhY3RpdmVFbGVtZW50IHVzYWdlLlxuKGdsb2JhbC5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyA/Pz0gW10pLnB1c2goJzEuNi4xJyk7XG5pZiAoREVWX01PREUgJiYgZ2xvYmFsLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zLmxlbmd0aCA+IDEpIHtcbiAgaXNzdWVXYXJuaW5nIShcbiAgICAnbXVsdGlwbGUtdmVyc2lvbnMnLFxuICAgIGBNdWx0aXBsZSB2ZXJzaW9ucyBvZiBMaXQgbG9hZGVkLiBMb2FkaW5nIG11bHRpcGxlIHZlcnNpb25zIGAgK1xuICAgICAgYGlzIG5vdCByZWNvbW1lbmRlZC5gXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbi8vIElNUE9SVEFOVDogdGhlc2UgaW1wb3J0cyBtdXN0IGJlIHR5cGUtb25seVxuaW1wb3J0IHR5cGUge0RpcmVjdGl2ZSwgRGlyZWN0aXZlUmVzdWx0LCBQYXJ0SW5mb30gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xuXG5jb25zdCBERVZfTU9ERSA9IHRydWU7XG5jb25zdCBFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MgPSB0cnVlO1xuY29uc3QgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggPSB0cnVlO1xuY29uc3QgTk9ERV9NT0RFID0gZmFsc2U7XG4vLyBVc2Ugd2luZG93IGZvciBicm93c2VyIGJ1aWxkcyBiZWNhdXNlIElFMTEgZG9lc24ndCBoYXZlIGdsb2JhbFRoaXMuXG5jb25zdCBnbG9iYWwgPSBOT0RFX01PREUgPyBnbG9iYWxUaGlzIDogd2luZG93O1xuXG4vKipcbiAqIENvbnRhaW5zIHR5cGVzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIHVuc3RhYmxlIGRlYnVnIEFQSS5cbiAqXG4gKiBFdmVyeXRoaW5nIGluIHRoaXMgQVBJIGlzIG5vdCBzdGFibGUgYW5kIG1heSBjaGFuZ2Ugb3IgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLFxuICogZXZlbiBvbiBwYXRjaCByZWxlYXNlcy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl0VW5zdGFibGUge1xuICAvKipcbiAgICogV2hlbiBMaXQgaXMgcnVubmluZyBpbiBkZXYgbW9kZSBhbmQgYHdpbmRvdy5lbWl0TGl0RGVidWdMb2dFdmVudHNgIGlzIHRydWUsXG4gICAqIHdlIHdpbGwgZW1pdCAnbGl0LWRlYnVnJyBldmVudHMgdG8gd2luZG93LCB3aXRoIGxpdmUgZGV0YWlscyBhYm91dCB0aGUgdXBkYXRlIGFuZCByZW5kZXJcbiAgICogbGlmZWN5Y2xlLiBUaGVzZSBjYW4gYmUgdXNlZnVsIGZvciB3cml0aW5nIGRlYnVnIHRvb2xpbmcgYW5kIHZpc3VhbGl6YXRpb25zLlxuICAgKlxuICAgKiBQbGVhc2UgYmUgYXdhcmUgdGhhdCBydW5uaW5nIHdpdGggd2luZG93LmVtaXRMaXREZWJ1Z0xvZ0V2ZW50cyBoYXMgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsXG4gICAqIG1ha2luZyBjZXJ0YWluIG9wZXJhdGlvbnMgdGhhdCBhcmUgbm9ybWFsbHkgdmVyeSBjaGVhcCAobGlrZSBhIG5vLW9wIHJlbmRlcikgbXVjaCBzbG93ZXIsXG4gICAqIGJlY2F1c2Ugd2UgbXVzdCBjb3B5IGRhdGEgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG4gIGV4cG9ydCBuYW1lc3BhY2UgRGVidWdMb2cge1xuICAgIGV4cG9ydCB0eXBlIEVudHJ5ID1cbiAgICAgIHwgVGVtcGxhdGVQcmVwXG4gICAgICB8IFRlbXBsYXRlSW5zdGFudGlhdGVkXG4gICAgICB8IFRlbXBsYXRlSW5zdGFudGlhdGVkQW5kVXBkYXRlZFxuICAgICAgfCBUZW1wbGF0ZVVwZGF0aW5nXG4gICAgICB8IEJlZ2luUmVuZGVyXG4gICAgICB8IEVuZFJlbmRlclxuICAgICAgfCBDb21taXRQYXJ0RW50cnlcbiAgICAgIHwgU2V0UGFydFZhbHVlO1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVQcmVwIHtcbiAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBwcmVwJztcbiAgICAgIHRlbXBsYXRlOiBUZW1wbGF0ZTtcbiAgICAgIHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5O1xuICAgICAgY2xvbmFibGVUZW1wbGF0ZTogSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgICAgIHBhcnRzOiBUZW1wbGF0ZVBhcnRbXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBCZWdpblJlbmRlciB7XG4gICAgICBraW5kOiAnYmVnaW4gcmVuZGVyJztcbiAgICAgIGlkOiBudW1iZXI7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50O1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIHBhcnQ6IENoaWxkUGFydCB8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBFbmRSZW5kZXIge1xuICAgICAga2luZDogJ2VuZCByZW5kZXInO1xuICAgICAgaWQ6IG51bWJlcjtcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnQ7XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgICAgcGFydDogQ2hpbGRQYXJ0O1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSW5zdGFudGlhdGVkIHtcbiAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBpbnN0YW50aWF0ZWQnO1xuICAgICAgdGVtcGxhdGU6IFRlbXBsYXRlIHwgQ29tcGlsZWRUZW1wbGF0ZTtcbiAgICAgIGluc3RhbmNlOiBUZW1wbGF0ZUluc3RhbmNlO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIGZyYWdtZW50OiBOb2RlO1xuICAgICAgcGFydHM6IEFycmF5PFBhcnQgfCB1bmRlZmluZWQ+O1xuICAgICAgdmFsdWVzOiB1bmtub3duW107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVJbnN0YW50aWF0ZWRBbmRVcGRhdGVkIHtcbiAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBpbnN0YW50aWF0ZWQgYW5kIHVwZGF0ZWQnO1xuICAgICAgdGVtcGxhdGU6IFRlbXBsYXRlIHwgQ29tcGlsZWRUZW1wbGF0ZTtcbiAgICAgIGluc3RhbmNlOiBUZW1wbGF0ZUluc3RhbmNlO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIGZyYWdtZW50OiBOb2RlO1xuICAgICAgcGFydHM6IEFycmF5PFBhcnQgfCB1bmRlZmluZWQ+O1xuICAgICAgdmFsdWVzOiB1bmtub3duW107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVVcGRhdGluZyB7XG4gICAgICBraW5kOiAndGVtcGxhdGUgdXBkYXRpbmcnO1xuICAgICAgdGVtcGxhdGU6IFRlbXBsYXRlIHwgQ29tcGlsZWRUZW1wbGF0ZTtcbiAgICAgIGluc3RhbmNlOiBUZW1wbGF0ZUluc3RhbmNlO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIHBhcnRzOiBBcnJheTxQYXJ0IHwgdW5kZWZpbmVkPjtcbiAgICAgIHZhbHVlczogdW5rbm93bltdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNldFBhcnRWYWx1ZSB7XG4gICAgICBraW5kOiAnc2V0IHBhcnQnO1xuICAgICAgcGFydDogUGFydDtcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgdmFsdWVJbmRleDogbnVtYmVyO1xuICAgICAgdmFsdWVzOiB1bmtub3duW107XG4gICAgICB0ZW1wbGF0ZUluc3RhbmNlOiBUZW1wbGF0ZUluc3RhbmNlO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENvbW1pdFBhcnRFbnRyeSA9XG4gICAgICB8IENvbW1pdE5vdGhpbmdUb0NoaWxkRW50cnlcbiAgICAgIHwgQ29tbWl0VGV4dFxuICAgICAgfCBDb21taXROb2RlXG4gICAgICB8IENvbW1pdEF0dHJpYnV0ZVxuICAgICAgfCBDb21taXRQcm9wZXJ0eVxuICAgICAgfCBDb21taXRCb29sZWFuQXR0cmlidXRlXG4gICAgICB8IENvbW1pdEV2ZW50TGlzdGVuZXJcbiAgICAgIHwgQ29tbWl0VG9FbGVtZW50QmluZGluZztcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWl0Tm90aGluZ1RvQ2hpbGRFbnRyeSB7XG4gICAgICBraW5kOiAnY29tbWl0IG5vdGhpbmcgdG8gY2hpbGQnO1xuICAgICAgc3RhcnQ6IENoaWxkTm9kZTtcbiAgICAgIGVuZDogQ2hpbGROb2RlIHwgbnVsbDtcbiAgICAgIHBhcmVudDogRGlzY29ubmVjdGFibGUgfCB1bmRlZmluZWQ7XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWl0VGV4dCB7XG4gICAgICBraW5kOiAnY29tbWl0IHRleHQnO1xuICAgICAgbm9kZTogVGV4dDtcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdE5vZGUge1xuICAgICAga2luZDogJ2NvbW1pdCBub2RlJztcbiAgICAgIHN0YXJ0OiBOb2RlO1xuICAgICAgcGFyZW50OiBEaXNjb25uZWN0YWJsZSB8IHVuZGVmaW5lZDtcbiAgICAgIHZhbHVlOiBOb2RlO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdEF0dHJpYnV0ZSB7XG4gICAgICBraW5kOiAnY29tbWl0IGF0dHJpYnV0ZSc7XG4gICAgICBlbGVtZW50OiBFbGVtZW50O1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgdmFsdWU6IHVua25vd247XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWl0UHJvcGVydHkge1xuICAgICAga2luZDogJ2NvbW1pdCBwcm9wZXJ0eSc7XG4gICAgICBlbGVtZW50OiBFbGVtZW50O1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgdmFsdWU6IHVua25vd247XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWl0Qm9vbGVhbkF0dHJpYnV0ZSB7XG4gICAgICBraW5kOiAnY29tbWl0IGJvb2xlYW4gYXR0cmlidXRlJztcbiAgICAgIGVsZW1lbnQ6IEVsZW1lbnQ7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICB2YWx1ZTogYm9vbGVhbjtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21taXRFdmVudExpc3RlbmVyIHtcbiAgICAgIGtpbmQ6ICdjb21taXQgZXZlbnQgbGlzdGVuZXInO1xuICAgICAgZWxlbWVudDogRWxlbWVudDtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgb2xkTGlzdGVuZXI6IHVua25vd247XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgICAgLy8gVHJ1ZSBpZiB3ZSdyZSByZW1vdmluZyB0aGUgb2xkIGV2ZW50IGxpc3RlbmVyIChlLmcuIGJlY2F1c2Ugc2V0dGluZ3MgY2hhbmdlZCwgb3IgdmFsdWUgaXMgbm90aGluZylcbiAgICAgIHJlbW92ZUxpc3RlbmVyOiBib29sZWFuO1xuICAgICAgLy8gVHJ1ZSBpZiB3ZSdyZSBhZGRpbmcgYSBuZXcgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYmVjYXVzZSBmaXJzdCByZW5kZXIsIG9yIHNldHRpbmdzIGNoYW5nZWQpXG4gICAgICBhZGRMaXN0ZW5lcjogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdFRvRWxlbWVudEJpbmRpbmcge1xuICAgICAga2luZDogJ2NvbW1pdCB0byBlbGVtZW50IGJpbmRpbmcnO1xuICAgICAgZWxlbWVudDogRWxlbWVudDtcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIERlYnVnTG9nZ2luZ1dpbmRvdyB7XG4gIC8vIEV2ZW4gaW4gZGV2IG1vZGUsIHdlIGdlbmVyYWxseSBkb24ndCB3YW50IHRvIGVtaXQgdGhlc2UgZXZlbnRzLCBhcyB0aGF0J3NcbiAgLy8gYW5vdGhlciBsZXZlbCBvZiBjb3N0LCBzbyBvbmx5IGVtaXQgdGhlbSB3aGVuIERFVl9NT0RFIGlzIHRydWUgX2FuZF8gd2hlblxuICAvLyB3aW5kb3cuZW1pdExpdERlYnVnRXZlbnRzIGlzIHRydWUuXG4gIGVtaXRMaXREZWJ1Z0xvZ0V2ZW50cz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVXNlZnVsIGZvciB2aXN1YWxpemluZyBhbmQgbG9nZ2luZyBpbnNpZ2h0cyBpbnRvIHdoYXQgdGhlIExpdCB0ZW1wbGF0ZSBzeXN0ZW0gaXMgZG9pbmcuXG4gKlxuICogQ29tcGlsZWQgb3V0IG9mIHByb2QgbW9kZSBidWlsZHMuXG4gKi9cbmNvbnN0IGRlYnVnTG9nRXZlbnQgPSBERVZfTU9ERVxuICA/IChldmVudDogTGl0VW5zdGFibGUuRGVidWdMb2cuRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IHNob3VsZEVtaXQgPSAoZ2xvYmFsIGFzIHVua25vd24gYXMgRGVidWdMb2dnaW5nV2luZG93KVxuICAgICAgICAuZW1pdExpdERlYnVnTG9nRXZlbnRzO1xuICAgICAgaWYgKCFzaG91bGRFbWl0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQ8TGl0VW5zdGFibGUuRGVidWdMb2cuRW50cnk+KCdsaXQtZGVidWcnLCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICA6IHVuZGVmaW5lZDtcbi8vIFVzZWQgZm9yIGNvbm5lY3RpbmcgYmVnaW5SZW5kZXIgYW5kIGVuZFJlbmRlciBldmVudHMgd2hlbiB0aGVyZSBhcmUgbmVzdGVkXG4vLyByZW5kZXJzIHdoZW4gZXJyb3JzIGFyZSB0aHJvd24gcHJldmVudGluZyBhbiBlbmRSZW5kZXIgZXZlbnQgZnJvbSBiZWluZ1xuLy8gY2FsbGVkLlxubGV0IGRlYnVnTG9nUmVuZGVySWQgPSAwO1xuXG5sZXQgaXNzdWVXYXJuaW5nOiAoY29kZTogc3RyaW5nLCB3YXJuaW5nOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmlmIChERVZfTU9ERSkge1xuICBnbG9iYWwubGl0SXNzdWVkV2FybmluZ3MgPz89IG5ldyBTZXQoKTtcblxuICAvLyBJc3N1ZSBhIHdhcm5pbmcsIGlmIHdlIGhhdmVuJ3QgYWxyZWFkeS5cbiAgaXNzdWVXYXJuaW5nID0gKGNvZGU6IHN0cmluZywgd2FybmluZzogc3RyaW5nKSA9PiB7XG4gICAgd2FybmluZyArPSBjb2RlXG4gICAgICA/IGAgU2VlIGh0dHBzOi8vbGl0LmRldi9tc2cvJHtjb2RlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gXG4gICAgICA6ICcnO1xuICAgIGlmICghZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzIS5oYXMod2FybmluZykpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICAgIGdsb2JhbC5saXRJc3N1ZWRXYXJuaW5ncyEuYWRkKHdhcm5pbmcpO1xuICAgIH1cbiAgfTtcblxuICBpc3N1ZVdhcm5pbmcoXG4gICAgJ2Rldi1tb2RlJyxcbiAgICBgTGl0IGlzIGluIGRldiBtb2RlLiBOb3QgcmVjb21tZW5kZWQgZm9yIHByb2R1Y3Rpb24hYFxuICApO1xufVxuXG5jb25zdCB3cmFwID1cbiAgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggJiZcbiAgZ2xvYmFsLlNoYWR5RE9NPy5pblVzZSAmJlxuICBnbG9iYWwuU2hhZHlET00/Lm5vUGF0Y2ggPT09IHRydWVcbiAgICA/IGdsb2JhbC5TaGFkeURPTSEud3JhcFxuICAgIDogKG5vZGU6IE5vZGUpID0+IG5vZGU7XG5cbmNvbnN0IHRydXN0ZWRUeXBlcyA9IChnbG9iYWwgYXMgdW5rbm93biBhcyBQYXJ0aWFsPFdpbmRvdz4pLnRydXN0ZWRUeXBlcztcblxuLyoqXG4gKiBPdXIgVHJ1c3RlZFR5cGVQb2xpY3kgZm9yIEhUTUwgd2hpY2ggaXMgZGVjbGFyZWQgdXNpbmcgdGhlIGh0bWwgdGVtcGxhdGVcbiAqIHRhZyBmdW5jdGlvbi5cbiAqXG4gKiBUaGF0IEhUTUwgaXMgYSBkZXZlbG9wZXItYXV0aG9yZWQgY29uc3RhbnQsIGFuZCBpcyBwYXJzZWQgd2l0aCBpbm5lckhUTUxcbiAqIGJlZm9yZSBhbnkgdW50cnVzdGVkIGV4cHJlc3Npb25zIGhhdmUgYmVlbiBtaXhlZCBpbi4gVGhlcmVmb3IgaXQgaXNcbiAqIGNvbnNpZGVyZWQgc2FmZSBieSBjb25zdHJ1Y3Rpb24uXG4gKi9cbmNvbnN0IHBvbGljeSA9IHRydXN0ZWRUeXBlc1xuICA/IHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3koJ2xpdC1odG1sJywge1xuICAgICAgY3JlYXRlSFRNTDogKHMpID0+IHMsXG4gICAgfSlcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVXNlZCB0byBzYW5pdGl6ZSBhbnkgdmFsdWUgYmVmb3JlIGl0IGlzIHdyaXR0ZW4gaW50byB0aGUgRE9NLiBUaGlzIGNhbiBiZVxuICogdXNlZCB0byBpbXBsZW1lbnQgYSBzZWN1cml0eSBwb2xpY3kgb2YgYWxsb3dlZCBhbmQgZGlzYWxsb3dlZCB2YWx1ZXMgaW5cbiAqIG9yZGVyIHRvIHByZXZlbnQgWFNTIGF0dGFja3MuXG4gKlxuICogT25lIHdheSBvZiB1c2luZyB0aGlzIGNhbGxiYWNrIHdvdWxkIGJlIHRvIGNoZWNrIGF0dHJpYnV0ZXMgYW5kIHByb3BlcnRpZXNcbiAqIGFnYWluc3QgYSBsaXN0IG9mIGhpZ2ggcmlzayBmaWVsZHMsIGFuZCByZXF1aXJlIHRoYXQgdmFsdWVzIHdyaXR0ZW4gdG8gc3VjaFxuICogZmllbGRzIGJlIGluc3RhbmNlcyBvZiBhIGNsYXNzIHdoaWNoIGlzIHNhZmUgYnkgY29uc3RydWN0aW9uLiBDbG9zdXJlJ3MgU2FmZVxuICogSFRNTCBUeXBlcyBpcyBvbmUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyB0ZWNobmlxdWUgKFxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9zYWZlLWh0bWwtdHlwZXMvYmxvYi9tYXN0ZXIvZG9jL3NhZmVodG1sLXR5cGVzLm1kKS5cbiAqIFRoZSBUcnVzdGVkVHlwZXMgcG9seWZpbGwgaW4gQVBJLW9ubHkgbW9kZSBjb3VsZCBhbHNvIGJlIHVzZWQgYXMgYSBiYXNpc1xuICogZm9yIHRoaXMgdGVjaG5pcXVlIChodHRwczovL2dpdGh1Yi5jb20vV0lDRy90cnVzdGVkLXR5cGVzKS5cbiAqXG4gKiBAcGFyYW0gbm9kZSBUaGUgSFRNTCBub2RlICh1c3VhbGx5IGVpdGhlciBhICN0ZXh0IG5vZGUgb3IgYW4gRWxlbWVudCkgdGhhdFxuICogICAgIGlzIGJlaW5nIHdyaXR0ZW4gdG8uIE5vdGUgdGhhdCB0aGlzIGlzIGp1c3QgYW4gZXhlbXBsYXIgbm9kZSwgdGhlIHdyaXRlXG4gKiAgICAgbWF5IHRha2UgcGxhY2UgYWdhaW5zdCBhbm90aGVyIGluc3RhbmNlIG9mIHRoZSBzYW1lIGNsYXNzIG9mIG5vZGUuXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgKGZvciBleGFtcGxlLCAnaHJlZicpLlxuICogQHBhcmFtIHR5cGUgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHdyaXRlIHRoYXQncyBhYm91dCB0byBiZSBwZXJmb3JtZWQgd2lsbFxuICogICAgIGJlIHRvIGEgcHJvcGVydHkgb3IgYSBub2RlLlxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBzYW5pdGl6ZSB0aGlzIGNsYXNzIG9mIHdyaXRlcy5cbiAqL1xuZXhwb3J0IHR5cGUgU2FuaXRpemVyRmFjdG9yeSA9IChcbiAgbm9kZTogTm9kZSxcbiAgbmFtZTogc3RyaW5nLFxuICB0eXBlOiAncHJvcGVydHknIHwgJ2F0dHJpYnV0ZSdcbikgPT4gVmFsdWVTYW5pdGl6ZXI7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB3aGljaCBjYW4gc2FuaXRpemUgdmFsdWVzIHRoYXQgd2lsbCBiZSB3cml0dGVuIHRvIGEgc3BlY2lmaWMga2luZFxuICogb2YgRE9NIHNpbmsuXG4gKlxuICogU2VlIFNhbml0aXplckZhY3RvcnkuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzYW5pdGl6ZS4gV2lsbCBiZSB0aGUgYWN0dWFsIHZhbHVlIHBhc3NlZCBpbnRvXG4gKiAgICAgdGhlIGxpdC1odG1sIHRlbXBsYXRlIGxpdGVyYWwsIHNvIHRoaXMgY291bGQgYmUgb2YgYW55IHR5cGUuXG4gKiBAcmV0dXJuIFRoZSB2YWx1ZSB0byB3cml0ZSB0byB0aGUgRE9NLiBVc3VhbGx5IHRoZSBzYW1lIGFzIHRoZSBpbnB1dCB2YWx1ZSxcbiAqICAgICB1bmxlc3Mgc2FuaXRpemF0aW9uIGlzIG5lZWRlZC5cbiAqL1xuZXhwb3J0IHR5cGUgVmFsdWVTYW5pdGl6ZXIgPSAodmFsdWU6IHVua25vd24pID0+IHVua25vd247XG5cbmNvbnN0IGlkZW50aXR5RnVuY3Rpb246IFZhbHVlU2FuaXRpemVyID0gKHZhbHVlOiB1bmtub3duKSA9PiB2YWx1ZTtcbmNvbnN0IG5vb3BTYW5pdGl6ZXI6IFNhbml0aXplckZhY3RvcnkgPSAoXG4gIF9ub2RlOiBOb2RlLFxuICBfbmFtZTogc3RyaW5nLFxuICBfdHlwZTogJ3Byb3BlcnR5JyB8ICdhdHRyaWJ1dGUnXG4pID0+IGlkZW50aXR5RnVuY3Rpb247XG5cbi8qKiBTZXRzIHRoZSBnbG9iYWwgc2FuaXRpemVyIGZhY3RvcnkuICovXG5jb25zdCBzZXRTYW5pdGl6ZXIgPSAobmV3U2FuaXRpemVyOiBTYW5pdGl6ZXJGYWN0b3J5KSA9PiB7XG4gIGlmICghRU5BQkxFX0VYVFJBX1NFQ1VSSVRZX0hPT0tTKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgIT09IG5vb3BTYW5pdGl6ZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQXR0ZW1wdGVkIHRvIG92ZXJ3cml0ZSBleGlzdGluZyBsaXQtaHRtbCBzZWN1cml0eSBwb2xpY3kuYCArXG4gICAgICAgIGAgc2V0U2FuaXRpemVET01WYWx1ZUZhY3Rvcnkgc2hvdWxkIGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuYFxuICAgICk7XG4gIH1cbiAgc2FuaXRpemVyRmFjdG9yeUludGVybmFsID0gbmV3U2FuaXRpemVyO1xufTtcblxuLyoqXG4gKiBPbmx5IHVzZWQgaW4gaW50ZXJuYWwgdGVzdHMsIG5vdCBhIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkuXG4gKi9cbmNvbnN0IF90ZXN0T25seUNsZWFyU2FuaXRpemVyRmFjdG9yeURvTm90Q2FsbE9yRWxzZSA9ICgpID0+IHtcbiAgc2FuaXRpemVyRmFjdG9yeUludGVybmFsID0gbm9vcFNhbml0aXplcjtcbn07XG5cbmNvbnN0IGNyZWF0ZVNhbml0aXplcjogU2FuaXRpemVyRmFjdG9yeSA9IChub2RlLCBuYW1lLCB0eXBlKSA9PiB7XG4gIHJldHVybiBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwobm9kZSwgbmFtZSwgdHlwZSk7XG59O1xuXG4vLyBBZGRlZCB0byBhbiBhdHRyaWJ1dGUgbmFtZSB0byBtYXJrIHRoZSBhdHRyaWJ1dGUgYXMgYm91bmQgc28gd2UgY2FuIGZpbmRcbi8vIGl0IGVhc2lseS5cbmNvbnN0IGJvdW5kQXR0cmlidXRlU3VmZml4ID0gJyRsaXQkJztcblxuLy8gVGhpcyBtYXJrZXIgaXMgdXNlZCBpbiBtYW55IHN5bnRhY3RpYyBwb3NpdGlvbnMgaW4gSFRNTCwgc28gaXQgbXVzdCBiZVxuLy8gYSB2YWxpZCBlbGVtZW50IG5hbWUgYW5kIGF0dHJpYnV0ZSBuYW1lLiBXZSBkb24ndCBzdXBwb3J0IGR5bmFtaWMgbmFtZXMgKHlldClcbi8vIGJ1dCB0aGlzIGF0IGxlYXN0IGVuc3VyZXMgdGhhdCB0aGUgcGFyc2UgdHJlZSBpcyBjbG9zZXIgdG8gdGhlIHRlbXBsYXRlXG4vLyBpbnRlbnRpb24uXG5jb25zdCBtYXJrZXIgPSBgbGl0JCR7U3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDkpfSRgO1xuXG4vLyBTdHJpbmcgdXNlZCB0byB0ZWxsIGlmIGEgY29tbWVudCBpcyBhIG1hcmtlciBjb21tZW50XG5jb25zdCBtYXJrZXJNYXRjaCA9ICc/JyArIG1hcmtlcjtcblxuLy8gVGV4dCB1c2VkIHRvIGluc2VydCBhIGNvbW1lbnQgbWFya2VyIG5vZGUuIFdlIHVzZSBwcm9jZXNzaW5nIGluc3RydWN0aW9uXG4vLyBzeW50YXggYmVjYXVzZSBpdCdzIHNsaWdodGx5IHNtYWxsZXIsIGJ1dCBwYXJzZXMgYXMgYSBjb21tZW50IG5vZGUuXG5jb25zdCBub2RlTWFya2VyID0gYDwke21hcmtlck1hdGNofT5gO1xuXG5jb25zdCBkID1cbiAgTk9ERV9NT0RFICYmIGdsb2JhbC5kb2N1bWVudCA9PT0gdW5kZWZpbmVkXG4gICAgPyAoe1xuICAgICAgICBjcmVhdGVUcmVlV2Fsa2VyKCkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgIH0gYXMgdW5rbm93biBhcyBEb2N1bWVudClcbiAgICA6IGRvY3VtZW50O1xuXG4vLyBDcmVhdGVzIGEgZHluYW1pYyBtYXJrZXIuIFdlIG5ldmVyIGhhdmUgdG8gc2VhcmNoIGZvciB0aGVzZSBpbiB0aGUgRE9NLlxuY29uc3QgY3JlYXRlTWFya2VyID0gKHYgPSAnJykgPT4gZC5jcmVhdGVDb21tZW50KHYpO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlb2Ytb3BlcmF0b3JcbnR5cGUgUHJpbWl0aXZlID0gbnVsbCB8IHVuZGVmaW5lZCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBzeW1ib2wgfCBiaWdpbnQ7XG5jb25zdCBpc1ByaW1pdGl2ZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFByaW1pdGl2ZSA9PlxuICB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZSAhPSAnZnVuY3Rpb24nKTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEl0ZXJhYmxlPHVua25vd24+ID0+XG4gIGlzQXJyYXkodmFsdWUpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHR5cGVvZiAodmFsdWUgYXMgYW55KT8uW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG5cbmNvbnN0IFNQQUNFX0NIQVIgPSBgWyBcXHRcXG5cXGZcXHJdYDtcbmNvbnN0IEFUVFJfVkFMVUVfQ0hBUiA9IGBbXiBcXHRcXG5cXGZcXHJcIidcXGA8Pj1dYDtcbmNvbnN0IE5BTUVfQ0hBUiA9IGBbXlxcXFxzXCInPj0vXWA7XG5cbi8vIFRoZXNlIHJlZ2V4ZXMgcmVwcmVzZW50IHRoZSBmaXZlIHBhcnNpbmcgc3RhdGVzIHRoYXQgd2UgY2FyZSBhYm91dCBpbiB0aGVcbi8vIFRlbXBsYXRlJ3MgSFRNTCBzY2FubmVyLiBUaGV5IG1hdGNoIHRoZSAqZW5kKiBvZiB0aGUgc3RhdGUgdGhleSdyZSBuYW1lZFxuLy8gYWZ0ZXIuXG4vLyBEZXBlbmRpbmcgb24gdGhlIG1hdGNoLCB3ZSB0cmFuc2l0aW9uIHRvIGEgbmV3IHN0YXRlLiBJZiB0aGVyZSdzIG5vIG1hdGNoLFxuLy8gd2Ugc3RheSBpbiB0aGUgc2FtZSBzdGF0ZS5cbi8vIE5vdGUgdGhhdCB0aGUgcmVnZXhlcyBhcmUgc3RhdGVmdWwuIFdlIHV0aWxpemUgbGFzdEluZGV4IGFuZCBzeW5jIGl0XG4vLyBhY3Jvc3MgdGhlIG11bHRpcGxlIHJlZ2V4ZXMgdXNlZC4gSW4gYWRkaXRpb24gdG8gdGhlIGZpdmUgcmVnZXhlcyBiZWxvd1xuLy8gd2UgYWxzbyBkeW5hbWljYWxseSBjcmVhdGUgYSByZWdleCB0byBmaW5kIHRoZSBtYXRjaGluZyBlbmQgdGFncyBmb3IgcmF3XG4vLyB0ZXh0IGVsZW1lbnRzLlxuXG4vKipcbiAqIEVuZCBvZiB0ZXh0IGlzOiBgPGAgZm9sbG93ZWQgYnk6XG4gKiAgIChjb21tZW50IHN0YXJ0KSBvciAodGFnKSBvciAoZHluYW1pYyB0YWcgYmluZGluZylcbiAqL1xuY29uc3QgdGV4dEVuZFJlZ2V4ID0gLzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nO1xuY29uc3QgQ09NTUVOVF9TVEFSVCA9IDE7XG5jb25zdCBUQUdfTkFNRSA9IDI7XG5jb25zdCBEWU5BTUlDX1RBR19OQU1FID0gMztcblxuY29uc3QgY29tbWVudEVuZFJlZ2V4ID0gLy0tPi9nO1xuLyoqXG4gKiBDb21tZW50cyBub3Qgc3RhcnRlZCB3aXRoIDwhLS0sIGxpa2UgPC97LCBjYW4gYmUgZW5kZWQgYnkgYSBzaW5nbGUgYD5gXG4gKi9cbmNvbnN0IGNvbW1lbnQyRW5kUmVnZXggPSAvPi9nO1xuXG4vKipcbiAqIFRoZSB0YWdFbmQgcmVnZXggbWF0Y2hlcyB0aGUgZW5kIG9mIHRoZSBcImluc2lkZSBhbiBvcGVuaW5nXCIgdGFnIHN5bnRheFxuICogcG9zaXRpb24uIEl0IGVpdGhlciBtYXRjaGVzIGEgYD5gLCBhbiBhdHRyaWJ1dGUtbGlrZSBzZXF1ZW5jZSwgb3IgdGhlIGVuZFxuICogb2YgdGhlIHN0cmluZyBhZnRlciBhIHNwYWNlIChhdHRyaWJ1dGUtbmFtZSBwb3NpdGlvbiBlbmRpbmcpLlxuICpcbiAqIFNlZSBhdHRyaWJ1dGVzIGluIHRoZSBIVE1MIHNwZWM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudHMtYXR0cmlidXRlc1xuICpcbiAqIFwiIFxcdFxcblxcZlxcclwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZVxuICpcbiAqIFNvIGFuIGF0dHJpYnV0ZSBpczpcbiAqICAqIFRoZSBuYW1lOiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBhIHdoaXRlc3BhY2UgY2hhcmFjdGVyLCAoXCIpLCAoJyksIFwiPlwiLFxuICogICAgXCI9XCIsIG9yIFwiL1wiLiBOb3RlOiB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBIVE1MIHNwZWMgd2hpY2ggYWxzbyBleGNsdWRlcyBjb250cm9sIGNoYXJhY3RlcnMuXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnkgXCI9XCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieTpcbiAqICAgICogQW55IGNoYXJhY3RlciBleGNlcHQgc3BhY2UsICgnKSwgKFwiKSwgXCI8XCIsIFwiPlwiLCBcIj1cIiwgKGApLCBvclxuICogICAgKiAoXCIpIHRoZW4gYW55IG5vbi0oXCIpLCBvclxuICogICAgKiAoJykgdGhlbiBhbnkgbm9uLSgnKVxuICovXG5jb25zdCB0YWdFbmRSZWdleCA9IG5ldyBSZWdFeHAoXG4gIGA+fCR7U1BBQ0VfQ0hBUn0oPzooJHtOQU1FX0NIQVJ9KykoJHtTUEFDRV9DSEFSfSo9JHtTUEFDRV9DSEFSfSooPzoke0FUVFJfVkFMVUVfQ0hBUn18KFwifCcpfCkpfCQpYCxcbiAgJ2cnXG4pO1xuY29uc3QgRU5USVJFX01BVENIID0gMDtcbmNvbnN0IEFUVFJJQlVURV9OQU1FID0gMTtcbmNvbnN0IFNQQUNFU19BTkRfRVFVQUxTID0gMjtcbmNvbnN0IFFVT1RFX0NIQVIgPSAzO1xuXG5jb25zdCBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCA9IC8nL2c7XG5jb25zdCBkb3VibGVRdW90ZUF0dHJFbmRSZWdleCA9IC9cIi9nO1xuLyoqXG4gKiBNYXRjaGVzIHRoZSByYXcgdGV4dCBlbGVtZW50cy5cbiAqXG4gKiBDb21tZW50cyBhcmUgbm90IHBhcnNlZCB3aXRoaW4gcmF3IHRleHQgZWxlbWVudHMsIHNvIHdlIG5lZWQgdG8gc2VhcmNoIHRoZWlyXG4gKiB0ZXh0IGNvbnRlbnQgZm9yIG1hcmtlciBzdHJpbmdzLlxuICovXG5jb25zdCByYXdUZXh0RWxlbWVudCA9IC9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaTtcblxuLyoqIFRlbXBsYXRlUmVzdWx0IHR5cGVzICovXG5jb25zdCBIVE1MX1JFU1VMVCA9IDE7XG5jb25zdCBTVkdfUkVTVUxUID0gMjtcblxudHlwZSBSZXN1bHRUeXBlID0gdHlwZW9mIEhUTUxfUkVTVUxUIHwgdHlwZW9mIFNWR19SRVNVTFQ7XG5cbi8vIFRlbXBsYXRlUGFydCB0eXBlc1xuLy8gSU1QT1JUQU5UOiB0aGVzZSBtdXN0IG1hdGNoIHRoZSB2YWx1ZXMgaW4gUGFydFR5cGVcbmNvbnN0IEFUVFJJQlVURV9QQVJUID0gMTtcbmNvbnN0IENISUxEX1BBUlQgPSAyO1xuY29uc3QgUFJPUEVSVFlfUEFSVCA9IDM7XG5jb25zdCBCT09MRUFOX0FUVFJJQlVURV9QQVJUID0gNDtcbmNvbnN0IEVWRU5UX1BBUlQgPSA1O1xuY29uc3QgRUxFTUVOVF9QQVJUID0gNjtcbmNvbnN0IENPTU1FTlRfUEFSVCA9IDc7XG5cbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIHRoZSB0ZW1wbGF0ZSB0YWcgZnVuY3Rpb25zLCB7QGxpbmtjb2RlIGh0bWx9IGFuZFxuICoge0BsaW5rY29kZSBzdmd9LlxuICpcbiAqIEEgYFRlbXBsYXRlUmVzdWx0YCBvYmplY3QgaG9sZHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhIHRlbXBsYXRlXG4gKiBleHByZXNzaW9uIHJlcXVpcmVkIHRvIHJlbmRlciBpdDogdGhlIHRlbXBsYXRlIHN0cmluZ3MsIGV4cHJlc3Npb24gdmFsdWVzLFxuICogYW5kIHR5cGUgb2YgdGVtcGxhdGUgKGh0bWwgb3Igc3ZnKS5cbiAqXG4gKiBgVGVtcGxhdGVSZXN1bHRgIG9iamVjdHMgZG8gbm90IGNyZWF0ZSBhbnkgRE9NIG9uIHRoZWlyIG93bi4gVG8gY3JlYXRlIG9yXG4gKiB1cGRhdGUgRE9NIHlvdSBuZWVkIHRvIHJlbmRlciB0aGUgYFRlbXBsYXRlUmVzdWx0YC4gU2VlXG4gKiBbUmVuZGVyaW5nXShodHRwczovL2xpdC5kZXYvZG9jcy9jb21wb25lbnRzL3JlbmRlcmluZykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICovXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVJlc3VsdDxUIGV4dGVuZHMgUmVzdWx0VHlwZSA9IFJlc3VsdFR5cGU+ID0ge1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICBbJ18kbGl0VHlwZSQnXTogVDtcbiAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXk7XG4gIHZhbHVlczogdW5rbm93bltdO1xufTtcblxuZXhwb3J0IHR5cGUgSFRNTFRlbXBsYXRlUmVzdWx0ID0gVGVtcGxhdGVSZXN1bHQ8dHlwZW9mIEhUTUxfUkVTVUxUPjtcblxuZXhwb3J0IHR5cGUgU1ZHVGVtcGxhdGVSZXN1bHQgPSBUZW1wbGF0ZVJlc3VsdDx0eXBlb2YgU1ZHX1JFU1VMVD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCB7XG4gIC8vIFRoaXMgaXMgYSBmYWN0b3J5IGluIG9yZGVyIHRvIG1ha2UgdGVtcGxhdGUgaW5pdGlhbGl6YXRpb24gbGF6eVxuICAvLyBhbmQgYWxsb3cgU2hhZHlSZW5kZXJPcHRpb25zIHNjb3BlIHRvIGJlIHBhc3NlZCBpbi5cbiAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgWydfJGxpdFR5cGUkJ106IENvbXBpbGVkVGVtcGxhdGU7XG4gIHZhbHVlczogdW5rbm93bltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkVGVtcGxhdGUgZXh0ZW5kcyBPbWl0PFRlbXBsYXRlLCAnZWwnPiB7XG4gIC8vIGVsIGlzIG92ZXJyaWRkZW4gdG8gYmUgb3B0aW9uYWwuIFdlIGluaXRpYWxpemUgaXQgb24gZmlyc3QgcmVuZGVyXG4gIGVsPzogSFRNTFRlbXBsYXRlRWxlbWVudDtcblxuICAvLyBUaGUgcHJlcGFyZWQgSFRNTCBzdHJpbmcgdG8gY3JlYXRlIGEgdGVtcGxhdGUgZWxlbWVudCBmcm9tLlxuICBoOiBUcnVzdGVkSFRNTDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBUZW1wbGF0ZVJlc3VsdCB3aXRoXG4gKiB0aGUgZ2l2ZW4gcmVzdWx0IHR5cGUuXG4gKi9cbmNvbnN0IHRhZyA9XG4gIDxUIGV4dGVuZHMgUmVzdWx0VHlwZT4odHlwZTogVCkgPT5cbiAgKHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi52YWx1ZXM6IHVua25vd25bXSk6IFRlbXBsYXRlUmVzdWx0PFQ+ID0+IHtcbiAgICAvLyBXYXJuIGFnYWluc3QgdGVtcGxhdGVzIG9jdGFsIGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAvLyBXZSBkbyB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gaW4gcmVuZGVyIHNvIHRoYXQgdGhlIHdhcm5pbmcgaXMgY2xvc2VyIHRvIHRoZVxuICAgIC8vIHRlbXBsYXRlIGRlZmluaXRpb24uXG4gICAgaWYgKERFVl9NT0RFICYmIHN0cmluZ3Muc29tZSgocykgPT4gcyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU29tZSB0ZW1wbGF0ZSBzdHJpbmdzIGFyZSB1bmRlZmluZWQuXFxuJyArXG4gICAgICAgICAgJ1RoaXMgaXMgcHJvYmFibHkgY2F1c2VkIGJ5IGlsbGVnYWwgb2N0YWwgZXNjYXBlIHNlcXVlbmNlcy4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICAgIFsnXyRsaXRUeXBlJCddOiB0eXBlLFxuICAgICAgc3RyaW5ncyxcbiAgICAgIHZhbHVlcyxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIEhUTUwgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBoZWFkZXIgPSAodGl0bGU6IHN0cmluZykgPT4gaHRtbGA8aDE+JHt0aXRsZX08L2gxPmA7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYGh0bWxgIHRhZyByZXR1cm5zIGEgZGVzY3JpcHRpb24gb2YgdGhlIERPTSB0byByZW5kZXIgYXMgYSB2YWx1ZS4gSXQgaXNcbiAqIGxhenksIG1lYW5pbmcgbm8gd29yayBpcyBkb25lIHVudGlsIHRoZSB0ZW1wbGF0ZSBpcyByZW5kZXJlZC4gV2hlbiByZW5kZXJpbmcsXG4gKiBpZiBhIHRlbXBsYXRlIGNvbWVzIGZyb20gdGhlIHNhbWUgZXhwcmVzc2lvbiBhcyBhIHByZXZpb3VzbHkgcmVuZGVyZWQgcmVzdWx0LFxuICogaXQncyBlZmZpY2llbnRseSB1cGRhdGVkIGluc3RlYWQgb2YgcmVwbGFjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gdGFnKEhUTUxfUkVTVUxUKTtcblxuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgZnJhZ21lbnQgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCByZWN0ID0gc3ZnYDxyZWN0IHdpZHRoPVwiMTBcIiBoZWlnaHQ9XCIxMFwiPjwvcmVjdD5gO1xuICpcbiAqIGNvbnN0IG15SW1hZ2UgPSBodG1sYFxuICogICA8c3ZnIHZpZXdCb3g9XCIwIDAgMTAgMTBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gKiAgICAgJHtyZWN0fVxuICogICA8L3N2Zz5gO1xuICogYGBgXG4gKlxuICogVGhlIGBzdmdgICp0YWcgZnVuY3Rpb24qIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIFNWRyBmcmFnbWVudHMsIG9yIGVsZW1lbnRzXG4gKiB0aGF0IHdvdWxkIGJlIGNvbnRhaW5lZCAqKmluc2lkZSoqIGFuIGA8c3ZnPmAgSFRNTCBlbGVtZW50LiBBIGNvbW1vbiBlcnJvciBpc1xuICogcGxhY2luZyBhbiBgPHN2Zz5gICplbGVtZW50KiBpbiBhIHRlbXBsYXRlIHRhZ2dlZCB3aXRoIHRoZSBgc3ZnYCB0YWdcbiAqIGZ1bmN0aW9uLiBUaGUgYDxzdmc+YCBlbGVtZW50IGlzIGFuIEhUTUwgZWxlbWVudCBhbmQgc2hvdWxkIGJlIHVzZWQgd2l0aGluIGFcbiAqIHRlbXBsYXRlIHRhZ2dlZCB3aXRoIHRoZSB7QGxpbmtjb2RlIGh0bWx9IHRhZyBmdW5jdGlvbi5cbiAqXG4gKiBJbiBMaXRFbGVtZW50IHVzYWdlLCBpdCdzIGludmFsaWQgdG8gcmV0dXJuIGFuIFNWRyBmcmFnbWVudCBmcm9tIHRoZVxuICogYHJlbmRlcigpYCBtZXRob2QsIGFzIHRoZSBTVkcgZnJhZ21lbnQgd2lsbCBiZSBjb250YWluZWQgd2l0aGluIHRoZSBlbGVtZW50J3NcbiAqIHNoYWRvdyByb290IGFuZCB0aHVzIGNhbm5vdCBiZSB1c2VkIHdpdGhpbiBhbiBgPHN2Zz5gIEhUTUwgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IHN2ZyA9IHRhZyhTVkdfUkVTVUxUKTtcblxuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyB0aGF0IGEgdmFsdWUgd2FzIGhhbmRsZWQgYnkgYSBkaXJlY3RpdmUgYW5kXG4gKiBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vQ2hhbmdlID0gU3ltYm9sLmZvcignbGl0LW5vQ2hhbmdlJyk7XG5cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgYSBDaGlsZFBhcnQgdG8gZnVsbHkgY2xlYXIgaXRzIGNvbnRlbnQuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGJ1dHRvbiA9IGh0bWxgJHtcbiAqICB1c2VyLmlzQWRtaW5cbiAqICAgID8gaHRtbGA8YnV0dG9uPkRFTEVURTwvYnV0dG9uPmBcbiAqICAgIDogbm90aGluZ1xuICogfWA7XG4gKiBgYGBcbiAqXG4gKiBQcmVmZXIgdXNpbmcgYG5vdGhpbmdgIG92ZXIgb3RoZXIgZmFsc3kgdmFsdWVzIGFzIGl0IHByb3ZpZGVzIGEgY29uc2lzdGVudFxuICogYmVoYXZpb3IgYmV0d2VlbiB2YXJpb3VzIGV4cHJlc3Npb24gYmluZGluZyBjb250ZXh0cy5cbiAqXG4gKiBJbiBjaGlsZCBleHByZXNzaW9ucywgYHVuZGVmaW5lZGAsIGBudWxsYCwgYCcnYCwgYW5kIGBub3RoaW5nYCBhbGwgYmVoYXZlIHRoZVxuICogc2FtZSBhbmQgcmVuZGVyIG5vIG5vZGVzLiBJbiBhdHRyaWJ1dGUgZXhwcmVzc2lvbnMsIGBub3RoaW5nYCBfcmVtb3Zlc18gdGhlXG4gKiBhdHRyaWJ1dGUsIHdoaWxlIGB1bmRlZmluZWRgIGFuZCBgbnVsbGAgd2lsbCByZW5kZXIgYW4gZW1wdHkgc3RyaW5nLiBJblxuICogcHJvcGVydHkgZXhwcmVzc2lvbnMgYG5vdGhpbmdgIGJlY29tZXMgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBjb25zdCBub3RoaW5nID0gU3ltYm9sLmZvcignbGl0LW5vdGhpbmcnKTtcblxuLyoqXG4gKiBUaGUgY2FjaGUgb2YgcHJlcGFyZWQgdGVtcGxhdGVzLCBrZXllZCBieSB0aGUgdGFnZ2VkIFRlbXBsYXRlU3RyaW5nc0FycmF5XG4gKiBhbmQgX25vdF8gYWNjb3VudGluZyBmb3IgdGhlIHNwZWNpZmljIHRlbXBsYXRlIHRhZyB1c2VkLiBUaGlzIG1lYW5zIHRoYXRcbiAqIHRlbXBsYXRlIHRhZ3MgY2Fubm90IGJlIGR5bmFtaWMgLSB0aGUgbXVzdCBzdGF0aWNhbGx5IGJlIG9uZSBvZiBodG1sLCBzdmcsXG4gKiBvciBhdHRyLiBUaGlzIHJlc3RyaWN0aW9uIHNpbXBsaWZpZXMgdGhlIGNhY2hlIGxvb2t1cCwgd2hpY2ggaXMgb24gdGhlIGhvdFxuICogcGF0aCBmb3IgcmVuZGVyaW5nLlxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlID0gbmV3IFdlYWtNYXA8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlPigpO1xuXG4vKipcbiAqIE9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMgZm9yIGNvbnRyb2xsaW5nIGxpdC1odG1sIHJlbmRlcmluZy4gTm90ZSB0aGF0XG4gKiB3aGlsZSBgcmVuZGVyYCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIGBjb250YWluZXJgIChhbmRcbiAqIGByZW5kZXJCZWZvcmVgIHJlZmVyZW5jZSBub2RlKSB0byBlZmZpY2llbnRseSB1cGRhdGUgdGhlIHJlbmRlcmVkIGNvbnRlbnQsXG4gKiBvbmx5IHRoZSBvcHRpb25zIHBhc3NlZCBpbiBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciBhcmUgcmVzcGVjdGVkIGR1cmluZ1xuICogdGhlIGxpZmV0aW1lIG9mIHJlbmRlcnMgdG8gdGhhdCB1bmlxdWUgYGNvbnRhaW5lcmAgKyBgcmVuZGVyQmVmb3JlYFxuICogY29tYmluYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdG8gdXNlIGFzIHRoZSBgdGhpc2AgdmFsdWUgZm9yIGV2ZW50IGxpc3RlbmVycy4gSXQncyBvZnRlblxuICAgKiB1c2VmdWwgdG8gc2V0IHRoaXMgdG8gdGhlIGhvc3QgY29tcG9uZW50IHJlbmRlcmluZyBhIHRlbXBsYXRlLlxuICAgKi9cbiAgaG9zdD86IG9iamVjdDtcbiAgLyoqXG4gICAqIEEgRE9NIG5vZGUgYmVmb3JlIHdoaWNoIHRvIHJlbmRlciBjb250ZW50IGluIHRoZSBjb250YWluZXIuXG4gICAqL1xuICByZW5kZXJCZWZvcmU/OiBDaGlsZE5vZGUgfCBudWxsO1xuICAvKipcbiAgICogTm9kZSB1c2VkIGZvciBjbG9uaW5nIHRoZSB0ZW1wbGF0ZSAoYGltcG9ydE5vZGVgIHdpbGwgYmUgY2FsbGVkIG9uIHRoaXNcbiAgICogbm9kZSkuIFRoaXMgY29udHJvbHMgdGhlIGBvd25lckRvY3VtZW50YCBvZiB0aGUgcmVuZGVyZWQgRE9NLCBhbG9uZyB3aXRoXG4gICAqIGFueSBpbmhlcml0ZWQgY29udGV4dC4gRGVmYXVsdHMgdG8gdGhlIGdsb2JhbCBgZG9jdW1lbnRgLlxuICAgKi9cbiAgY3JlYXRpb25TY29wZT86IHtpbXBvcnROb2RlKG5vZGU6IE5vZGUsIGRlZXA/OiBib29sZWFuKTogTm9kZX07XG4gIC8qKlxuICAgKiBUaGUgaW5pdGlhbCBjb25uZWN0ZWQgc3RhdGUgZm9yIHRoZSB0b3AtbGV2ZWwgcGFydCBiZWluZyByZW5kZXJlZC4gSWYgbm9cbiAgICogYGlzQ29ubmVjdGVkYCBvcHRpb24gaXMgc2V0LCBgQXN5bmNEaXJlY3RpdmVgcyB3aWxsIGJlIGNvbm5lY3RlZCBieVxuICAgKiBkZWZhdWx0LiBTZXQgdG8gYGZhbHNlYCBpZiB0aGUgaW5pdGlhbCByZW5kZXIgb2NjdXJzIGluIGEgZGlzY29ubmVjdGVkIHRyZWVcbiAgICogYW5kIGBBc3luY0RpcmVjdGl2ZWBzIHNob3VsZCBzZWUgYGlzQ29ubmVjdGVkID09PSBmYWxzZWAgZm9yIHRoZWlyIGluaXRpYWxcbiAgICogcmVuZGVyLiBUaGUgYHBhcnQuc2V0Q29ubmVjdGVkKClgIG1ldGhvZCBtdXN0IGJlIHVzZWQgc3Vic2VxdWVudCB0byBpbml0aWFsXG4gICAqIHJlbmRlciB0byBjaGFuZ2UgdGhlIGNvbm5lY3RlZCBzdGF0ZSBvZiB0aGUgcGFydC5cbiAgICovXG4gIGlzQ29ubmVjdGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3Qgd2Fsa2VyID0gZC5jcmVhdGVUcmVlV2Fsa2VyKFxuICBkLFxuICAxMjkgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR9ICovLFxuICBudWxsLFxuICBmYWxzZVxuKTtcblxubGV0IHNhbml0aXplckZhY3RvcnlJbnRlcm5hbDogU2FuaXRpemVyRmFjdG9yeSA9IG5vb3BTYW5pdGl6ZXI7XG5cbi8vXG4vLyBDbGFzc2VzIG9ubHkgYmVsb3cgaGVyZSwgY29uc3QgdmFyaWFibGUgZGVjbGFyYXRpb25zIG9ubHkgYWJvdmUgaGVyZS4uLlxuLy9cbi8vIEtlZXBpbmcgdmFyaWFibGUgZGVjbGFyYXRpb25zIGFuZCBjbGFzc2VzIHRvZ2V0aGVyIGltcHJvdmVzIG1pbmlmaWNhdGlvbi5cbi8vIEludGVyZmFjZXMgYW5kIHR5cGUgYWxpYXNlcyBjYW4gYmUgaW50ZXJsZWF2ZWQgZnJlZWx5LlxuLy9cblxuLy8gVHlwZSBmb3IgY2xhc3NlcyB0aGF0IGhhdmUgYSBgX2RpcmVjdGl2ZWAgb3IgYF9kaXJlY3RpdmVzW11gIGZpZWxkLCB1c2VkIGJ5XG4vLyBgcmVzb2x2ZURpcmVjdGl2ZWBcbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0aXZlUGFyZW50IHtcbiAgXyRwYXJlbnQ/OiBEaXJlY3RpdmVQYXJlbnQ7XG4gIF8kaXNDb25uZWN0ZWQ6IGJvb2xlYW47XG4gIF9fZGlyZWN0aXZlPzogRGlyZWN0aXZlO1xuICBfX2RpcmVjdGl2ZXM/OiBBcnJheTxEaXJlY3RpdmUgfCB1bmRlZmluZWQ+O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gSFRNTCBzdHJpbmcgZm9yIHRoZSBnaXZlbiBUZW1wbGF0ZVN0cmluZ3NBcnJheSBhbmQgcmVzdWx0IHR5cGVcbiAqIChIVE1MIG9yIFNWRyksIGFsb25nIHdpdGggdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpblxuICogdGVtcGxhdGUgb3JkZXIuIFRoZSBIVE1MIGNvbnRhaW5zIGNvbW1lbnQgbWFya2VycyBkZW5vdGluZyB0aGUgYENoaWxkUGFydGBzXG4gKiBhbmQgc3VmZml4ZXMgb24gYm91bmQgYXR0cmlidXRlcyBkZW5vdGluZyB0aGUgYEF0dHJpYnV0ZVBhcnRzYC5cbiAqXG4gKiBAcGFyYW0gc3RyaW5ncyB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XG4gKiBAcGFyYW0gdHlwZSBIVE1MIG9yIFNWR1xuICogQHJldHVybiBBcnJheSBjb250YWluaW5nIGBbaHRtbCwgYXR0ck5hbWVzXWAgKGFycmF5IHJldHVybmVkIGZvciB0ZXJzZW5lc3MsXG4gKiAgICAgdG8gYXZvaWQgb2JqZWN0IGZpZWxkcyBzaW5jZSB0aGlzIGNvZGUgaXMgc2hhcmVkIHdpdGggbm9uLW1pbmlmaWVkIFNTUlxuICogICAgIGNvZGUpXG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlSHRtbCA9IChcbiAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksXG4gIHR5cGU6IFJlc3VsdFR5cGVcbik6IFtUcnVzdGVkSFRNTCwgQXJyYXk8c3RyaW5nIHwgdW5kZWZpbmVkPl0gPT4ge1xuICAvLyBJbnNlcnQgbWFrZXJzIGludG8gdGhlIHRlbXBsYXRlIEhUTUwgdG8gcmVwcmVzZW50IHRoZSBwb3NpdGlvbiBvZlxuICAvLyBiaW5kaW5ncy4gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzdHJpbmdzIHRvIGRldGVybWluZSB0aGVcbiAgLy8gc3ludGFjdGljIHBvc2l0aW9uIG9mIHRoZSBiaW5kaW5ncy4gVGhleSBjYW4gYmUgaW4gdGV4dCBwb3NpdGlvbiwgd2hlcmVcbiAgLy8gd2UgaW5zZXJ0IGFuIEhUTUwgY29tbWVudCwgYXR0cmlidXRlIHZhbHVlIHBvc2l0aW9uLCB3aGVyZSB3ZSBpbnNlcnQgYVxuICAvLyBzZW50aW5lbCBzdHJpbmcgYW5kIHJlLXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSwgb3IgaW5zaWRlIGEgdGFnIHdoZXJlXG4gIC8vIHdlIGluc2VydCB0aGUgc2VudGluZWwgc3RyaW5nLlxuICBjb25zdCBsID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAvLyBTdG9yZXMgdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpbiB0aGUgb3JkZXIgb2YgdGhlaXJcbiAgLy8gcGFydHMuIEVsZW1lbnRQYXJ0cyBhcmUgYWxzbyByZWZsZWN0ZWQgaW4gdGhpcyBhcnJheSBhcyB1bmRlZmluZWRcbiAgLy8gcmF0aGVyIHRoYW4gYSBzdHJpbmcsIHRvIGRpc2FtYmlndWF0ZSBmcm9tIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgY29uc3QgYXR0ck5hbWVzOiBBcnJheTxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gW107XG4gIGxldCBodG1sID0gdHlwZSA9PT0gU1ZHX1JFU1VMVCA/ICc8c3ZnPicgOiAnJztcblxuICAvLyBXaGVuIHdlJ3JlIGluc2lkZSBhIHJhdyB0ZXh0IHRhZyAobm90IGl0J3MgdGV4dCBjb250ZW50KSwgdGhlIHJlZ2V4XG4gIC8vIHdpbGwgc3RpbGwgYmUgdGFnUmVnZXggc28gd2UgY2FuIGZpbmQgYXR0cmlidXRlcywgYnV0IHdpbGwgc3dpdGNoIHRvXG4gIC8vIHRoaXMgcmVnZXggd2hlbiB0aGUgdGFnIGVuZHMuXG4gIGxldCByYXdUZXh0RW5kUmVnZXg6IFJlZ0V4cCB8IHVuZGVmaW5lZDtcblxuICAvLyBUaGUgY3VycmVudCBwYXJzaW5nIHN0YXRlLCByZXByZXNlbnRlZCBhcyBhIHJlZmVyZW5jZSB0byBvbmUgb2YgdGhlXG4gIC8vIHJlZ2V4ZXNcbiAgbGV0IHJlZ2V4ID0gdGV4dEVuZFJlZ2V4O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgcyA9IHN0cmluZ3NbaV07XG4gICAgLy8gVGhlIGluZGV4IG9mIHRoZSBlbmQgb2YgdGhlIGxhc3QgYXR0cmlidXRlIG5hbWUuIFdoZW4gdGhpcyBpc1xuICAgIC8vIHBvc2l0aXZlIGF0IGVuZCBvZiBhIHN0cmluZywgaXQgbWVhbnMgd2UncmUgaW4gYW4gYXR0cmlidXRlIHZhbHVlXG4gICAgLy8gcG9zaXRpb24gYW5kIG5lZWQgdG8gcmV3cml0ZSB0aGUgYXR0cmlidXRlIG5hbWUuXG4gICAgLy8gV2UgYWxzbyB1c2UgYSBzcGVjaWFsIHZhbHVlIG9mIC0yIHRvIGluZGljYXRlIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAvLyB0aGUgZW5kIG9mIGEgc3RyaW5nIGluIGF0dHJpYnV0ZSBuYW1lIHBvc2l0aW9uLlxuICAgIGxldCBhdHRyTmFtZUVuZEluZGV4ID0gLTE7XG4gICAgbGV0IGF0dHJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgbGV0IG1hdGNoITogUmVnRXhwRXhlY0FycmF5IHwgbnVsbDtcblxuICAgIC8vIFRoZSBjb25kaXRpb25zIGluIHRoaXMgbG9vcCBoYW5kbGUgdGhlIGN1cnJlbnQgcGFyc2Ugc3RhdGUsIGFuZCB0aGVcbiAgICAvLyBhc3NpZ25tZW50cyB0byB0aGUgYHJlZ2V4YCB2YXJpYWJsZSBhcmUgdGhlIHN0YXRlIHRyYW5zaXRpb25zLlxuICAgIHdoaWxlIChsYXN0SW5kZXggPCBzLmxlbmd0aCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHdlIHN0YXJ0IHNlYXJjaGluZyBmcm9tIHdoZXJlIHdlIHByZXZpb3VzbHkgbGVmdCBvZmZcbiAgICAgIHJlZ2V4Lmxhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhzKTtcbiAgICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxhc3RJbmRleCA9IHJlZ2V4Lmxhc3RJbmRleDtcbiAgICAgIGlmIChyZWdleCA9PT0gdGV4dEVuZFJlZ2V4KSB7XG4gICAgICAgIGlmIChtYXRjaFtDT01NRU5UX1NUQVJUXSA9PT0gJyEtLScpIHtcbiAgICAgICAgICByZWdleCA9IGNvbW1lbnRFbmRSZWdleDtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaFtDT01NRU5UX1NUQVJUXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gV2Ugc3RhcnRlZCBhIHdlaXJkIGNvbW1lbnQsIGxpa2UgPC97XG4gICAgICAgICAgcmVnZXggPSBjb21tZW50MkVuZFJlZ2V4O1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoW1RBR19OQU1FXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJhd1RleHRFbGVtZW50LnRlc3QobWF0Y2hbVEFHX05BTUVdKSkge1xuICAgICAgICAgICAgLy8gUmVjb3JkIGlmIHdlIGVuY291bnRlciBhIHJhdy10ZXh0IGVsZW1lbnQuIFdlJ2xsIHN3aXRjaCB0b1xuICAgICAgICAgICAgLy8gdGhpcyByZWdleCBhdCB0aGUgZW5kIG9mIHRoZSB0YWcuXG4gICAgICAgICAgICByYXdUZXh0RW5kUmVnZXggPSBuZXcgUmVnRXhwKGA8LyR7bWF0Y2hbVEFHX05BTUVdfWAsICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbRFlOQU1JQ19UQUdfTkFNRV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnQmluZGluZ3MgaW4gdGFnIG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHN0YXRpYyB0ZW1wbGF0ZXMgaW5zdGVhZC4gJyArXG4gICAgICAgICAgICAgICAgJ1NlZSBodHRwczovL2xpdC5kZXYvZG9jcy90ZW1wbGF0ZXMvZXhwcmVzc2lvbnMvI3N0YXRpYy1leHByZXNzaW9ucydcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVnZXggPT09IHRhZ0VuZFJlZ2V4KSB7XG4gICAgICAgIGlmIChtYXRjaFtFTlRJUkVfTUFUQ0hdID09PSAnPicpIHtcbiAgICAgICAgICAvLyBFbmQgb2YgYSB0YWcuIElmIHdlIGhhZCBzdGFydGVkIGEgcmF3LXRleHQgZWxlbWVudCwgdXNlIHRoYXRcbiAgICAgICAgICAvLyByZWdleFxuICAgICAgICAgIHJlZ2V4ID0gcmF3VGV4dEVuZFJlZ2V4ID8/IHRleHRFbmRSZWdleDtcbiAgICAgICAgICAvLyBXZSBtYXkgYmUgZW5kaW5nIGFuIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSwgc28gbWFrZSBzdXJlIHdlXG4gICAgICAgICAgLy8gY2xlYXIgYW55IHBlbmRpbmcgYXR0ck5hbWVFbmRJbmRleFxuICAgICAgICAgIGF0dHJOYW1lRW5kSW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaFtBVFRSSUJVVEVfTkFNRV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIEF0dHJpYnV0ZSBuYW1lIHBvc2l0aW9uXG4gICAgICAgICAgYXR0ck5hbWVFbmRJbmRleCA9IC0yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0dHJOYW1lRW5kSW5kZXggPSByZWdleC5sYXN0SW5kZXggLSBtYXRjaFtTUEFDRVNfQU5EX0VRVUFMU10ubGVuZ3RoO1xuICAgICAgICAgIGF0dHJOYW1lID0gbWF0Y2hbQVRUUklCVVRFX05BTUVdO1xuICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgIG1hdGNoW1FVT1RFX0NIQVJdID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB0YWdFbmRSZWdleFxuICAgICAgICAgICAgICA6IG1hdGNoW1FVT1RFX0NIQVJdID09PSAnXCInXG4gICAgICAgICAgICAgID8gZG91YmxlUXVvdGVBdHRyRW5kUmVnZXhcbiAgICAgICAgICAgICAgOiBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcmVnZXggPT09IGRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4IHx8XG4gICAgICAgIHJlZ2V4ID09PSBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleFxuICAgICAgKSB7XG4gICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2V4ID09PSBjb21tZW50RW5kUmVnZXggfHwgcmVnZXggPT09IGNvbW1lbnQyRW5kUmVnZXgpIHtcbiAgICAgICAgcmVnZXggPSB0ZXh0RW5kUmVnZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3Qgb25lIG9mIHRoZSBmaXZlIHN0YXRlIHJlZ2V4ZXMsIHNvIGl0IG11c3QgYmUgdGhlIGR5bmFtaWNhbGx5XG4gICAgICAgIC8vIGNyZWF0ZWQgcmF3IHRleHQgcmVnZXggYW5kIHdlJ3JlIGF0IHRoZSBjbG9zZSBvZiB0aGF0IGVsZW1lbnQuXG4gICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgIHJhd1RleHRFbmRSZWdleCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoREVWX01PREUpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBhdHRyTmFtZUVuZEluZGV4LCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGRcbiAgICAgIC8vIHJld3JpdGUgdGhlIGF0dHJpYnV0ZSBuYW1lLCBhc3NlcnQgdGhhdCB3ZSdyZSBpbiBhIHZhbGlkIGF0dHJpYnV0ZVxuICAgICAgLy8gcG9zaXRpb24gLSBlaXRoZXIgaW4gYSB0YWcsIG9yIGEgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgIGNvbnNvbGUuYXNzZXJ0KFxuICAgICAgICBhdHRyTmFtZUVuZEluZGV4ID09PSAtMSB8fFxuICAgICAgICAgIHJlZ2V4ID09PSB0YWdFbmRSZWdleCB8fFxuICAgICAgICAgIHJlZ2V4ID09PSBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCB8fFxuICAgICAgICAgIHJlZ2V4ID09PSBkb3VibGVRdW90ZUF0dHJFbmRSZWdleCxcbiAgICAgICAgJ3VuZXhwZWN0ZWQgcGFyc2Ugc3RhdGUgQidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBmb3VyIGNhc2VzOlxuICAgIC8vICAxLiBXZSdyZSBpbiB0ZXh0IHBvc2l0aW9uLCBhbmQgbm90IGluIGEgcmF3IHRleHQgZWxlbWVudFxuICAgIC8vICAgICAocmVnZXggPT09IHRleHRFbmRSZWdleCk6IGluc2VydCBhIGNvbW1lbnQgbWFya2VyLlxuICAgIC8vICAyLiBXZSBoYXZlIGEgbm9uLW5lZ2F0aXZlIGF0dHJOYW1lRW5kSW5kZXggd2hpY2ggbWVhbnMgd2UgbmVlZCB0b1xuICAgIC8vICAgICByZXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSB0byBhZGQgYSBib3VuZCBhdHRyaWJ1dGUgc3VmZml4LlxuICAgIC8vICAzLiBXZSdyZSBhdCB0aGUgbm9uLWZpcnN0IGJpbmRpbmcgaW4gYSBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZSwgdXNlIGFcbiAgICAvLyAgICAgcGxhaW4gbWFya2VyLlxuICAgIC8vICA0LiBXZSdyZSBzb21ld2hlcmUgZWxzZSBpbnNpZGUgdGhlIHRhZy4gSWYgd2UncmUgaW4gYXR0cmlidXRlIG5hbWVcbiAgICAvLyAgICAgcG9zaXRpb24gKGF0dHJOYW1lRW5kSW5kZXggPT09IC0yKSwgYWRkIGEgc2VxdWVudGlhbCBzdWZmaXggdG9cbiAgICAvLyAgICAgZ2VuZXJhdGUgYSB1bmlxdWUgYXR0cmlidXRlIG5hbWUuXG5cbiAgICAvLyBEZXRlY3QgYSBiaW5kaW5nIG5leHQgdG8gc2VsZi1jbG9zaW5nIHRhZyBlbmQgYW5kIGluc2VydCBhIHNwYWNlIHRvXG4gICAgLy8gc2VwYXJhdGUgdGhlIG1hcmtlciBmcm9tIHRoZSB0YWcgZW5kOlxuICAgIGNvbnN0IGVuZCA9XG4gICAgICByZWdleCA9PT0gdGFnRW5kUmVnZXggJiYgc3RyaW5nc1tpICsgMV0uc3RhcnRzV2l0aCgnLz4nKSA/ICcgJyA6ICcnO1xuICAgIGh0bWwgKz1cbiAgICAgIHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXhcbiAgICAgICAgPyBzICsgbm9kZU1hcmtlclxuICAgICAgICA6IGF0dHJOYW1lRW5kSW5kZXggPj0gMFxuICAgICAgICA/IChhdHRyTmFtZXMucHVzaChhdHRyTmFtZSEpLFxuICAgICAgICAgIHMuc2xpY2UoMCwgYXR0ck5hbWVFbmRJbmRleCkgK1xuICAgICAgICAgICAgYm91bmRBdHRyaWJ1dGVTdWZmaXggK1xuICAgICAgICAgICAgcy5zbGljZShhdHRyTmFtZUVuZEluZGV4KSkgK1xuICAgICAgICAgIG1hcmtlciArXG4gICAgICAgICAgZW5kXG4gICAgICAgIDogcyArXG4gICAgICAgICAgbWFya2VyICtcbiAgICAgICAgICAoYXR0ck5hbWVFbmRJbmRleCA9PT0gLTIgPyAoYXR0ck5hbWVzLnB1c2godW5kZWZpbmVkKSwgaSkgOiBlbmQpO1xuICB9XG5cbiAgY29uc3QgaHRtbFJlc3VsdDogc3RyaW5nIHwgVHJ1c3RlZEhUTUwgPVxuICAgIGh0bWwgKyAoc3RyaW5nc1tsXSB8fCAnPD8+JykgKyAodHlwZSA9PT0gU1ZHX1JFU1VMVCA/ICc8L3N2Zz4nIDogJycpO1xuXG4gIC8vIEEgc2VjdXJpdHkgY2hlY2sgdG8gcHJldmVudCBzcG9vZmluZyBvZiBMaXQgdGVtcGxhdGUgcmVzdWx0cy5cbiAgLy8gSW4gdGhlIGZ1dHVyZSwgd2UgbWF5IGJlIGFibGUgdG8gcmVwbGFjZSB0aGlzIHdpdGggQXJyYXkuaXNUZW1wbGF0ZU9iamVjdCxcbiAgLy8gdGhvdWdoIHdlIG1pZ2h0IG5lZWQgdG8gbWFrZSB0aGF0IGNoZWNrIGluc2lkZSBvZiB0aGUgaHRtbCBhbmQgc3ZnXG4gIC8vIGZ1bmN0aW9ucywgYmVjYXVzZSBwcmVjb21waWxlZCB0ZW1wbGF0ZXMgZG9uJ3QgY29tZSBpbiBhc1xuICAvLyBUZW1wbGF0ZVN0cmluZ0FycmF5IG9iamVjdHMuXG4gIGlmICghQXJyYXkuaXNBcnJheShzdHJpbmdzKSB8fCAhc3RyaW5ncy5oYXNPd25Qcm9wZXJ0eSgncmF3JykpIHtcbiAgICBsZXQgbWVzc2FnZSA9ICdpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXknO1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgbWVzc2FnZSA9IGBcbiAgICAgICAgICBJbnRlcm5hbCBFcnJvcjogZXhwZWN0ZWQgdGVtcGxhdGUgc3RyaW5ncyB0byBiZSBhbiBhcnJheVxuICAgICAgICAgIHdpdGggYSAncmF3JyBmaWVsZC4gRmFraW5nIGEgdGVtcGxhdGUgc3RyaW5ncyBhcnJheSBieVxuICAgICAgICAgIGNhbGxpbmcgaHRtbCBvciBzdmcgbGlrZSBhbiBvcmRpbmFyeSBmdW5jdGlvbiBpcyBlZmZlY3RpdmVseVxuICAgICAgICAgIHRoZSBzYW1lIGFzIGNhbGxpbmcgdW5zYWZlSHRtbCBhbmQgY2FuIGxlYWQgdG8gbWFqb3Igc2VjdXJpdHlcbiAgICAgICAgICBpc3N1ZXMsIGUuZy4gb3BlbmluZyB5b3VyIGNvZGUgdXAgdG8gWFNTIGF0dGFja3MuXG5cbiAgICAgICAgICBJZiB5b3UncmUgdXNpbmcgdGhlIGh0bWwgb3Igc3ZnIHRhZ2dlZCB0ZW1wbGF0ZSBmdW5jdGlvbnMgbm9ybWFsbHlcbiAgICAgICAgICBhbmQgYW5kIHN0aWxsIHNlZWluZyB0aGlzIGVycm9yLCBwbGVhc2UgZmlsZSBhIGJ1ZyBhdFxuICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0L2lzc3Vlcy9uZXc/dGVtcGxhdGU9YnVnX3JlcG9ydC5tZFxuICAgICAgICAgIGFuZCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgYnVpbGQgdG9vbGluZywgaWYgYW55LlxuICAgICAgICBgXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnJlcGxhY2UoL1xcbiAqL2csICdcXG4nKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8vIFJldHVybmVkIGFzIGFuIGFycmF5IGZvciB0ZXJzZW5lc3NcbiAgcmV0dXJuIFtcbiAgICBwb2xpY3kgIT09IHVuZGVmaW5lZFxuICAgICAgPyBwb2xpY3kuY3JlYXRlSFRNTChodG1sUmVzdWx0KVxuICAgICAgOiAoaHRtbFJlc3VsdCBhcyB1bmtub3duIGFzIFRydXN0ZWRIVE1MKSxcbiAgICBhdHRyTmFtZXMsXG4gIF07XG59O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSB7VGVtcGxhdGV9O1xuY2xhc3MgVGVtcGxhdGUge1xuICAvKiogQGludGVybmFsICovXG4gIGVsITogSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwYXJ0czogQXJyYXk8VGVtcGxhdGVQYXJ0PiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAge3N0cmluZ3MsIFsnXyRsaXRUeXBlJCddOiB0eXBlfTogVGVtcGxhdGVSZXN1bHQsXG4gICAgb3B0aW9ucz86IFJlbmRlck9wdGlvbnNcbiAgKSB7XG4gICAgbGV0IG5vZGU6IE5vZGUgfCBudWxsO1xuICAgIGxldCBub2RlSW5kZXggPSAwO1xuICAgIGxldCBhdHRyTmFtZUluZGV4ID0gMDtcbiAgICBjb25zdCBwYXJ0Q291bnQgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgcGFydHMgPSB0aGlzLnBhcnRzO1xuXG4gICAgLy8gQ3JlYXRlIHRlbXBsYXRlIGVsZW1lbnRcbiAgICBjb25zdCBbaHRtbCwgYXR0ck5hbWVzXSA9IGdldFRlbXBsYXRlSHRtbChzdHJpbmdzLCB0eXBlKTtcbiAgICB0aGlzLmVsID0gVGVtcGxhdGUuY3JlYXRlRWxlbWVudChodG1sLCBvcHRpb25zKTtcbiAgICB3YWxrZXIuY3VycmVudE5vZGUgPSB0aGlzLmVsLmNvbnRlbnQ7XG5cbiAgICAvLyBSZXBhcmVudCBTVkcgbm9kZXMgaW50byB0ZW1wbGF0ZSByb290XG4gICAgaWYgKHR5cGUgPT09IFNWR19SRVNVTFQpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmVsLmNvbnRlbnQ7XG4gICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkITtcbiAgICAgIHN2Z0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICBjb250ZW50LmFwcGVuZCguLi5zdmdFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgIH1cblxuICAgIC8vIFdhbGsgdGhlIHRlbXBsYXRlIHRvIGZpbmQgYmluZGluZyBtYXJrZXJzIGFuZCBjcmVhdGUgVGVtcGxhdGVQYXJ0c1xuICAgIHdoaWxlICgobm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpKSAhPT0gbnVsbCAmJiBwYXJ0cy5sZW5ndGggPCBwYXJ0Q291bnQpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgIGNvbnN0IHRhZyA9IChub2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZTtcbiAgICAgICAgICAvLyBXYXJuIGlmIGB0ZXh0YXJlYWAgaW5jbHVkZXMgYW4gZXhwcmVzc2lvbiBhbmQgdGhyb3cgaWYgYHRlbXBsYXRlYFxuICAgICAgICAgIC8vIGRvZXMgc2luY2UgdGhlc2UgYXJlIG5vdCBzdXBwb3J0ZWQuIFdlIGRvIHRoaXMgYnkgY2hlY2tpbmdcbiAgICAgICAgICAvLyBpbm5lckhUTUwgZm9yIGFueXRoaW5nIHRoYXQgbG9va3MgbGlrZSBhIG1hcmtlci4gVGhpcyBjYXRjaGVzXG4gICAgICAgICAgLy8gY2FzZXMgbGlrZSBiaW5kaW5ncyBpbiB0ZXh0YXJlYSB0aGVyZSBtYXJrZXJzIHR1cm4gaW50byB0ZXh0IG5vZGVzLlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC9eKD86dGV4dGFyZWF8dGVtcGxhdGUpJC9pIS50ZXN0KHRhZykgJiZcbiAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmlubmVySFRNTC5pbmNsdWRlcyhtYXJrZXIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBtID1cbiAgICAgICAgICAgICAgYEV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIGluc2lkZSBcXGAke3RhZ31cXGAgYCArXG4gICAgICAgICAgICAgIGBlbGVtZW50cy4gU2VlIGh0dHBzOi8vbGl0LmRldi9tc2cvZXhwcmVzc2lvbi1pbi0ke3RhZ30gZm9yIG1vcmUgYCArXG4gICAgICAgICAgICAgIGBpbmZvcm1hdGlvbi5gO1xuICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobSk7XG4gICAgICAgICAgICB9IGVsc2UgaXNzdWVXYXJuaW5nKCcnLCBtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGZvciBhdHRlbXB0ZWQgZHluYW1pYyB0YWcgbmFtZXMsIHdlIGRvbid0XG4gICAgICAgIC8vIGluY3JlbWVudCB0aGUgYmluZGluZ0luZGV4LCBhbmQgaXQnbGwgYmUgb2ZmIGJ5IDEgaW4gdGhlIGVsZW1lbnRcbiAgICAgICAgLy8gYW5kIG9mZiBieSB0d28gYWZ0ZXIgaXQuXG4gICAgICAgIGlmICgobm9kZSBhcyBFbGVtZW50KS5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAvLyBXZSBkZWZlciByZW1vdmluZyBib3VuZCBhdHRyaWJ1dGVzIGJlY2F1c2Ugb24gSUUgd2UgbWlnaHQgbm90IGJlXG4gICAgICAgICAgLy8gaXRlcmF0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlaXIgdGVtcGxhdGUgb3JkZXIsIGFuZCB3b3VsZCBzb21ldGltZXNcbiAgICAgICAgICAvLyByZW1vdmUgYW4gYXR0cmlidXRlIHRoYXQgd2Ugc3RpbGwgbmVlZCB0byBjcmVhdGUgYSBwYXJ0IGZvci5cbiAgICAgICAgICBjb25zdCBhdHRyc1RvUmVtb3ZlID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZU5hbWVzKCkpIHtcbiAgICAgICAgICAgIC8vIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHdlJ3JlIGl0ZXJhdGluZyBvdmVyLCBidXQgbm90XG4gICAgICAgICAgICAvLyBfbmVjY2Vzc2FyaWx5XyB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHdlIHdpbGwgY3JlYXRlIGEgcGFydFxuICAgICAgICAgICAgLy8gZm9yLiBUaGV5IGNhbiBiZSBkaWZmZXJlbnQgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCBpdGVyYXRlIG9uXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGVzIGluIHNvdXJjZSBvcmRlci4gSW4gdGhhdCBjYXNlIHRoZSBhdHRyTmFtZXMgYXJyYXlcbiAgICAgICAgICAgIC8vIGNvbnRhaW5zIHRoZSBhdHRyaWJ1dGUgbmFtZSB3ZSdsbCBwcm9jZXNzIG5leHQuIFdlIG9ubHkgbmVlZCB0aGVcbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBuYW1lIGhlcmUgdG8ga25vdyBpZiB3ZSBzaG91bGQgcHJvY2VzcyBhIGJvdW5kIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gb24gdGhpcyBlbGVtZW50LlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBuYW1lLmVuZHNXaXRoKGJvdW5kQXR0cmlidXRlU3VmZml4KSB8fFxuICAgICAgICAgICAgICBuYW1lLnN0YXJ0c1dpdGgobWFya2VyKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlYWxOYW1lID0gYXR0ck5hbWVzW2F0dHJOYW1lSW5kZXgrK107XG4gICAgICAgICAgICAgIGF0dHJzVG9SZW1vdmUucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgaWYgKHJlYWxOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBMb3dlcmNhc2UgZm9yIGNhc2Utc2Vuc2l0aXZlIFNWRyBhdHRyaWJ1dGVzIGxpa2Ugdmlld0JveFxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKG5vZGUgYXMgRWxlbWVudCkuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgcmVhbE5hbWUudG9Mb3dlckNhc2UoKSArIGJvdW5kQXR0cmlidXRlU3VmZml4XG4gICAgICAgICAgICAgICAgKSE7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGljcyA9IHZhbHVlLnNwbGl0KG1hcmtlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IC8oWy4/QF0pPyguKikvLmV4ZWMocmVhbE5hbWUpITtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IEFUVFJJQlVURV9QQVJULFxuICAgICAgICAgICAgICAgICAgaW5kZXg6IG5vZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IG1bMl0sXG4gICAgICAgICAgICAgICAgICBzdHJpbmdzOiBzdGF0aWNzLFxuICAgICAgICAgICAgICAgICAgY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgbVsxXSA9PT0gJy4nXG4gICAgICAgICAgICAgICAgICAgICAgPyBQcm9wZXJ0eVBhcnRcbiAgICAgICAgICAgICAgICAgICAgICA6IG1bMV0gPT09ICc/J1xuICAgICAgICAgICAgICAgICAgICAgID8gQm9vbGVhbkF0dHJpYnV0ZVBhcnRcbiAgICAgICAgICAgICAgICAgICAgICA6IG1bMV0gPT09ICdAJ1xuICAgICAgICAgICAgICAgICAgICAgID8gRXZlbnRQYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgOiBBdHRyaWJ1dGVQYXJ0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogRUxFTUVOVF9QQVJULFxuICAgICAgICAgICAgICAgICAgaW5kZXg6IG5vZGVJbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYXR0cnNUb1JlbW92ZSkge1xuICAgICAgICAgICAgKG5vZGUgYXMgRWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogYmVuY2htYXJrIHRoZSByZWdleCBhZ2FpbnN0IHRlc3RpbmcgZm9yIGVhY2hcbiAgICAgICAgLy8gb2YgdGhlIDMgcmF3IHRleHQgZWxlbWVudCBuYW1lcy5cbiAgICAgICAgaWYgKHJhd1RleHRFbGVtZW50LnRlc3QoKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZSkpIHtcbiAgICAgICAgICAvLyBGb3IgcmF3IHRleHQgZWxlbWVudHMgd2UgbmVlZCB0byBzcGxpdCB0aGUgdGV4dCBjb250ZW50IG9uXG4gICAgICAgICAgLy8gbWFya2VycywgY3JlYXRlIGEgVGV4dCBub2RlIGZvciBlYWNoIHNlZ21lbnQsIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhIFRlbXBsYXRlUGFydCBmb3IgZWFjaCBtYXJrZXIuXG4gICAgICAgICAgY29uc3Qgc3RyaW5ncyA9IChub2RlIGFzIEVsZW1lbnQpLnRleHRDb250ZW50IS5zcGxpdChtYXJrZXIpO1xuICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAobGFzdEluZGV4ID4gMCkge1xuICAgICAgICAgICAgKG5vZGUgYXMgRWxlbWVudCkudGV4dENvbnRlbnQgPSB0cnVzdGVkVHlwZXNcbiAgICAgICAgICAgICAgPyAodHJ1c3RlZFR5cGVzLmVtcHR5U2NyaXB0IGFzIHVua25vd24gYXMgJycpXG4gICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAvLyBUaGVzZSBub2RlcyBhcmUgYWxzbyB1c2VkIGFzIHRoZSBtYXJrZXJzIGZvciBub2RlIHBhcnRzXG4gICAgICAgICAgICAvLyBXZSBjYW4ndCB1c2UgZW1wdHkgdGV4dCBub2RlcyBhcyBtYXJrZXJzIGJlY2F1c2UgdGhleSdyZVxuICAgICAgICAgICAgLy8gbm9ybWFsaXplZCB3aGVuIGNsb25pbmcgaW4gSUUgKGNvdWxkIHNpbXBsaWZ5IHdoZW5cbiAgICAgICAgICAgIC8vIElFIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XG4gICAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmFwcGVuZChzdHJpbmdzW2ldLCBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgICAgICAgIC8vIFdhbGsgcGFzdCB0aGUgbWFya2VyIG5vZGUgd2UganVzdCBhZGRlZFxuICAgICAgICAgICAgICB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgICAgcGFydHMucHVzaCh7dHlwZTogQ0hJTERfUEFSVCwgaW5kZXg6ICsrbm9kZUluZGV4fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOb3RlIGJlY2F1c2UgdGhpcyBtYXJrZXIgaXMgYWRkZWQgYWZ0ZXIgdGhlIHdhbGtlcidzIGN1cnJlbnRcbiAgICAgICAgICAgIC8vIG5vZGUsIGl0IHdpbGwgYmUgd2Fsa2VkIHRvIGluIHRoZSBvdXRlciBsb29wIChhbmQgaWdub3JlZCksIHNvXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGFkanVzdCBub2RlSW5kZXggaGVyZVxuICAgICAgICAgICAgKG5vZGUgYXMgRWxlbWVudCkuYXBwZW5kKHN0cmluZ3NbbGFzdEluZGV4XSwgY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSAobm9kZSBhcyBDb21tZW50KS5kYXRhO1xuICAgICAgICBpZiAoZGF0YSA9PT0gbWFya2VyTWF0Y2gpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKHt0eXBlOiBDSElMRF9QQVJULCBpbmRleDogbm9kZUluZGV4fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGkgPSAtMTtcbiAgICAgICAgICB3aGlsZSAoKGkgPSAobm9kZSBhcyBDb21tZW50KS5kYXRhLmluZGV4T2YobWFya2VyLCBpICsgMSkpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAvLyBUaGUgYmluZGluZyB3b24ndCB3b3JrLCBidXQgc3Vic2VxdWVudCBiaW5kaW5ncyB3aWxsXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHt0eXBlOiBDT01NRU5UX1BBUlQsIGluZGV4OiBub2RlSW5kZXh9KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIGkgKz0gbWFya2VyLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlSW5kZXgrKztcbiAgICB9XG4gICAgZGVidWdMb2dFdmVudD8uKHtcbiAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBwcmVwJyxcbiAgICAgIHRlbXBsYXRlOiB0aGlzLFxuICAgICAgY2xvbmFibGVUZW1wbGF0ZTogdGhpcy5lbCxcbiAgICAgIHBhcnRzOiB0aGlzLnBhcnRzLFxuICAgICAgc3RyaW5ncyxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRkZW4gdmlhIGBsaXRIdG1sUG9seWZpbGxTdXBwb3J0YCB0byBwcm92aWRlIHBsYXRmb3JtIHN1cHBvcnQuXG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgY3JlYXRlRWxlbWVudChodG1sOiBUcnVzdGVkSFRNTCwgX29wdGlvbnM/OiBSZW5kZXJPcHRpb25zKSB7XG4gICAgY29uc3QgZWwgPSBkLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgZWwuaW5uZXJIVE1MID0gaHRtbCBhcyB1bmtub3duIGFzIHN0cmluZztcbiAgICByZXR1cm4gZWw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaXNjb25uZWN0YWJsZSB7XG4gIF8kcGFyZW50PzogRGlzY29ubmVjdGFibGU7XG4gIF8kZGlzY29ubmVjdGFibGVDaGlsZHJlbj86IFNldDxEaXNjb25uZWN0YWJsZT47XG4gIC8vIFJhdGhlciB0aGFuIGhvbGQgY29ubmVjdGlvbiBzdGF0ZSBvbiBpbnN0YW5jZXMsIERpc2Nvbm5lY3RhYmxlcyByZWN1cnNpdmVseVxuICAvLyBmZXRjaCB0aGUgY29ubmVjdGlvbiBzdGF0ZSBmcm9tIHRoZSBSb290UGFydCB0aGV5IGFyZSBjb25uZWN0ZWQgaW4gdmlhXG4gIC8vIGdldHRlcnMgdXAgdGhlIERpc2Nvbm5lY3RhYmxlIHRyZWUgdmlhIF8kcGFyZW50IHJlZmVyZW5jZXMuIFRoaXMgcHVzaGVzIHRoZVxuICAvLyBjb3N0IG9mIHRyYWNraW5nIHRoZSBpc0Nvbm5lY3RlZCBzdGF0ZSB0byBgQXN5bmNEaXJlY3RpdmVzYCwgYW5kIGF2b2lkc1xuICAvLyBuZWVkaW5nIHRvIHBhc3MgYWxsIERpc2Nvbm5lY3RhYmxlcyAocGFydHMsIHRlbXBsYXRlIGluc3RhbmNlcywgYW5kXG4gIC8vIGRpcmVjdGl2ZXMpIHRoZWlyIGNvbm5lY3Rpb24gc3RhdGUgZWFjaCB0aW1lIGl0IGNoYW5nZXMsIHdoaWNoIHdvdWxkIGJlXG4gIC8vIGNvc3RseSBmb3IgdHJlZXMgdGhhdCBoYXZlIG5vIEFzeW5jRGlyZWN0aXZlcy5cbiAgXyRpc0Nvbm5lY3RlZDogYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShcbiAgcGFydDogQ2hpbGRQYXJ0IHwgQXR0cmlidXRlUGFydCB8IEVsZW1lbnRQYXJ0LFxuICB2YWx1ZTogdW5rbm93bixcbiAgcGFyZW50OiBEaXJlY3RpdmVQYXJlbnQgPSBwYXJ0LFxuICBhdHRyaWJ1dGVJbmRleD86IG51bWJlclxuKTogdW5rbm93biB7XG4gIC8vIEJhaWwgZWFybHkgaWYgdGhlIHZhbHVlIGlzIGV4cGxpY2l0bHkgbm9DaGFuZ2UuIE5vdGUsIHRoaXMgbWVhbnMgYW55XG4gIC8vIG5lc3RlZCBkaXJlY3RpdmUgaXMgc3RpbGwgYXR0YWNoZWQgYW5kIGlzIG5vdCBydW4uXG4gIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgbGV0IGN1cnJlbnREaXJlY3RpdmUgPVxuICAgIGF0dHJpYnV0ZUluZGV4ICE9PSB1bmRlZmluZWRcbiAgICAgID8gKHBhcmVudCBhcyBBdHRyaWJ1dGVQYXJ0KS5fX2RpcmVjdGl2ZXM/LlthdHRyaWJ1dGVJbmRleF1cbiAgICAgIDogKHBhcmVudCBhcyBDaGlsZFBhcnQgfCBFbGVtZW50UGFydCB8IERpcmVjdGl2ZSkuX19kaXJlY3RpdmU7XG4gIGNvbnN0IG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9IGlzUHJpbWl0aXZlKHZhbHVlKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgICAgKHZhbHVlIGFzIERpcmVjdGl2ZVJlc3VsdClbJ18kbGl0RGlyZWN0aXZlJCddO1xuICBpZiAoY3VycmVudERpcmVjdGl2ZT8uY29uc3RydWN0b3IgIT09IG5leHREaXJlY3RpdmVDb25zdHJ1Y3Rvcikge1xuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgY3VycmVudERpcmVjdGl2ZT8uWydfJG5vdGlmeURpcmVjdGl2ZUNvbm5lY3Rpb25DaGFuZ2VkJ10/LihmYWxzZSk7XG4gICAgaWYgKG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50RGlyZWN0aXZlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50RGlyZWN0aXZlID0gbmV3IG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvcihwYXJ0IGFzIFBhcnRJbmZvKTtcbiAgICAgIGN1cnJlbnREaXJlY3RpdmUuXyRpbml0aWFsaXplKHBhcnQsIHBhcmVudCwgYXR0cmlidXRlSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgKChwYXJlbnQgYXMgQXR0cmlidXRlUGFydCkuX19kaXJlY3RpdmVzID8/PSBbXSlbYXR0cmlidXRlSW5kZXhdID1cbiAgICAgICAgY3VycmVudERpcmVjdGl2ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHBhcmVudCBhcyBDaGlsZFBhcnQgfCBEaXJlY3RpdmUpLl9fZGlyZWN0aXZlID0gY3VycmVudERpcmVjdGl2ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnREaXJlY3RpdmUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gcmVzb2x2ZURpcmVjdGl2ZShcbiAgICAgIHBhcnQsXG4gICAgICBjdXJyZW50RGlyZWN0aXZlLl8kcmVzb2x2ZShwYXJ0LCAodmFsdWUgYXMgRGlyZWN0aXZlUmVzdWx0KS52YWx1ZXMpLFxuICAgICAgY3VycmVudERpcmVjdGl2ZSxcbiAgICAgIGF0dHJpYnV0ZUluZGV4XG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQW4gdXBkYXRlYWJsZSBpbnN0YW5jZSBvZiBhIFRlbXBsYXRlLiBIb2xkcyByZWZlcmVuY2VzIHRvIHRoZSBQYXJ0cyB1c2VkIHRvXG4gKiB1cGRhdGUgdGhlIHRlbXBsYXRlIGluc3RhbmNlLlxuICovXG5jbGFzcyBUZW1wbGF0ZUluc3RhbmNlIGltcGxlbWVudHMgRGlzY29ubmVjdGFibGUge1xuICAvKiogQGludGVybmFsICovXG4gIF8kdGVtcGxhdGU6IFRlbXBsYXRlO1xuICAvKiogQGludGVybmFsICovXG4gIF9wYXJ0czogQXJyYXk8UGFydCB8IHVuZGVmaW5lZD4gPSBbXTtcblxuICAvKiogQGludGVybmFsICovXG4gIF8kcGFyZW50OiBDaGlsZFBhcnQ7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuPzogU2V0PERpc2Nvbm5lY3RhYmxlPiA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogVGVtcGxhdGUsIHBhcmVudDogQ2hpbGRQYXJ0KSB7XG4gICAgdGhpcy5fJHRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgdGhpcy5fJHBhcmVudCA9IHBhcmVudDtcbiAgfVxuXG4gIC8vIENhbGxlZCBieSBDaGlsZFBhcnQgcGFyZW50Tm9kZSBnZXR0ZXJcbiAgZ2V0IHBhcmVudE5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQuXyRpc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIC8vIFRoaXMgbWV0aG9kIGlzIHNlcGFyYXRlIGZyb20gdGhlIGNvbnN0cnVjdG9yIGJlY2F1c2Ugd2UgbmVlZCB0byByZXR1cm4gYVxuICAvLyBEb2N1bWVudEZyYWdtZW50IGFuZCB3ZSBkb24ndCB3YW50IHRvIGhvbGQgb250byBpdCB3aXRoIGFuIGluc3RhbmNlIGZpZWxkLlxuICBfY2xvbmUob3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsOiB7Y29udGVudH0sXG4gICAgICBwYXJ0czogcGFydHMsXG4gICAgfSA9IHRoaXMuXyR0ZW1wbGF0ZTtcbiAgICBjb25zdCBmcmFnbWVudCA9IChvcHRpb25zPy5jcmVhdGlvblNjb3BlID8/IGQpLmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSk7XG4gICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gZnJhZ21lbnQ7XG5cbiAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpITtcbiAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICBsZXQgdGVtcGxhdGVQYXJ0ID0gcGFydHNbMF07XG5cbiAgICB3aGlsZSAodGVtcGxhdGVQYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChub2RlSW5kZXggPT09IHRlbXBsYXRlUGFydC5pbmRleCkge1xuICAgICAgICBsZXQgcGFydDogUGFydCB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRlbXBsYXRlUGFydC50eXBlID09PSBDSElMRF9QQVJUKSB7XG4gICAgICAgICAgcGFydCA9IG5ldyBDaGlsZFBhcnQoXG4gICAgICAgICAgICBub2RlIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgbm9kZS5uZXh0U2libGluZyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZVBhcnQudHlwZSA9PT0gQVRUUklCVVRFX1BBUlQpIHtcbiAgICAgICAgICBwYXJ0ID0gbmV3IHRlbXBsYXRlUGFydC5jdG9yKFxuICAgICAgICAgICAgbm9kZSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgIHRlbXBsYXRlUGFydC5uYW1lLFxuICAgICAgICAgICAgdGVtcGxhdGVQYXJ0LnN0cmluZ3MsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVQYXJ0LnR5cGUgPT09IEVMRU1FTlRfUEFSVCkge1xuICAgICAgICAgIHBhcnQgPSBuZXcgRWxlbWVudFBhcnQobm9kZSBhcyBIVE1MRWxlbWVudCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGFydHMucHVzaChwYXJ0KTtcbiAgICAgICAgdGVtcGxhdGVQYXJ0ID0gcGFydHNbKytwYXJ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVJbmRleCAhPT0gdGVtcGxhdGVQYXJ0Py5pbmRleCkge1xuICAgICAgICBub2RlID0gd2Fsa2VyLm5leHROb2RlKCkhO1xuICAgICAgICBub2RlSW5kZXgrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbiAgX3VwZGF0ZSh2YWx1ZXM6IEFycmF5PHVua25vd24+KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9wYXJ0cykge1xuICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAgICAgIGtpbmQ6ICdzZXQgcGFydCcsXG4gICAgICAgICAgcGFydCxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVzW2ldLFxuICAgICAgICAgIHZhbHVlSW5kZXg6IGksXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgIHRlbXBsYXRlSW5zdGFuY2U6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoKHBhcnQgYXMgQXR0cmlidXRlUGFydCkuc3RyaW5ncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgKHBhcnQgYXMgQXR0cmlidXRlUGFydCkuXyRzZXRWYWx1ZSh2YWx1ZXMsIHBhcnQgYXMgQXR0cmlidXRlUGFydCwgaSk7XG4gICAgICAgICAgLy8gVGhlIG51bWJlciBvZiB2YWx1ZXMgdGhlIHBhcnQgY29uc3VtZXMgaXMgcGFydC5zdHJpbmdzLmxlbmd0aCAtIDFcbiAgICAgICAgICAvLyBzaW5jZSB2YWx1ZXMgYXJlIGluIGJldHdlZW4gdGVtcGxhdGUgc3BhbnMuIFdlIGluY3JlbWVudCBpIGJ5IDFcbiAgICAgICAgICAvLyBsYXRlciBpbiB0aGUgbG9vcCwgc28gaW5jcmVtZW50IGl0IGJ5IHBhcnQuc3RyaW5ncy5sZW5ndGggLSAyIGhlcmVcbiAgICAgICAgICBpICs9IChwYXJ0IGFzIEF0dHJpYnV0ZVBhcnQpLnN0cmluZ3MhLmxlbmd0aCAtIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydC5fJHNldFZhbHVlKHZhbHVlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gIH1cbn1cblxuLypcbiAqIFBhcnRzXG4gKi9cbnR5cGUgQXR0cmlidXRlVGVtcGxhdGVQYXJ0ID0ge1xuICByZWFkb25seSB0eXBlOiB0eXBlb2YgQVRUUklCVVRFX1BBUlQ7XG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICByZWFkb25seSBjdG9yOiB0eXBlb2YgQXR0cmlidXRlUGFydDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICByZWFkb25seSBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG59O1xudHlwZSBOb2RlVGVtcGxhdGVQYXJ0ID0ge1xuICByZWFkb25seSB0eXBlOiB0eXBlb2YgQ0hJTERfUEFSVDtcbiAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbn07XG50eXBlIEVsZW1lbnRUZW1wbGF0ZVBhcnQgPSB7XG4gIHJlYWRvbmx5IHR5cGU6IHR5cGVvZiBFTEVNRU5UX1BBUlQ7XG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XG59O1xudHlwZSBDb21tZW50VGVtcGxhdGVQYXJ0ID0ge1xuICByZWFkb25seSB0eXBlOiB0eXBlb2YgQ09NTUVOVF9QQVJUO1xuICByZWFkb25seSBpbmRleDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBBIFRlbXBsYXRlUGFydCByZXByZXNlbnRzIGEgZHluYW1pYyBwYXJ0IGluIGEgdGVtcGxhdGUsIGJlZm9yZSB0aGUgdGVtcGxhdGVcbiAqIGlzIGluc3RhbnRpYXRlZC4gV2hlbiBhIHRlbXBsYXRlIGlzIGluc3RhbnRpYXRlZCBQYXJ0cyBhcmUgY3JlYXRlZCBmcm9tXG4gKiBUZW1wbGF0ZVBhcnRzLlxuICovXG50eXBlIFRlbXBsYXRlUGFydCA9XG4gIHwgTm9kZVRlbXBsYXRlUGFydFxuICB8IEF0dHJpYnV0ZVRlbXBsYXRlUGFydFxuICB8IEVsZW1lbnRUZW1wbGF0ZVBhcnRcbiAgfCBDb21tZW50VGVtcGxhdGVQYXJ0O1xuXG5leHBvcnQgdHlwZSBQYXJ0ID1cbiAgfCBDaGlsZFBhcnRcbiAgfCBBdHRyaWJ1dGVQYXJ0XG4gIHwgUHJvcGVydHlQYXJ0XG4gIHwgQm9vbGVhbkF0dHJpYnV0ZVBhcnRcbiAgfCBFbGVtZW50UGFydFxuICB8IEV2ZW50UGFydDtcblxuZXhwb3J0IHR5cGUge0NoaWxkUGFydH07XG5jbGFzcyBDaGlsZFBhcnQgaW1wbGVtZW50cyBEaXNjb25uZWN0YWJsZSB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDSElMRF9QQVJUO1xuICByZWFkb25seSBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICBfJGNvbW1pdHRlZFZhbHVlOiB1bmtub3duID0gbm90aGluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfX2RpcmVjdGl2ZT86IERpcmVjdGl2ZTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJHN0YXJ0Tm9kZTogQ2hpbGROb2RlO1xuICAvKiogQGludGVybmFsICovXG4gIF8kZW5kTm9kZTogQ2hpbGROb2RlIHwgbnVsbDtcbiAgcHJpdmF0ZSBfdGV4dFNhbml0aXplcjogVmFsdWVTYW5pdGl6ZXIgfCB1bmRlZmluZWQ7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRwYXJlbnQ6IERpc2Nvbm5lY3RhYmxlIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogQ29ubmVjdGlvbiBzdGF0ZSBmb3IgUm9vdFBhcnRzIG9ubHkgKGkuZS4gQ2hpbGRQYXJ0IHdpdGhvdXQgXyRwYXJlbnRcbiAgICogcmV0dXJuZWQgZnJvbSB0b3AtbGV2ZWwgYHJlbmRlcmApLiBUaGlzIGZpZWxkIGlzIHVuc2VkIG90aGVyd2lzZS4gVGhlXG4gICAqIGludGVudGlvbiB3b3VsZCBjbGVhcmVyIGlmIHdlIG1hZGUgYFJvb3RQYXJ0YCBhIHN1YmNsYXNzIG9mIGBDaGlsZFBhcnRgXG4gICAqIHdpdGggdGhpcyBmaWVsZCAoYW5kIGEgZGlmZmVyZW50IF8kaXNDb25uZWN0ZWQgZ2V0dGVyKSwgYnV0IHRoZSBzdWJjbGFzc1xuICAgKiBjYXVzZWQgYSBwZXJmIHJlZ3Jlc3Npb24sIHBvc3NpYmx5IGR1ZSB0byBtYWtpbmcgY2FsbCBzaXRlcyBwb2x5bW9ycGhpYy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfX2lzQ29ubmVjdGVkOiBib29sZWFuO1xuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgLy8gQ2hpbGRQYXJ0cyB0aGF0IGFyZSBub3QgYXQgdGhlIHJvb3Qgc2hvdWxkIGFsd2F5cyBiZSBjcmVhdGVkIHdpdGggYVxuICAgIC8vIHBhcmVudDsgb25seSBSb290Q2hpbGROb2RlJ3Mgd29uJ3QsIHNvIHRoZXkgcmV0dXJuIHRoZSBsb2NhbCBpc0Nvbm5lY3RlZFxuICAgIC8vIHN0YXRlXG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQ/Ll8kaXNDb25uZWN0ZWQgPz8gdGhpcy5fX2lzQ29ubmVjdGVkO1xuICB9XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBmaWVsZHMgd2lsbCBiZSBwYXRjaGVkIG9udG8gQ2hpbGRQYXJ0cyB3aGVuIHJlcXVpcmVkIGJ5XG4gIC8vIEFzeW5jRGlyZWN0aXZlXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuPzogU2V0PERpc2Nvbm5lY3RhYmxlPiA9IHVuZGVmaW5lZDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJG5vdGlmeUNvbm5lY3Rpb25DaGFuZ2VkPyhcbiAgICBpc0Nvbm5lY3RlZDogYm9vbGVhbixcbiAgICByZW1vdmVGcm9tUGFyZW50PzogYm9vbGVhbixcbiAgICBmcm9tPzogbnVtYmVyXG4gICk6IHZvaWQ7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRyZXBhcmVudERpc2Nvbm5lY3RhYmxlcz8ocGFyZW50OiBEaXNjb25uZWN0YWJsZSk6IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc3RhcnROb2RlOiBDaGlsZE5vZGUsXG4gICAgZW5kTm9kZTogQ2hpbGROb2RlIHwgbnVsbCxcbiAgICBwYXJlbnQ6IFRlbXBsYXRlSW5zdGFuY2UgfCBDaGlsZFBhcnQgfCB1bmRlZmluZWQsXG4gICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZFxuICApIHtcbiAgICB0aGlzLl8kc3RhcnROb2RlID0gc3RhcnROb2RlO1xuICAgIHRoaXMuXyRlbmROb2RlID0gZW5kTm9kZTtcbiAgICB0aGlzLl8kcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gTm90ZSBfX2lzQ29ubmVjdGVkIGlzIG9ubHkgZXZlciBhY2Nlc3NlZCBvbiBSb290UGFydHMgKGkuZS4gd2hlbiB0aGVyZSBpc1xuICAgIC8vIG5vIF8kcGFyZW50KTsgdGhlIHZhbHVlIG9uIGEgbm9uLXJvb3QtcGFydCBpcyBcImRvbid0IGNhcmVcIiwgYnV0IGNoZWNraW5nXG4gICAgLy8gZm9yIHBhcmVudCB3b3VsZCBiZSBtb3JlIGNvZGVcbiAgICB0aGlzLl9faXNDb25uZWN0ZWQgPSBvcHRpb25zPy5pc0Nvbm5lY3RlZCA/PyB0cnVlO1xuICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgIC8vIEV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBmb3IgY29uc2lzdGVudCBjbGFzcyBzaGFwZS5cbiAgICAgIHRoaXMuX3RleHRTYW5pdGl6ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJlbnQgbm9kZSBpbnRvIHdoaWNoIHRoZSBwYXJ0IHJlbmRlcnMgaXRzIGNvbnRlbnQuXG4gICAqXG4gICAqIEEgQ2hpbGRQYXJ0J3MgY29udGVudCBjb25zaXN0cyBvZiBhIHJhbmdlIG9mIGFkamFjZW50IGNoaWxkIG5vZGVzIG9mXG4gICAqIGAucGFyZW50Tm9kZWAsIHBvc3NpYmx5IGJvcmRlcmVkIGJ5ICdtYXJrZXIgbm9kZXMnIChgLnN0YXJ0Tm9kZWAgYW5kXG4gICAqIGAuZW5kTm9kZWApLlxuICAgKlxuICAgKiAtIElmIGJvdGggYC5zdGFydE5vZGVgIGFuZCBgLmVuZE5vZGVgIGFyZSBub24tbnVsbCwgdGhlbiB0aGUgcGFydCdzIGNvbnRlbnRcbiAgICogY29uc2lzdHMgb2YgYWxsIHNpYmxpbmdzIGJldHdlZW4gYC5zdGFydE5vZGVgIGFuZCBgLmVuZE5vZGVgLCBleGNsdXNpdmVseS5cbiAgICpcbiAgICogLSBJZiBgLnN0YXJ0Tm9kZWAgaXMgbm9uLW51bGwgYnV0IGAuZW5kTm9kZWAgaXMgbnVsbCwgdGhlbiB0aGUgcGFydCdzXG4gICAqIGNvbnRlbnQgY29uc2lzdHMgb2YgYWxsIHNpYmxpbmdzIGZvbGxvd2luZyBgLnN0YXJ0Tm9kZWAsIHVwIHRvIGFuZFxuICAgKiBpbmNsdWRpbmcgdGhlIGxhc3QgY2hpbGQgb2YgYC5wYXJlbnROb2RlYC4gSWYgYC5lbmROb2RlYCBpcyBub24tbnVsbCwgdGhlblxuICAgKiBgLnN0YXJ0Tm9kZWAgd2lsbCBhbHdheXMgYmUgbm9uLW51bGwuXG4gICAqXG4gICAqIC0gSWYgYm90aCBgLmVuZE5vZGVgIGFuZCBgLnN0YXJ0Tm9kZWAgYXJlIG51bGwsIHRoZW4gdGhlIHBhcnQncyBjb250ZW50XG4gICAqIGNvbnNpc3RzIG9mIGFsbCBjaGlsZCBub2RlcyBvZiBgLnBhcmVudE5vZGVgLlxuICAgKi9cbiAgZ2V0IHBhcmVudE5vZGUoKTogTm9kZSB7XG4gICAgbGV0IHBhcmVudE5vZGU6IE5vZGUgPSB3cmFwKHRoaXMuXyRzdGFydE5vZGUpLnBhcmVudE5vZGUhO1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuXyRwYXJlbnQ7XG4gICAgaWYgKFxuICAgICAgcGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExIC8qIE5vZGUuRE9DVU1FTlRfRlJBR01FTlQgKi9cbiAgICApIHtcbiAgICAgIC8vIElmIHRoZSBwYXJlbnROb2RlIGlzIGEgRG9jdW1lbnRGcmFnbWVudCwgaXQgbWF5IGJlIGJlY2F1c2UgdGhlIERPTSBpc1xuICAgICAgLy8gc3RpbGwgaW4gdGhlIGNsb25lZCBmcmFnbWVudCBkdXJpbmcgaW5pdGlhbCByZW5kZXI7IGlmIHNvLCBnZXQgdGhlIHJlYWxcbiAgICAgIC8vIHBhcmVudE5vZGUgdGhlIHBhcnQgd2lsbCBiZSBjb21taXR0ZWQgaW50byBieSBhc2tpbmcgdGhlIHBhcmVudC5cbiAgICAgIHBhcmVudE5vZGUgPSAocGFyZW50IGFzIENoaWxkUGFydCB8IFRlbXBsYXRlSW5zdGFuY2UpLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnROb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJ0J3MgbGVhZGluZyBtYXJrZXIgbm9kZSwgaWYgYW55LiBTZWUgYC5wYXJlbnROb2RlYCBmb3IgbW9yZVxuICAgKiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGdldCBzdGFydE5vZGUoKTogTm9kZSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl8kc3RhcnROb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJ0J3MgdHJhaWxpbmcgbWFya2VyIG5vZGUsIGlmIGFueS4gU2VlIGAucGFyZW50Tm9kZWAgZm9yIG1vcmVcbiAgICogaW5mb3JtYXRpb24uXG4gICAqL1xuICBnZXQgZW5kTm9kZSgpOiBOb2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuXyRlbmROb2RlO1xuICB9XG5cbiAgXyRzZXRWYWx1ZSh2YWx1ZTogdW5rbm93biwgZGlyZWN0aXZlUGFyZW50OiBEaXJlY3RpdmVQYXJlbnQgPSB0aGlzKTogdm9pZCB7XG4gICAgaWYgKERFVl9NT0RFICYmIHRoaXMucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhpcyBcXGBDaGlsZFBhcnRcXGAgaGFzIG5vIFxcYHBhcmVudE5vZGVcXGAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgYWNjZXB0IGEgdmFsdWUuIFRoaXMgbGlrZWx5IG1lYW5zIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHBhcnQgd2FzIG1hbmlwdWxhdGVkIGluIGFuIHVuc3VwcG9ydGVkIHdheSBvdXRzaWRlIG9mIExpdCdzIGNvbnRyb2wgc3VjaCB0aGF0IHRoZSBwYXJ0J3MgbWFya2VyIG5vZGVzIHdlcmUgZWplY3RlZCBmcm9tIERPTS4gRm9yIGV4YW1wbGUsIHNldHRpbmcgdGhlIGVsZW1lbnQncyBcXGBpbm5lckhUTUxcXGAgb3IgXFxgdGV4dENvbnRlbnRcXGAgY2FuIGRvIHRoaXMuYFxuICAgICAgKTtcbiAgICB9XG4gICAgdmFsdWUgPSByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIHZhbHVlLCBkaXJlY3RpdmVQYXJlbnQpO1xuICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgIC8vIE5vbi1yZW5kZXJpbmcgY2hpbGQgdmFsdWVzLiBJdCdzIGltcG9ydGFudCB0aGF0IHRoZXNlIGRvIG5vdCByZW5kZXJcbiAgICAgIC8vIGVtcHR5IHRleHQgbm9kZXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggcHJldmVudGluZyBkZWZhdWx0IDxzbG90PlxuICAgICAgLy8gZmFsbGJhY2sgY29udGVudC5cbiAgICAgIGlmICh2YWx1ZSA9PT0gbm90aGluZyB8fCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJykge1xuICAgICAgICBpZiAodGhpcy5fJGNvbW1pdHRlZFZhbHVlICE9PSBub3RoaW5nKSB7XG4gICAgICAgICAgZGVidWdMb2dFdmVudD8uKHtcbiAgICAgICAgICAgIGtpbmQ6ICdjb21taXQgbm90aGluZyB0byBjaGlsZCcsXG4gICAgICAgICAgICBzdGFydDogdGhpcy5fJHN0YXJ0Tm9kZSxcbiAgICAgICAgICAgIGVuZDogdGhpcy5fJGVuZE5vZGUsXG4gICAgICAgICAgICBwYXJlbnQ6IHRoaXMuXyRwYXJlbnQsXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5fJGNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gbm90aGluZztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT09IHRoaXMuXyRjb21taXR0ZWRWYWx1ZSAmJiB2YWx1ZSAhPT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgIH0gZWxzZSBpZiAoKHZhbHVlIGFzIFRlbXBsYXRlUmVzdWx0KVsnXyRsaXRUeXBlJCddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlIGFzIFRlbXBsYXRlUmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKCh2YWx1ZSBhcyBOb2RlKS5ub2RlVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoREVWX01PREUgJiYgdGhpcy5vcHRpb25zPy5ob3N0ID09PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9jb21taXRUZXh0KFxuICAgICAgICAgIGBbcHJvYmFibGUgbWlzdGFrZTogcmVuZGVyZWQgYSB0ZW1wbGF0ZSdzIGhvc3QgaW4gaXRzZWxmIGAgK1xuICAgICAgICAgICAgYChjb21tb25seSBjYXVzZWQgYnkgd3JpdGluZyBcXCR7dGhpc30gaW4gYSB0ZW1wbGF0ZV1gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgQXR0ZW1wdGVkIHRvIHJlbmRlciB0aGUgdGVtcGxhdGUgaG9zdGAsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgYGluc2lkZSBpdHNlbGYuIFRoaXMgaXMgYWxtb3N0IGFsd2F5cyBhIG1pc3Rha2UsIGFuZCBpbiBkZXYgbW9kZSBgLFxuICAgICAgICAgIGB3ZSByZW5kZXIgc29tZSB3YXJuaW5nIHRleHQuIEluIHByb2R1Y3Rpb24gaG93ZXZlciwgd2UnbGwgYCxcbiAgICAgICAgICBgcmVuZGVyIGl0LCB3aGljaCB3aWxsIHVzdWFsbHkgcmVzdWx0IGluIGFuIGVycm9yLCBhbmQgc29tZXRpbWVzIGAsXG4gICAgICAgICAgYGluIHRoZSBlbGVtZW50IGRpc2FwcGVhcmluZyBmcm9tIHRoZSBET00uYFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9jb21taXROb2RlKHZhbHVlIGFzIE5vZGUpO1xuICAgIH0gZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2ssIHdpbGwgcmVuZGVyIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgIHRoaXMuX2NvbW1pdFRleHQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2luc2VydDxUIGV4dGVuZHMgTm9kZT4obm9kZTogVCwgcmVmID0gdGhpcy5fJGVuZE5vZGUpIHtcbiAgICByZXR1cm4gd3JhcCh3cmFwKHRoaXMuXyRzdGFydE5vZGUpLnBhcmVudE5vZGUhKS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbW1pdE5vZGUodmFsdWU6IE5vZGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fJGNvbW1pdHRlZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fJGNsZWFyKCk7XG4gICAgICBpZiAoXG4gICAgICAgIEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUyAmJlxuICAgICAgICBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgIT09IG5vb3BTYW5pdGl6ZXJcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnROb2RlTmFtZSA9IHRoaXMuXyRzdGFydE5vZGUucGFyZW50Tm9kZT8ubm9kZU5hbWU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlTmFtZSA9PT0gJ1NUWUxFJyB8fCBwYXJlbnROb2RlTmFtZSA9PT0gJ1NDUklQVCcpIHtcbiAgICAgICAgICBsZXQgbWVzc2FnZSA9ICdGb3JiaWRkZW4nO1xuICAgICAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGVOYW1lID09PSAnU1RZTEUnKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIGBMaXQgZG9lcyBub3Qgc3VwcG9ydCBiaW5kaW5nIGluc2lkZSBzdHlsZSBub2Rlcy4gYCArXG4gICAgICAgICAgICAgICAgYFRoaXMgaXMgYSBzZWN1cml0eSByaXNrLCBhcyBzdHlsZSBpbmplY3Rpb24gYXR0YWNrcyBjYW4gYCArXG4gICAgICAgICAgICAgICAgYGV4ZmlsdHJhdGUgZGF0YSBhbmQgc3Bvb2YgVUlzLiBgICtcbiAgICAgICAgICAgICAgICBgQ29uc2lkZXIgaW5zdGVhZCB1c2luZyBjc3NcXGAuLi5cXGAgbGl0ZXJhbHMgYCArXG4gICAgICAgICAgICAgICAgYHRvIGNvbXBvc2Ugc3R5bGVzLCBhbmQgbWFrZSBkbyBkeW5hbWljIHN0eWxpbmcgd2l0aCBgICtcbiAgICAgICAgICAgICAgICBgY3NzIGN1c3RvbSBwcm9wZXJ0aWVzLCA6OnBhcnRzLCA8c2xvdD5zLCBgICtcbiAgICAgICAgICAgICAgICBgYW5kIGJ5IG11dGF0aW5nIHRoZSBET00gcmF0aGVyIHRoYW4gc3R5bGVzaGVldHMuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIGBMaXQgZG9lcyBub3Qgc3VwcG9ydCBiaW5kaW5nIGluc2lkZSBzY3JpcHQgbm9kZXMuIGAgK1xuICAgICAgICAgICAgICAgIGBUaGlzIGlzIGEgc2VjdXJpdHkgcmlzaywgYXMgaXQgY291bGQgYWxsb3cgYXJiaXRyYXJ5IGAgK1xuICAgICAgICAgICAgICAgIGBjb2RlIGV4ZWN1dGlvbi5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlYnVnTG9nRXZlbnQ/Lih7XG4gICAgICAgIGtpbmQ6ICdjb21taXQgbm9kZScsXG4gICAgICAgIHN0YXJ0OiB0aGlzLl8kc3RhcnROb2RlLFxuICAgICAgICBwYXJlbnQ6IHRoaXMuXyRwYXJlbnQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgfSk7XG4gICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSB0aGlzLl9pbnNlcnQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2NvbW1pdFRleHQodmFsdWU6IHVua25vd24pOiB2b2lkIHtcbiAgICAvLyBJZiB0aGUgY29tbWl0dGVkIHZhbHVlIGlzIGEgcHJpbWl0aXZlIGl0IG1lYW5zIHdlIGNhbGxlZCBfY29tbWl0VGV4dCBvblxuICAgIC8vIHRoZSBwcmV2aW91cyByZW5kZXIsIGFuZCB3ZSBrbm93IHRoYXQgdGhpcy5fJHN0YXJ0Tm9kZS5uZXh0U2libGluZyBpcyBhXG4gICAgLy8gVGV4dCBub2RlLiBXZSBjYW4gbm93IGp1c3QgcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50ICguZGF0YSkgb2YgdGhlIG5vZGUuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlICE9PSBub3RoaW5nICYmXG4gICAgICBpc1ByaW1pdGl2ZSh0aGlzLl8kY29tbWl0dGVkVmFsdWUpXG4gICAgKSB7XG4gICAgICBjb25zdCBub2RlID0gd3JhcCh0aGlzLl8kc3RhcnROb2RlKS5uZXh0U2libGluZyBhcyBUZXh0O1xuICAgICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgICBpZiAodGhpcy5fdGV4dFNhbml0aXplciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fdGV4dFNhbml0aXplciA9IGNyZWF0ZVNhbml0aXplcihub2RlLCAnZGF0YScsICdwcm9wZXJ0eScpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdGhpcy5fdGV4dFNhbml0aXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAgICBraW5kOiAnY29tbWl0IHRleHQnLFxuICAgICAgICBub2RlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgfSk7XG4gICAgICAobm9kZSBhcyBUZXh0KS5kYXRhID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoRU5BQkxFX0VYVFJBX1NFQ1VSSVRZX0hPT0tTKSB7XG4gICAgICAgIGNvbnN0IHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgICAgICB0aGlzLl9jb21taXROb2RlKHRleHROb2RlKTtcbiAgICAgICAgLy8gV2hlbiBzZXR0aW5nIHRleHQgY29udGVudCwgZm9yIHNlY3VyaXR5IHB1cnBvc2VzIGl0IG1hdHRlcnMgYSBsb3RcbiAgICAgICAgLy8gd2hhdCB0aGUgcGFyZW50IGlzLiBGb3IgZXhhbXBsZSwgPHN0eWxlPiBhbmQgPHNjcmlwdD4gbmVlZCB0byBiZVxuICAgICAgICAvLyBoYW5kbGVkIHdpdGggY2FyZSwgd2hpbGUgPHNwYW4+IGRvZXMgbm90LiBTbyBmaXJzdCB3ZSBuZWVkIHRvIHB1dCBhXG4gICAgICAgIC8vIHRleHQgbm9kZSBpbnRvIHRoZSBkb2N1bWVudCwgdGhlbiB3ZSBjYW4gc2FuaXRpemUgaXRzIGNvbnRlbnQuXG4gICAgICAgIGlmICh0aGlzLl90ZXh0U2FuaXRpemVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl90ZXh0U2FuaXRpemVyID0gY3JlYXRlU2FuaXRpemVyKHRleHROb2RlLCAnZGF0YScsICdwcm9wZXJ0eScpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdGhpcy5fdGV4dFNhbml0aXplcih2YWx1ZSk7XG4gICAgICAgIGRlYnVnTG9nRXZlbnQ/Lih7XG4gICAgICAgICAga2luZDogJ2NvbW1pdCB0ZXh0JyxcbiAgICAgICAgICBub2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICB0ZXh0Tm9kZS5kYXRhID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29tbWl0Tm9kZShkLmNyZWF0ZVRleHROb2RlKHZhbHVlIGFzIHN0cmluZykpO1xuICAgICAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAgICAgIGtpbmQ6ICdjb21taXQgdGV4dCcsXG4gICAgICAgICAgbm9kZTogd3JhcCh0aGlzLl8kc3RhcnROb2RlKS5uZXh0U2libGluZyBhcyBUZXh0LFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBfY29tbWl0VGVtcGxhdGVSZXN1bHQoXG4gICAgcmVzdWx0OiBUZW1wbGF0ZVJlc3VsdCB8IENvbXBpbGVkVGVtcGxhdGVSZXN1bHRcbiAgKTogdm9pZCB7XG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICBjb25zdCB7dmFsdWVzLCBbJ18kbGl0VHlwZSQnXTogdHlwZX0gPSByZXN1bHQ7XG4gICAgLy8gSWYgJGxpdFR5cGUkIGlzIGEgbnVtYmVyLCByZXN1bHQgaXMgYSBwbGFpbiBUZW1wbGF0ZVJlc3VsdCBhbmQgd2UgZ2V0XG4gICAgLy8gdGhlIHRlbXBsYXRlIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlLiBJZiBub3QsIHJlc3VsdCBpcyBhXG4gICAgLy8gQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCBhbmQgXyRsaXRUeXBlJCBpcyBhIENvbXBpbGVkVGVtcGxhdGUgYW5kIHdlIG5lZWRcbiAgICAvLyB0byBjcmVhdGUgdGhlIDx0ZW1wbGF0ZT4gZWxlbWVudCB0aGUgZmlyc3QgdGltZSB3ZSBzZWUgaXQuXG4gICAgY29uc3QgdGVtcGxhdGU6IFRlbXBsYXRlIHwgQ29tcGlsZWRUZW1wbGF0ZSA9XG4gICAgICB0eXBlb2YgdHlwZSA9PT0gJ251bWJlcidcbiAgICAgICAgPyB0aGlzLl8kZ2V0VGVtcGxhdGUocmVzdWx0IGFzIFRlbXBsYXRlUmVzdWx0KVxuICAgICAgICA6ICh0eXBlLmVsID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICh0eXBlLmVsID0gVGVtcGxhdGUuY3JlYXRlRWxlbWVudCh0eXBlLmgsIHRoaXMub3B0aW9ucykpLFxuICAgICAgICAgIHR5cGUpO1xuXG4gICAgaWYgKCh0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgVGVtcGxhdGVJbnN0YW5jZSk/Ll8kdGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAgICBraW5kOiAndGVtcGxhdGUgdXBkYXRpbmcnLFxuICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgaW5zdGFuY2U6IHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBUZW1wbGF0ZUluc3RhbmNlLFxuICAgICAgICBwYXJ0czogKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBUZW1wbGF0ZUluc3RhbmNlKS5fcGFydHMsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgfSk7XG4gICAgICAodGhpcy5fJGNvbW1pdHRlZFZhbHVlIGFzIFRlbXBsYXRlSW5zdGFuY2UpLl91cGRhdGUodmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVJbnN0YW5jZSh0ZW1wbGF0ZSBhcyBUZW1wbGF0ZSwgdGhpcyk7XG4gICAgICBjb25zdCBmcmFnbWVudCA9IGluc3RhbmNlLl9jbG9uZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgZGVidWdMb2dFdmVudD8uKHtcbiAgICAgICAga2luZDogJ3RlbXBsYXRlIGluc3RhbnRpYXRlZCcsXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcGFydHM6IGluc3RhbmNlLl9wYXJ0cyxcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgfSk7XG4gICAgICBpbnN0YW5jZS5fdXBkYXRlKHZhbHVlcyk7XG4gICAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAgICBraW5kOiAndGVtcGxhdGUgaW5zdGFudGlhdGVkIGFuZCB1cGRhdGVkJyxcbiAgICAgICAgdGVtcGxhdGUsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICBwYXJ0czogaW5zdGFuY2UuX3BhcnRzLFxuICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGZyYWdtZW50LFxuICAgICAgICB2YWx1ZXMsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2NvbW1pdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgLy8gT3ZlcnJpZGRlbiB2aWEgYGxpdEh0bWxQb2x5ZmlsbFN1cHBvcnRgIHRvIHByb3ZpZGUgcGxhdGZvcm0gc3VwcG9ydC5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGdldFRlbXBsYXRlKHJlc3VsdDogVGVtcGxhdGVSZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgaWYgKHRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRlbXBsYXRlQ2FjaGUuc2V0KHJlc3VsdC5zdHJpbmdzLCAodGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0KSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICBwcml2YXRlIF9jb21taXRJdGVyYWJsZSh2YWx1ZTogSXRlcmFibGU8dW5rbm93bj4pOiB2b2lkIHtcbiAgICAvLyBGb3IgYW4gSXRlcmFibGUsIHdlIGNyZWF0ZSBhIG5ldyBJbnN0YW5jZVBhcnQgcGVyIGl0ZW0sIHRoZW4gc2V0IGl0c1xuICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgIC8vIGFuIEl0ZXJhYmxlLCBidXQgaXQgbGV0cyB1cyByZWN1cnNlIGVhc2lseSBhbmQgZWZmaWNpZW50bHkgdXBkYXRlIEFycmF5c1xuICAgIC8vIG9mIFRlbXBsYXRlUmVzdWx0cyB0aGF0IHdpbGwgYmUgY29tbW9ubHkgcmV0dXJuZWQgZnJvbSBleHByZXNzaW9ucyBsaWtlOlxuICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG5cbiAgICAvLyBJZiB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgIC8vIGl0ZXJhYmxlIGFuZCB2YWx1ZSB3aWxsIGNvbnRhaW4gdGhlIENoaWxkUGFydHMgZnJvbSB0aGUgcHJldmlvdXNcbiAgICAvLyByZW5kZXIuIElmIHZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgLy8gYXJyYXkgZm9yIENoaWxkUGFydHMuXG4gICAgaWYgKCFpc0FycmF5KHRoaXMuXyRjb21taXR0ZWRWYWx1ZSkpIHtcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IFtdO1xuICAgICAgdGhpcy5fJGNsZWFyKCk7XG4gICAgfVxuXG4gICAgLy8gTGV0cyB1cyBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IGl0ZW1zIHdlIHN0YW1wZWQgc28gd2UgY2FuIGNsZWFyIGxlZnRvdmVyXG4gICAgLy8gaXRlbXMgZnJvbSBhIHByZXZpb3VzIHJlbmRlclxuICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBDaGlsZFBhcnRbXTtcbiAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICBsZXQgaXRlbVBhcnQ6IENoaWxkUGFydCB8IHVuZGVmaW5lZDtcblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgaWYgKHBhcnRJbmRleCA9PT0gaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIC8vIFRPRE8gKGp1c3RpbmZhZ25hbmkpOiB0ZXN0IHBlcmYgaW1wYWN0IG9mIGFsd2F5cyBjcmVhdGluZyB0d28gcGFydHNcbiAgICAgICAgLy8gaW5zdGVhZCBvZiBzaGFyaW5nIHBhcnRzIGJldHdlZW4gbm9kZXNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2xpdC9saXQvaXNzdWVzLzEyNjZcbiAgICAgICAgaXRlbVBhcnRzLnB1c2goXG4gICAgICAgICAgKGl0ZW1QYXJ0ID0gbmV3IENoaWxkUGFydChcbiAgICAgICAgICAgIHRoaXMuX2luc2VydChjcmVhdGVNYXJrZXIoKSksXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnQoY3JlYXRlTWFya2VyKCkpLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1xuICAgICAgICAgICkpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXVzZSBhbiBleGlzdGluZyBwYXJ0XG4gICAgICAgIGl0ZW1QYXJ0ID0gaXRlbVBhcnRzW3BhcnRJbmRleF07XG4gICAgICB9XG4gICAgICBpdGVtUGFydC5fJHNldFZhbHVlKGl0ZW0pO1xuICAgICAgcGFydEluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRJbmRleCA8IGl0ZW1QYXJ0cy5sZW5ndGgpIHtcbiAgICAgIC8vIGl0ZW1QYXJ0cyBhbHdheXMgaGF2ZSBlbmQgbm9kZXNcbiAgICAgIHRoaXMuXyRjbGVhcihcbiAgICAgICAgaXRlbVBhcnQgJiYgd3JhcChpdGVtUGFydC5fJGVuZE5vZGUhKS5uZXh0U2libGluZyxcbiAgICAgICAgcGFydEluZGV4XG4gICAgICApO1xuICAgICAgLy8gVHJ1bmNhdGUgdGhlIHBhcnRzIGFycmF5IHNvIF92YWx1ZSByZWZsZWN0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgbm9kZXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIFBhcnQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0gc3RhcnQgU3RhcnQgbm9kZSB0byBjbGVhciBmcm9tLCBmb3IgY2xlYXJpbmcgYSBzdWJzZXQgb2YgdGhlIHBhcnQnc1xuICAgKiAgICAgRE9NICh1c2VkIHdoZW4gdHJ1bmNhdGluZyBpdGVyYWJsZXMpXG4gICAqIEBwYXJhbSBmcm9tICBXaGVuIGBzdGFydGAgaXMgc3BlY2lmaWVkLCB0aGUgaW5kZXggd2l0aGluIHRoZSBpdGVyYWJsZSBmcm9tXG4gICAqICAgICB3aGljaCBDaGlsZFBhcnRzIGFyZSBiZWluZyByZW1vdmVkLCB1c2VkIGZvciBkaXNjb25uZWN0aW5nIGRpcmVjdGl2ZXMgaW5cbiAgICogICAgIHRob3NlIFBhcnRzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF8kY2xlYXIoXG4gICAgc3RhcnQ6IENoaWxkTm9kZSB8IG51bGwgPSB3cmFwKHRoaXMuXyRzdGFydE5vZGUpLm5leHRTaWJsaW5nLFxuICAgIGZyb20/OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5fJG5vdGlmeUNvbm5lY3Rpb25DaGFuZ2VkPy4oZmFsc2UsIHRydWUsIGZyb20pO1xuICAgIHdoaWxlIChzdGFydCAmJiBzdGFydCAhPT0gdGhpcy5fJGVuZE5vZGUpIHtcbiAgICAgIGNvbnN0IG4gPSB3cmFwKHN0YXJ0ISkubmV4dFNpYmxpbmc7XG4gICAgICAod3JhcChzdGFydCEpIGFzIEVsZW1lbnQpLnJlbW92ZSgpO1xuICAgICAgc3RhcnQgPSBuO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgUm9vdFBhcnQncyBgaXNDb25uZWN0ZWRgLiBOb3RlIHRoYXQgdGhpcyBtZXRvZFxuICAgKiBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYFJvb3RQYXJ0YHMgKHRoZSBgQ2hpbGRQYXJ0YCByZXR1cm5lZCBmcm9tIGFcbiAgICogdG9wLWxldmVsIGByZW5kZXIoKWAgY2FsbCkuIEl0IGhhcyBubyBlZmZlY3Qgb24gbm9uLXJvb3QgQ2hpbGRQYXJ0cy5cbiAgICogQHBhcmFtIGlzQ29ubmVjdGVkIFdoZXRoZXIgdG8gc2V0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc2V0Q29ubmVjdGVkKGlzQ29ubmVjdGVkOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuXyRwYXJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2lzQ29ubmVjdGVkID0gaXNDb25uZWN0ZWQ7XG4gICAgICB0aGlzLl8kbm90aWZ5Q29ubmVjdGlvbkNoYW5nZWQ/Lihpc0Nvbm5lY3RlZCk7XG4gICAgfSBlbHNlIGlmIChERVZfTU9ERSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncGFydC5zZXRDb25uZWN0ZWQoKSBtYXkgb25seSBiZSBjYWxsZWQgb24gYSAnICtcbiAgICAgICAgICAnUm9vdFBhcnQgcmV0dXJuZWQgZnJvbSByZW5kZXIoKS4nXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgdG9wLWxldmVsIGBDaGlsZFBhcnRgIHJldHVybmVkIGZyb20gYHJlbmRlcmAgdGhhdCBtYW5hZ2VzIHRoZSBjb25uZWN0ZWRcbiAqIHN0YXRlIG9mIGBBc3luY0RpcmVjdGl2ZWBzIGNyZWF0ZWQgdGhyb3VnaG91dCB0aGUgdHJlZSBiZWxvdyBpdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb290UGFydCBleHRlbmRzIENoaWxkUGFydCB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjb25uZWN0aW9uIHN0YXRlIGZvciBgQXN5bmNEaXJlY3RpdmVgcyBjb250YWluZWQgd2l0aGluIHRoaXMgcm9vdFxuICAgKiBDaGlsZFBhcnQuXG4gICAqXG4gICAqIGxpdC1odG1sIGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgbW9uaXRvciB0aGUgY29ubmVjdGVkbmVzcyBvZiBET00gcmVuZGVyZWQ7XG4gICAqIGFzIHN1Y2gsIGl0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgY2FsbGVyIHRvIGByZW5kZXJgIHRvIGVuc3VyZSB0aGF0XG4gICAqIGBwYXJ0LnNldENvbm5lY3RlZChmYWxzZSlgIGlzIGNhbGxlZCBiZWZvcmUgdGhlIHBhcnQgb2JqZWN0IGlzIHBvdGVudGlhbGx5XG4gICAqIGRpc2NhcmRlZCwgdG8gZW5zdXJlIHRoYXQgYEFzeW5jRGlyZWN0aXZlYHMgaGF2ZSBhIGNoYW5jZSB0byBkaXNwb3NlIG9mXG4gICAqIGFueSByZXNvdXJjZXMgYmVpbmcgaGVsZC4gSWYgYSBgUm9vdFBhcnRgIHRoYXQgd2FzIHByZXZvdXNseVxuICAgKiBkaXNjb25uZWN0ZWQgaXMgc3Vic2VxdWVudGx5IHJlLWNvbm5lY3RlZCAoYW5kIGl0cyBgQXN5bmNEaXJlY3RpdmVgcyBzaG91bGRcbiAgICogcmUtY29ubmVjdCksIGBzZXRDb25uZWN0ZWQodHJ1ZSlgIHNob3VsZCBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpc0Nvbm5lY3RlZCBXaGV0aGVyIGRpcmVjdGl2ZXMgd2l0aGluIHRoaXMgdHJlZSBzaG91bGQgYmUgY29ubmVjdGVkXG4gICAqIG9yIG5vdFxuICAgKi9cbiAgc2V0Q29ubmVjdGVkKGlzQ29ubmVjdGVkOiBib29sZWFuKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUge0F0dHJpYnV0ZVBhcnR9O1xuY2xhc3MgQXR0cmlidXRlUGFydCBpbXBsZW1lbnRzIERpc2Nvbm5lY3RhYmxlIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEFUVFJJQlVURV9QQVJUIGFzXG4gICAgfCB0eXBlb2YgQVRUUklCVVRFX1BBUlRcbiAgICB8IHR5cGVvZiBQUk9QRVJUWV9QQVJUXG4gICAgfCB0eXBlb2YgQk9PTEVBTl9BVFRSSUJVVEVfUEFSVFxuICAgIHwgdHlwZW9mIEVWRU5UX1BBUlQ7XG4gIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgYXR0cmlidXRlIHBhcnQgcmVwcmVzZW50cyBhbiBpbnRlcnBvbGF0aW9uLCB0aGlzIGNvbnRhaW5zIHRoZVxuICAgKiBzdGF0aWMgc3RyaW5ncyBvZiB0aGUgaW50ZXJwb2xhdGlvbi4gRm9yIHNpbmdsZS12YWx1ZSwgY29tcGxldGUgYmluZGluZ3MsXG4gICAqIHRoaXMgaXMgdW5kZWZpbmVkLlxuICAgKi9cbiAgcmVhZG9ubHkgc3RyaW5ncz86IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGNvbW1pdHRlZFZhbHVlOiB1bmtub3duIHwgQXJyYXk8dW5rbm93bj4gPSBub3RoaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIF9fZGlyZWN0aXZlcz86IEFycmF5PERpcmVjdGl2ZSB8IHVuZGVmaW5lZD47XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRwYXJlbnQ6IERpc2Nvbm5lY3RhYmxlO1xuICAvKiogQGludGVybmFsICovXG4gIF8kZGlzY29ubmVjdGFibGVDaGlsZHJlbj86IFNldDxEaXNjb25uZWN0YWJsZT4gPSB1bmRlZmluZWQ7XG5cbiAgcHJvdGVjdGVkIF9zYW5pdGl6ZXI6IFZhbHVlU2FuaXRpemVyIHwgdW5kZWZpbmVkO1xuXG4gIGdldCB0YWdOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZTtcbiAgfVxuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQuXyRpc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz4sXG4gICAgcGFyZW50OiBEaXNjb25uZWN0YWJsZSxcbiAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLl8kcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHN0cmluZ3MubGVuZ3RoID4gMiB8fCBzdHJpbmdzWzBdICE9PSAnJyB8fCBzdHJpbmdzWzFdICE9PSAnJykge1xuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gbmV3IEFycmF5KHN0cmluZ3MubGVuZ3RoIC0gMSkuZmlsbChuZXcgU3RyaW5nKCkpO1xuICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gbm90aGluZztcbiAgICB9XG4gICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgdGhpcy5fc2FuaXRpemVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcnQgYnkgcmVzb2x2aW5nIHRoZSB2YWx1ZSBmcm9tIHBvc3NpYmx5IG11bHRpcGxlXG4gICAqIHZhbHVlcyBhbmQgc3RhdGljIHN0cmluZ3MgYW5kIGNvbW1pdHRpbmcgaXQgdG8gdGhlIERPTS5cbiAgICogSWYgdGhpcyBwYXJ0IGlzIHNpbmdsZS12YWx1ZWQsIGB0aGlzLl9zdHJpbmdzYCB3aWxsIGJlIHVuZGVmaW5lZCwgYW5kIHRoZVxuICAgKiBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSB2YWx1ZSBhcmd1bWVudC4gSWYgdGhpcyBwYXJ0IGlzXG4gICAqIG11bHRpLXZhbHVlLCBgdGhpcy5fc3RyaW5nc2Agd2lsbCBiZSBkZWZpbmVkLCBhbmQgdGhlIG1ldGhvZCBpcyBjYWxsZWRcbiAgICogd2l0aCB0aGUgdmFsdWUgYXJyYXkgb2YgdGhlIHBhcnQncyBvd25pbmcgVGVtcGxhdGVJbnN0YW5jZSwgYW5kIGFuIG9mZnNldFxuICAgKiBpbnRvIHRoZSB2YWx1ZSBhcnJheSBmcm9tIHdoaWNoIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHJlYWQuXG4gICAqIFRoaXMgbWV0aG9kIGlzIG92ZXJsb2FkZWQgdGhpcyB3YXkgdG8gZWxpbWluYXRlIHNob3J0LWxpdmVkIGFycmF5IHNsaWNlc1xuICAgKiBvZiB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdmFsdWVzLCBhbmQgYWxsb3cgYSBmYXN0LXBhdGggZm9yIHNpbmdsZS12YWx1ZWRcbiAgICogcGFydHMuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgcGFydCB2YWx1ZSwgb3IgYW4gYXJyYXkgb2YgdmFsdWVzIGZvciBtdWx0aS12YWx1ZWQgcGFydHNcbiAgICogQHBhcmFtIHZhbHVlSW5kZXggdGhlIGluZGV4IHRvIHN0YXJ0IHJlYWRpbmcgdmFsdWVzIGZyb20uIGB1bmRlZmluZWRgIGZvclxuICAgKiAgIHNpbmdsZS12YWx1ZWQgcGFydHNcbiAgICogQHBhcmFtIG5vQ29tbWl0IGNhdXNlcyB0aGUgcGFydCB0byBub3QgY29tbWl0IGl0cyB2YWx1ZSB0byB0aGUgRE9NLiBVc2VkXG4gICAqICAgaW4gaHlkcmF0aW9uIHRvIHByaW1lIGF0dHJpYnV0ZSBwYXJ0cyB3aXRoIHRoZWlyIGZpcnN0LXJlbmRlcmVkIHZhbHVlLFxuICAgKiAgIGJ1dCBub3Qgc2V0IHRoZSBhdHRyaWJ1dGUsIGFuZCBpbiBTU1IgdG8gbm8tb3AgdGhlIERPTSBvcGVyYXRpb24gYW5kXG4gICAqICAgY2FwdHVyZSB0aGUgdmFsdWUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgXyRzZXRWYWx1ZShcbiAgICB2YWx1ZTogdW5rbm93biB8IEFycmF5PHVua25vd24+LFxuICAgIGRpcmVjdGl2ZVBhcmVudDogRGlyZWN0aXZlUGFyZW50ID0gdGhpcyxcbiAgICB2YWx1ZUluZGV4PzogbnVtYmVyLFxuICAgIG5vQ29tbWl0PzogYm9vbGVhblxuICApIHtcbiAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5zdHJpbmdzO1xuXG4gICAgLy8gV2hldGhlciBhbnkgb2YgdGhlIHZhbHVlcyBoYXMgY2hhbmdlZCwgZm9yIGRpcnR5LWNoZWNraW5nXG4gICAgbGV0IGNoYW5nZSA9IGZhbHNlO1xuXG4gICAgaWYgKHN0cmluZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gU2luZ2xlLXZhbHVlIGJpbmRpbmcgY2FzZVxuICAgICAgdmFsdWUgPSByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIHZhbHVlLCBkaXJlY3RpdmVQYXJlbnQsIDApO1xuICAgICAgY2hhbmdlID1cbiAgICAgICAgIWlzUHJpbWl0aXZlKHZhbHVlKSB8fFxuICAgICAgICAodmFsdWUgIT09IHRoaXMuXyRjb21taXR0ZWRWYWx1ZSAmJiB2YWx1ZSAhPT0gbm9DaGFuZ2UpO1xuICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW50ZXJwb2xhdGlvbiBjYXNlXG4gICAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZSBhcyBBcnJheTx1bmtub3duPjtcbiAgICAgIHZhbHVlID0gc3RyaW5nc1swXTtcblxuICAgICAgbGV0IGksIHY7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgdiA9IHJlc29sdmVEaXJlY3RpdmUodGhpcywgdmFsdWVzW3ZhbHVlSW5kZXghICsgaV0sIGRpcmVjdGl2ZVBhcmVudCwgaSk7XG5cbiAgICAgICAgaWYgKHYgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHVzZXItcHJvdmlkZWQgdmFsdWUgaXMgYG5vQ2hhbmdlYCwgdXNlIHRoZSBwcmV2aW91cyB2YWx1ZVxuICAgICAgICAgIHYgPSAodGhpcy5fJGNvbW1pdHRlZFZhbHVlIGFzIEFycmF5PHVua25vd24+KVtpXTtcbiAgICAgICAgfVxuICAgICAgICBjaGFuZ2UgfHw9XG4gICAgICAgICAgIWlzUHJpbWl0aXZlKHYpIHx8IHYgIT09ICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgQXJyYXk8dW5rbm93bj4pW2ldO1xuICAgICAgICBpZiAodiA9PT0gbm90aGluZykge1xuICAgICAgICAgIHZhbHVlID0gbm90aGluZztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gbm90aGluZykge1xuICAgICAgICAgIHZhbHVlICs9ICh2ID8/ICcnKSArIHN0cmluZ3NbaSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGFsd2F5cyByZWNvcmQgZWFjaCB2YWx1ZSwgZXZlbiBpZiBvbmUgaXMgYG5vdGhpbmdgLCBmb3IgZnV0dXJlXG4gICAgICAgIC8vIGNoYW5nZSBkZXRlY3Rpb24uXG4gICAgICAgICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgQXJyYXk8dW5rbm93bj4pW2ldID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoYW5nZSAmJiAhbm9Db21taXQpIHtcbiAgICAgIHRoaXMuX2NvbW1pdFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9jb21taXRWYWx1ZSh2YWx1ZTogdW5rbm93bikge1xuICAgIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgKHdyYXAodGhpcy5lbGVtZW50KSBhcyBFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgICBpZiAodGhpcy5fc2FuaXRpemVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9zYW5pdGl6ZXIgPSBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAnYXR0cmlidXRlJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB0aGlzLl9zYW5pdGl6ZXIodmFsdWUgPz8gJycpO1xuICAgICAgfVxuICAgICAgZGVidWdMb2dFdmVudD8uKHtcbiAgICAgICAga2luZDogJ2NvbW1pdCBhdHRyaWJ1dGUnLFxuICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIH0pO1xuICAgICAgKHdyYXAodGhpcy5lbGVtZW50KSBhcyBFbGVtZW50KS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgKHZhbHVlID8/ICcnKSBhcyBzdHJpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIHtQcm9wZXJ0eVBhcnR9O1xuY2xhc3MgUHJvcGVydHlQYXJ0IGV4dGVuZHMgQXR0cmlidXRlUGFydCB7XG4gIG92ZXJyaWRlIHJlYWRvbmx5IHR5cGUgPSBQUk9QRVJUWV9QQVJUO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgb3ZlcnJpZGUgX2NvbW1pdFZhbHVlKHZhbHVlOiB1bmtub3duKSB7XG4gICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgaWYgKHRoaXMuX3Nhbml0aXplciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3Nhbml0aXplciA9IHNhbml0aXplckZhY3RvcnlJbnRlcm5hbChcbiAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICAgICdwcm9wZXJ0eSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdGhpcy5fc2FuaXRpemVyKHZhbHVlKTtcbiAgICB9XG4gICAgZGVidWdMb2dFdmVudD8uKHtcbiAgICAgIGtpbmQ6ICdjb21taXQgcHJvcGVydHknLFxuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAodGhpcy5lbGVtZW50IGFzIGFueSlbdGhpcy5uYW1lXSA9IHZhbHVlID09PSBub3RoaW5nID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gIH1cbn1cblxuLy8gVGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vY3JidWcuY29tLzk5MzI2OFxuLy8gQ3VycmVudGx5LCBhbnkgYXR0cmlidXRlIHN0YXJ0aW5nIHdpdGggXCJvblwiIGlzIGNvbnNpZGVyZWQgdG8gYmUgYVxuLy8gVHJ1c3RlZFNjcmlwdCBzb3VyY2UuIFN1Y2ggYm9vbGVhbiBhdHRyaWJ1dGVzIG11c3QgYmUgc2V0IHRvIHRoZSBlcXVpdmFsZW50XG4vLyB0cnVzdGVkIGVtcHR5U2NyaXB0IHZhbHVlLlxuY29uc3QgZW1wdHlTdHJpbmdGb3JCb29sZWFuQXR0cmlidXRlID0gdHJ1c3RlZFR5cGVzXG4gID8gKHRydXN0ZWRUeXBlcy5lbXB0eVNjcmlwdCBhcyB1bmtub3duIGFzICcnKVxuICA6ICcnO1xuXG5leHBvcnQgdHlwZSB7Qm9vbGVhbkF0dHJpYnV0ZVBhcnR9O1xuY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgb3ZlcnJpZGUgcmVhZG9ubHkgdHlwZSA9IEJPT0xFQU5fQVRUUklCVVRFX1BBUlQ7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBvdmVycmlkZSBfY29tbWl0VmFsdWUodmFsdWU6IHVua25vd24pIHtcbiAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAga2luZDogJ2NvbW1pdCBib29sZWFuIGF0dHJpYnV0ZScsXG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB2YWx1ZTogISEodmFsdWUgJiYgdmFsdWUgIT09IG5vdGhpbmcpLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgIH0pO1xuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPT0gbm90aGluZykge1xuICAgICAgKHdyYXAodGhpcy5lbGVtZW50KSBhcyBFbGVtZW50KS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgZW1wdHlTdHJpbmdGb3JCb29sZWFuQXR0cmlidXRlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAod3JhcCh0aGlzLmVsZW1lbnQpIGFzIEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgIH1cbiAgfVxufVxuXG50eXBlIEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9ucyA9IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QgJlxuICBQYXJ0aWFsPEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zPjtcblxuLyoqXG4gKiBBbiBBdHRyaWJ1dGVQYXJ0IHRoYXQgbWFuYWdlcyBhbiBldmVudCBsaXN0ZW5lciB2aWEgYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuXG4gKlxuICogVGhpcyBwYXJ0IHdvcmtzIGJ5IGFkZGluZyBpdHNlbGYgYXMgdGhlIGV2ZW50IGxpc3RlbmVyIG9uIGFuIGVsZW1lbnQsIHRoZW5cbiAqIGRlbGVnYXRpbmcgdG8gdGhlIHZhbHVlIHBhc3NlZCB0byBpdC4gVGhpcyByZWR1Y2VzIHRoZSBudW1iZXIgb2YgY2FsbHMgdG9cbiAqIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyIGlmIHRoZSBsaXN0ZW5lciBjaGFuZ2VzIGZyZXF1ZW50bHksIHN1Y2ggYXMgd2hlbiBhblxuICogaW5saW5lIGZ1bmN0aW9uIGlzIHVzZWQgYXMgYSBsaXN0ZW5lci5cbiAqXG4gKiBCZWNhdXNlIGV2ZW50IG9wdGlvbnMgYXJlIHBhc3NlZCB3aGVuIGFkZGluZyBsaXN0ZW5lcnMsIHdlIG11c3QgdGFrZSBjYXNlXG4gKiB0byBhZGQgYW5kIHJlbW92ZSB0aGUgcGFydCBhcyBhIGxpc3RlbmVyIHdoZW4gdGhlIGV2ZW50IG9wdGlvbnMgY2hhbmdlLlxuICovXG5leHBvcnQgdHlwZSB7RXZlbnRQYXJ0fTtcbmNsYXNzIEV2ZW50UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xuICBvdmVycmlkZSByZWFkb25seSB0eXBlID0gRVZFTlRfUEFSVDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc3RyaW5nczogUmVhZG9ubHlBcnJheTxzdHJpbmc+LFxuICAgIHBhcmVudDogRGlzY29ubmVjdGFibGUsXG4gICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZFxuICApIHtcbiAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBwYXJlbnQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKERFVl9NT0RFICYmIHRoaXMuc3RyaW5ncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBBIFxcYDwke2VsZW1lbnQubG9jYWxOYW1lfT5cXGAgaGFzIGEgXFxgQCR7bmFtZX09Li4uXFxgIGxpc3RlbmVyIHdpdGggYCArXG4gICAgICAgICAgJ2ludmFsaWQgY29udGVudC4gRXZlbnQgbGlzdGVuZXJzIGluIHRlbXBsYXRlcyBtdXN0IGhhdmUgZXhhY3RseSAnICtcbiAgICAgICAgICAnb25lIGV4cHJlc3Npb24gYW5kIG5vIHN1cnJvdW5kaW5nIHRleHQuJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBFdmVudFBhcnQgZG9lcyBub3QgdXNlIHRoZSBiYXNlIF8kc2V0VmFsdWUvX3Jlc29sdmVWYWx1ZSBpbXBsZW1lbnRhdGlvblxuICAvLyBzaW5jZSB0aGUgZGlydHkgY2hlY2tpbmcgaXMgbW9yZSBjb21wbGV4XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgb3ZlcnJpZGUgXyRzZXRWYWx1ZShcbiAgICBuZXdMaXN0ZW5lcjogdW5rbm93bixcbiAgICBkaXJlY3RpdmVQYXJlbnQ6IERpcmVjdGl2ZVBhcmVudCA9IHRoaXNcbiAgKSB7XG4gICAgbmV3TGlzdGVuZXIgPVxuICAgICAgcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCBuZXdMaXN0ZW5lciwgZGlyZWN0aXZlUGFyZW50LCAwKSA/PyBub3RoaW5nO1xuICAgIGlmIChuZXdMaXN0ZW5lciA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLl8kY29tbWl0dGVkVmFsdWU7XG5cbiAgICAvLyBJZiB0aGUgbmV3IHZhbHVlIGlzIG5vdGhpbmcgb3IgYW55IG9wdGlvbnMgY2hhbmdlIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZVxuICAgIC8vIHBhcnQgYXMgYSBsaXN0ZW5lci5cbiAgICBjb25zdCBzaG91bGRSZW1vdmVMaXN0ZW5lciA9XG4gICAgICAobmV3TGlzdGVuZXIgPT09IG5vdGhpbmcgJiYgb2xkTGlzdGVuZXIgIT09IG5vdGhpbmcpIHx8XG4gICAgICAobmV3TGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5jYXB0dXJlICE9PVxuICAgICAgICAob2xkTGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5jYXB0dXJlIHx8XG4gICAgICAobmV3TGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5vbmNlICE9PVxuICAgICAgICAob2xkTGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5vbmNlIHx8XG4gICAgICAobmV3TGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5wYXNzaXZlICE9PVxuICAgICAgICAob2xkTGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKS5wYXNzaXZlO1xuXG4gICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyBub3Qgbm90aGluZyBhbmQgd2UgcmVtb3ZlZCB0aGUgbGlzdGVuZXIsIHdlIGhhdmVcbiAgICAvLyB0byBhZGQgdGhlIHBhcnQgYXMgYSBsaXN0ZW5lci5cbiAgICBjb25zdCBzaG91bGRBZGRMaXN0ZW5lciA9XG4gICAgICBuZXdMaXN0ZW5lciAhPT0gbm90aGluZyAmJlxuICAgICAgKG9sZExpc3RlbmVyID09PSBub3RoaW5nIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTtcblxuICAgIGRlYnVnTG9nRXZlbnQ/Lih7XG4gICAgICBraW5kOiAnY29tbWl0IGV2ZW50IGxpc3RlbmVyJyxcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHZhbHVlOiBuZXdMaXN0ZW5lcixcbiAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIHJlbW92ZUxpc3RlbmVyOiBzaG91bGRSZW1vdmVMaXN0ZW5lcixcbiAgICAgIGFkZExpc3RlbmVyOiBzaG91bGRBZGRMaXN0ZW5lcixcbiAgICAgIG9sZExpc3RlbmVyLFxuICAgIH0pO1xuICAgIGlmIChzaG91bGRSZW1vdmVMaXN0ZW5lcikge1xuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgdGhpcyxcbiAgICAgICAgb2xkTGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgIC8vIEJld2FyZTogSUUxMSBhbmQgQ2hyb21lIDQxIGRvbid0IGxpa2UgdXNpbmcgdGhlIGxpc3RlbmVyIGFzIHRoZVxuICAgICAgLy8gb3B0aW9ucyBvYmplY3QuIEZpZ3VyZSBvdXQgaG93IHRvIGRlYWwgdy8gdGhpcyBpbiBJRTExIC0gbWF5YmVcbiAgICAgIC8vIHBhdGNoIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICB0aGlzLFxuICAgICAgICBuZXdMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5ld0xpc3RlbmVyO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZS5jYWxsKHRoaXMub3B0aW9ucz8uaG9zdCA/PyB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBFdmVudExpc3RlbmVyT2JqZWN0KS5oYW5kbGVFdmVudChldmVudCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIHtFbGVtZW50UGFydH07XG5jbGFzcyBFbGVtZW50UGFydCBpbXBsZW1lbnRzIERpc2Nvbm5lY3RhYmxlIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEVMRU1FTlRfUEFSVDtcblxuICAvKiogQGludGVybmFsICovXG4gIF9fZGlyZWN0aXZlPzogRGlyZWN0aXZlO1xuXG4gIC8vIFRoaXMgaXMgdG8gZW5zdXJlIHRoYXQgZXZlcnkgUGFydCBoYXMgYSBfJGNvbW1pdHRlZFZhbHVlXG4gIF8kY29tbWl0dGVkVmFsdWU6IHVuZGVmaW5lZDtcblxuICAvKiogQGludGVybmFsICovXG4gIF8kcGFyZW50ITogRGlzY29ubmVjdGFibGU7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4/OiBTZXQ8RGlzY29ubmVjdGFibGU+ID0gdW5kZWZpbmVkO1xuXG4gIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcGFyZW50OiBEaXNjb25uZWN0YWJsZSxcbiAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIHRoaXMuXyRwYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQuXyRpc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIF8kc2V0VmFsdWUodmFsdWU6IHVua25vd24pOiB2b2lkIHtcbiAgICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgICAga2luZDogJ2NvbW1pdCB0byBlbGVtZW50IGJpbmRpbmcnLFxuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgdmFsdWUsXG4gICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgfSk7XG4gICAgcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFTkQgVVNFUlMgU0hPVUxEIE5PVCBSRUxZIE9OIFRISVMgT0JKRUNULlxuICpcbiAqIFByaXZhdGUgZXhwb3J0cyBmb3IgdXNlIGJ5IG90aGVyIExpdCBwYWNrYWdlcywgbm90IGludGVuZGVkIGZvciB1c2UgYnlcbiAqIGV4dGVybmFsIHVzZXJzLlxuICpcbiAqIFdlIGN1cnJlbnRseSBkbyBub3QgbWFrZSBhIG1hbmdsZWQgcm9sbHVwIGJ1aWxkIG9mIHRoZSBsaXQtc3NyIGNvZGUuIEluIG9yZGVyXG4gKiB0byBrZWVwIGEgbnVtYmVyIG9mIChvdGhlcndpc2UgcHJpdmF0ZSkgdG9wLWxldmVsIGV4cG9ydHMgIG1hbmdsZWQgaW4gdGhlXG4gKiBjbGllbnQgc2lkZSBjb2RlLCB3ZSBleHBvcnQgYSBfJExIIG9iamVjdCBjb250YWluaW5nIHRob3NlIG1lbWJlcnMgKG9yXG4gKiBoZWxwZXIgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIHByaXZhdGUgZmllbGRzIG9mIHRob3NlIG1lbWJlcnMpLCBhbmQgdGhlblxuICogcmUtZXhwb3J0IHRoZW0gZm9yIHVzZSBpbiBsaXQtc3NyLiBUaGlzIGtlZXBzIGxpdC1zc3IgYWdub3N0aWMgdG8gd2hldGhlciB0aGVcbiAqIGNsaWVudC1zaWRlIGNvZGUgaXMgYmVpbmcgdXNlZCBpbiBgZGV2YCBtb2RlIG9yIGBwcm9kYCBtb2RlLlxuICpcbiAqIFRoaXMgaGFzIGEgdW5pcXVlIG5hbWUsIHRvIGRpc2FtYmlndWF0ZSBpdCBmcm9tIHByaXZhdGUgZXhwb3J0cyBpblxuICogbGl0LWVsZW1lbnQsIHdoaWNoIHJlLWV4cG9ydHMgYWxsIG9mIGxpdC1odG1sLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBfJExIID0ge1xuICAvLyBVc2VkIGluIGxpdC1zc3JcbiAgX2JvdW5kQXR0cmlidXRlU3VmZml4OiBib3VuZEF0dHJpYnV0ZVN1ZmZpeCxcbiAgX21hcmtlcjogbWFya2VyLFxuICBfbWFya2VyTWF0Y2g6IG1hcmtlck1hdGNoLFxuICBfSFRNTF9SRVNVTFQ6IEhUTUxfUkVTVUxULFxuICBfZ2V0VGVtcGxhdGVIdG1sOiBnZXRUZW1wbGF0ZUh0bWwsXG4gIC8vIFVzZWQgaW4gaHlkcmF0ZVxuICBfVGVtcGxhdGVJbnN0YW5jZTogVGVtcGxhdGVJbnN0YW5jZSxcbiAgX2lzSXRlcmFibGU6IGlzSXRlcmFibGUsXG4gIF9yZXNvbHZlRGlyZWN0aXZlOiByZXNvbHZlRGlyZWN0aXZlLFxuICAvLyBVc2VkIGluIHRlc3RzIGFuZCBwcml2YXRlLXNzci1zdXBwb3J0XG4gIF9DaGlsZFBhcnQ6IENoaWxkUGFydCxcbiAgX0F0dHJpYnV0ZVBhcnQ6IEF0dHJpYnV0ZVBhcnQsXG4gIF9Cb29sZWFuQXR0cmlidXRlUGFydDogQm9vbGVhbkF0dHJpYnV0ZVBhcnQsXG4gIF9FdmVudFBhcnQ6IEV2ZW50UGFydCxcbiAgX1Byb3BlcnR5UGFydDogUHJvcGVydHlQYXJ0LFxuICBfRWxlbWVudFBhcnQ6IEVsZW1lbnRQYXJ0LFxufTtcblxuLy8gQXBwbHkgcG9seWZpbGxzIGlmIGF2YWlsYWJsZVxuY29uc3QgcG9seWZpbGxTdXBwb3J0ID0gREVWX01PREVcbiAgPyBnbG9iYWwubGl0SHRtbFBvbHlmaWxsU3VwcG9ydERldk1vZGVcbiAgOiBnbG9iYWwubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtcbnBvbHlmaWxsU3VwcG9ydD8uKFRlbXBsYXRlLCBDaGlsZFBhcnQpO1xuXG4vLyBJTVBPUlRBTlQ6IGRvIG5vdCBjaGFuZ2UgdGhlIHByb3BlcnR5IG5hbWUgb3IgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbi8vIFRoaXMgbGluZSB3aWxsIGJlIHVzZWQgaW4gcmVnZXhlcyB0byBzZWFyY2ggZm9yIGxpdC1odG1sIHVzYWdlLlxuKGdsb2JhbC5saXRIdG1sVmVyc2lvbnMgPz89IFtdKS5wdXNoKCcyLjYuMScpO1xuaWYgKERFVl9NT0RFICYmIGdsb2JhbC5saXRIdG1sVmVyc2lvbnMubGVuZ3RoID4gMSkge1xuICBpc3N1ZVdhcm5pbmchKFxuICAgICdtdWx0aXBsZS12ZXJzaW9ucycsXG4gICAgYE11bHRpcGxlIHZlcnNpb25zIG9mIExpdCBsb2FkZWQuIGAgK1xuICAgICAgYExvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgaXMgbm90IHJlY29tbWVuZGVkLmBcbiAgKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIGEgdmFsdWUsIHVzdWFsbHkgYSBsaXQtaHRtbCBUZW1wbGF0ZVJlc3VsdCwgdG8gdGhlIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgcmVuZGVycyB0aGUgdGV4dCBcIkhlbGxvLCBab2UhXCIgaW5zaWRlIGEgcGFyYWdyYXBoIHRhZywgYXBwZW5kaW5nXG4gKiBpdCB0byB0aGUgY29udGFpbmVyIGBkb2N1bWVudC5ib2R5YC5cbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtodG1sLCByZW5kZXJ9IGZyb20gJ2xpdCc7XG4gKlxuICogY29uc3QgbmFtZSA9IFwiWm9lXCI7XG4gKiByZW5kZXIoaHRtbGA8cD5IZWxsbywgJHtuYW1lfSE8L3A+YCwgZG9jdW1lbnQuYm9keSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgQW55IFtyZW5kZXJhYmxlXG4gKiAgIHZhbHVlXShodHRwczovL2xpdC5kZXYvZG9jcy90ZW1wbGF0ZXMvZXhwcmVzc2lvbnMvI2NoaWxkLWV4cHJlc3Npb25zKSxcbiAqICAgdHlwaWNhbGx5IGEge0BsaW5rY29kZSBUZW1wbGF0ZVJlc3VsdH0gY3JlYXRlZCBieSBldmFsdWF0aW5nIGEgdGVtcGxhdGUgdGFnXG4gKiAgIGxpa2Uge0BsaW5rY29kZSBodG1sfSBvciB7QGxpbmtjb2RlIHN2Z30uXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIGNvbnRhaW5lciB0byByZW5kZXIgdG8uIFRoZSBmaXJzdCByZW5kZXIgd2lsbCBhcHBlbmRcbiAqICAgdGhlIHJlbmRlcmVkIHZhbHVlIHRvIHRoZSBjb250YWluZXIsIGFuZCBzdWJzZXF1ZW50IHJlbmRlcnMgd2lsbFxuICogICBlZmZpY2llbnRseSB1cGRhdGUgdGhlIHJlbmRlcmVkIHZhbHVlIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhc1xuICogICBwcmV2aW91c2x5IHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgU2VlIHtAbGlua2NvZGUgUmVuZGVyT3B0aW9uc30gZm9yIG9wdGlvbnMgZG9jdW1lbnRhdGlvbi5cbiAqIEBzZWVcbiAqIHtAbGluayBodHRwczovL2xpdC5kZXYvZG9jcy9saWJyYXJpZXMvc3RhbmRhbG9uZS10ZW1wbGF0ZXMvI3JlbmRlcmluZy1saXQtaHRtbC10ZW1wbGF0ZXN8IFJlbmRlcmluZyBMaXQgSFRNTCBUZW1wbGF0ZXN9XG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAoXG4gIHZhbHVlOiB1bmtub3duLFxuICBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudCxcbiAgb3B0aW9ucz86IFJlbmRlck9wdGlvbnNcbik6IFJvb3RQYXJ0ID0+IHtcbiAgaWYgKERFVl9NT0RFICYmIGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgLy8gR2l2ZSBhIGNsZWFyZXIgZXJyb3IgbWVzc2FnZSB0aGFuXG4gICAgLy8gICAgIFVuY2F1Z2h0IFR5cGVFcnJvcjogQ2Fubm90IHJlYWQgcHJvcGVydGllcyBvZiBudWxsIChyZWFkaW5nXG4gICAgLy8gICAgICdfJGxpdFBhcnQkJylcbiAgICAvLyB3aGljaCByZWFkcyBsaWtlIGFuIGludGVybmFsIExpdCBlcnJvci5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvIG1heSBub3QgYmUgJHtjb250YWluZXJ9YCk7XG4gIH1cbiAgY29uc3QgcmVuZGVySWQgPSBERVZfTU9ERSA/IGRlYnVnTG9nUmVuZGVySWQrKyA6IDA7XG4gIGNvbnN0IHBhcnRPd25lck5vZGUgPSBvcHRpb25zPy5yZW5kZXJCZWZvcmUgPz8gY29udGFpbmVyO1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBsZXQgcGFydDogQ2hpbGRQYXJ0ID0gKHBhcnRPd25lck5vZGUgYXMgYW55KVsnXyRsaXRQYXJ0JCddO1xuICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgIGtpbmQ6ICdiZWdpbiByZW5kZXInLFxuICAgIGlkOiByZW5kZXJJZCxcbiAgICB2YWx1ZSxcbiAgICBjb250YWluZXIsXG4gICAgb3B0aW9ucyxcbiAgICBwYXJ0LFxuICB9KTtcbiAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGVuZE5vZGUgPSBvcHRpb25zPy5yZW5kZXJCZWZvcmUgPz8gbnVsbDtcbiAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgKHBhcnRPd25lck5vZGUgYXMgYW55KVsnXyRsaXRQYXJ0JCddID0gcGFydCA9IG5ldyBDaGlsZFBhcnQoXG4gICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBlbmROb2RlKSxcbiAgICAgIGVuZE5vZGUsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBvcHRpb25zID8/IHt9XG4gICAgKTtcbiAgfVxuICBwYXJ0Ll8kc2V0VmFsdWUodmFsdWUpO1xuICBkZWJ1Z0xvZ0V2ZW50Py4oe1xuICAgIGtpbmQ6ICdlbmQgcmVuZGVyJyxcbiAgICBpZDogcmVuZGVySWQsXG4gICAgdmFsdWUsXG4gICAgY29udGFpbmVyLFxuICAgIG9wdGlvbnMsXG4gICAgcGFydCxcbiAgfSk7XG4gIHJldHVybiBwYXJ0IGFzIFJvb3RQYXJ0O1xufTtcblxuaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICByZW5kZXIuc2V0U2FuaXRpemVyID0gc2V0U2FuaXRpemVyO1xuICByZW5kZXIuY3JlYXRlU2FuaXRpemVyID0gY3JlYXRlU2FuaXRpemVyO1xuICBpZiAoREVWX01PREUpIHtcbiAgICByZW5kZXIuX3Rlc3RPbmx5Q2xlYXJTYW5pdGl6ZXJGYWN0b3J5RG9Ob3RDYWxsT3JFbHNlID1cbiAgICAgIF90ZXN0T25seUNsZWFyU2FuaXRpemVyRmFjdG9yeURvTm90Q2FsbE9yRWxzZTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIFRoZSBtYWluIExpdEVsZW1lbnQgbW9kdWxlLCB3aGljaCBkZWZpbmVzIHRoZSB7QGxpbmtjb2RlIExpdEVsZW1lbnR9IGJhc2VcbiAqIGNsYXNzIGFuZCByZWxhdGVkIEFQSXMuXG4gKlxuICogIExpdEVsZW1lbnQgY29tcG9uZW50cyBjYW4gZGVmaW5lIGEgdGVtcGxhdGUgYW5kIGEgc2V0IG9mIG9ic2VydmVkXG4gKiBwcm9wZXJ0aWVzLiBDaGFuZ2luZyBhbiBvYnNlcnZlZCBwcm9wZXJ0eSB0cmlnZ2VycyBhIHJlLXJlbmRlciBvZiB0aGVcbiAqIGVsZW1lbnQuXG4gKlxuICogIEltcG9ydCB7QGxpbmtjb2RlIExpdEVsZW1lbnR9IGFuZCB7QGxpbmtjb2RlIGh0bWx9IGZyb20gdGhpcyBtb2R1bGUgdG9cbiAqIGNyZWF0ZSBhIGNvbXBvbmVudDpcbiAqXG4gKiAgYGBganNcbiAqIGltcG9ydCB7TGl0RWxlbWVudCwgaHRtbH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuICpcbiAqIGNsYXNzIE15RWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICpcbiAqICAgLy8gRGVjbGFyZSBvYnNlcnZlZCBwcm9wZXJ0aWVzXG4gKiAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgYWRqZWN0aXZlOiB7fVxuICogICAgIH1cbiAqICAgfVxuICpcbiAqICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICAgdGhpcy5hZGplY3RpdmUgPSAnYXdlc29tZSc7XG4gKiAgIH1cbiAqXG4gKiAgIC8vIERlZmluZSB0aGUgZWxlbWVudCdzIHRlbXBsYXRlXG4gKiAgIHJlbmRlcigpIHtcbiAqICAgICByZXR1cm4gaHRtbGA8cD55b3VyICR7YWRqZWN0aXZlfSB0ZW1wbGF0ZSBoZXJlPC9wPmA7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWVsZW1lbnQnLCBNeUVsZW1lbnQpO1xuICogYGBgXG4gKlxuICogYExpdEVsZW1lbnRgIGV4dGVuZHMge0BsaW5rY29kZSBSZWFjdGl2ZUVsZW1lbnR9IGFuZCBhZGRzIGxpdC1odG1sXG4gKiB0ZW1wbGF0aW5nLiBUaGUgYFJlYWN0aXZlRWxlbWVudGAgY2xhc3MgaXMgcHJvdmlkZWQgZm9yIHVzZXJzIHRoYXQgd2FudCB0b1xuICogYnVpbGQgdGhlaXIgb3duIGN1c3RvbSBlbGVtZW50IGJhc2UgY2xhc3NlcyB0aGF0IGRvbid0IHVzZSBsaXQtaHRtbC5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuaW1wb3J0IHtQcm9wZXJ0eVZhbHVlcywgUmVhY3RpdmVFbGVtZW50fSBmcm9tICdAbGl0L3JlYWN0aXZlLWVsZW1lbnQnO1xuaW1wb3J0IHtyZW5kZXIsIFJlbmRlck9wdGlvbnMsIG5vQ2hhbmdlLCBSb290UGFydH0gZnJvbSAnbGl0LWh0bWwnO1xuZXhwb3J0ICogZnJvbSAnQGxpdC9yZWFjdGl2ZS1lbGVtZW50JztcbmV4cG9ydCAqIGZyb20gJ2xpdC1odG1sJztcblxuaW1wb3J0IHtMaXRVbnN0YWJsZX0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtSZWFjdGl2ZVVuc3RhYmxlfSBmcm9tICdAbGl0L3JlYWN0aXZlLWVsZW1lbnQnO1xuXG4vKipcbiAqIENvbnRhaW5zIHR5cGVzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIHVuc3RhYmxlIGRlYnVnIEFQSS5cbiAqXG4gKiBFdmVyeXRoaW5nIGluIHRoaXMgQVBJIGlzIG5vdCBzdGFibGUgYW5kIG1heSBjaGFuZ2Ugb3IgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLFxuICogZXZlbiBvbiBwYXRjaCByZWxlYXNlcy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgVW5zdGFibGUge1xuICAvKipcbiAgICogV2hlbiBMaXQgaXMgcnVubmluZyBpbiBkZXYgbW9kZSBhbmQgYHdpbmRvdy5lbWl0TGl0RGVidWdMb2dFdmVudHNgIGlzIHRydWUsXG4gICAqIHdlIHdpbGwgZW1pdCAnbGl0LWRlYnVnJyBldmVudHMgdG8gd2luZG93LCB3aXRoIGxpdmUgZGV0YWlscyBhYm91dCB0aGUgdXBkYXRlIGFuZCByZW5kZXJcbiAgICogbGlmZWN5Y2xlLiBUaGVzZSBjYW4gYmUgdXNlZnVsIGZvciB3cml0aW5nIGRlYnVnIHRvb2xpbmcgYW5kIHZpc3VhbGl6YXRpb25zLlxuICAgKlxuICAgKiBQbGVhc2UgYmUgYXdhcmUgdGhhdCBydW5uaW5nIHdpdGggd2luZG93LmVtaXRMaXREZWJ1Z0xvZ0V2ZW50cyBoYXMgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsXG4gICAqIG1ha2luZyBjZXJ0YWluIG9wZXJhdGlvbnMgdGhhdCBhcmUgbm9ybWFsbHkgdmVyeSBjaGVhcCAobGlrZSBhIG5vLW9wIHJlbmRlcikgbXVjaCBzbG93ZXIsXG4gICAqIGJlY2F1c2Ugd2UgbXVzdCBjb3B5IGRhdGEgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG4gIGV4cG9ydCBuYW1lc3BhY2UgRGVidWdMb2cge1xuICAgIGV4cG9ydCB0eXBlIEVudHJ5ID1cbiAgICAgIHwgTGl0VW5zdGFibGUuRGVidWdMb2cuRW50cnlcbiAgICAgIHwgUmVhY3RpdmVVbnN0YWJsZS5EZWJ1Z0xvZy5FbnRyeTtcbiAgfVxufVxuXG4vLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZXhwb3J0IFJlYWN0aXZlRWxlbWVudCBhcyBVcGRhdGluZ0VsZW1lbnQuIE5vdGUsXG4vLyBJRSB0cmFuc3BpbGF0aW9uIHJlcXVpcmVzIGV4cG9ydGluZyBsaWtlIHRoaXMuXG5leHBvcnQgY29uc3QgVXBkYXRpbmdFbGVtZW50ID0gUmVhY3RpdmVFbGVtZW50O1xuXG5jb25zdCBERVZfTU9ERSA9IHRydWU7XG5cbmxldCBpc3N1ZVdhcm5pbmc6IChjb2RlOiBzdHJpbmcsIHdhcm5pbmc6IHN0cmluZykgPT4gdm9pZDtcblxuaWYgKERFVl9NT0RFKSB7XG4gIC8vIEVuc3VyZSB3YXJuaW5ncyBhcmUgaXNzdWVkIG9ubHkgMXgsIGV2ZW4gaWYgbXVsdGlwbGUgdmVyc2lvbnMgb2YgTGl0XG4gIC8vIGFyZSBsb2FkZWQuXG4gIGNvbnN0IGlzc3VlZFdhcm5pbmdzOiBTZXQ8c3RyaW5nIHwgdW5kZWZpbmVkPiA9XG4gICAgKGdsb2JhbFRoaXMubGl0SXNzdWVkV2FybmluZ3MgPz89IG5ldyBTZXQoKSk7XG5cbiAgLy8gSXNzdWUgYSB3YXJuaW5nLCBpZiB3ZSBoYXZlbid0IGFscmVhZHkuXG4gIGlzc3VlV2FybmluZyA9IChjb2RlOiBzdHJpbmcsIHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICAgIHdhcm5pbmcgKz0gYCBTZWUgaHR0cHM6Ly9saXQuZGV2L21zZy8ke2NvZGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLmA7XG4gICAgaWYgKCFpc3N1ZWRXYXJuaW5ncy5oYXMod2FybmluZykpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICAgIGlzc3VlZFdhcm5pbmdzLmFkZCh3YXJuaW5nKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQmFzZSBlbGVtZW50IGNsYXNzIHRoYXQgbWFuYWdlcyBlbGVtZW50IHByb3BlcnRpZXMgYW5kIGF0dHJpYnV0ZXMsIGFuZFxuICogcmVuZGVycyBhIGxpdC1odG1sIHRlbXBsYXRlLlxuICpcbiAqIFRvIGRlZmluZSBhIGNvbXBvbmVudCwgc3ViY2xhc3MgYExpdEVsZW1lbnRgIGFuZCBpbXBsZW1lbnQgYVxuICogYHJlbmRlcmAgbWV0aG9kIHRvIHByb3ZpZGUgdGhlIGNvbXBvbmVudCdzIHRlbXBsYXRlLiBEZWZpbmUgcHJvcGVydGllc1xuICogdXNpbmcgdGhlIHtAbGlua2NvZGUgTGl0RWxlbWVudC5wcm9wZXJ0aWVzIHByb3BlcnRpZXN9IHByb3BlcnR5IG9yIHRoZVxuICoge0BsaW5rY29kZSBwcm9wZXJ0eX0gZGVjb3JhdG9yLlxuICovXG5leHBvcnQgY2xhc3MgTGl0RWxlbWVudCBleHRlbmRzIFJlYWN0aXZlRWxlbWVudCB7XG4gIC8qKlxuICAgKiBFbnN1cmUgdGhpcyBjbGFzcyBpcyBtYXJrZWQgYXMgYGZpbmFsaXplZGAgYXMgYW4gb3B0aW1pemF0aW9uIGVuc3VyaW5nXG4gICAqIGl0IHdpbGwgbm90IG5lZWRsZXNzbHkgdHJ5IHRvIGBmaW5hbGl6ZWAuXG4gICAqXG4gICAqIE5vdGUgdGhpcyBwcm9wZXJ0eSBuYW1lIGlzIGEgc3RyaW5nIHRvIHByZXZlbnQgYnJlYWtpbmcgQ2xvc3VyZSBKUyBDb21waWxlclxuICAgKiBvcHRpbWl6YXRpb25zLiBTZWUgQGxpdC9yZWFjdGl2ZS1lbGVtZW50IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyBvdmVycmlkZSBbJ2ZpbmFsaXplZCddID0gdHJ1ZTtcblxuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICBzdGF0aWMgWydfJGxpdEVsZW1lbnQkJ10gPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAY2F0ZWdvcnkgcmVuZGVyaW5nXG4gICAqL1xuICByZWFkb25seSByZW5kZXJPcHRpb25zOiBSZW5kZXJPcHRpb25zID0ge2hvc3Q6IHRoaXN9O1xuXG4gIHByaXZhdGUgX19jaGlsZFBhcnQ6IFJvb3RQYXJ0IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBAY2F0ZWdvcnkgcmVuZGVyaW5nXG4gICAqL1xuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICBjb25zdCByZW5kZXJSb290ID0gc3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO1xuICAgIC8vIFdoZW4gYWRvcHRlZFN0eWxlU2hlZXRzIGFyZSBzaGltbWVkLCB0aGV5IGFyZSBpbnNlcnRlZCBpbnRvIHRoZVxuICAgIC8vIHNoYWRvd1Jvb3QgYnkgY3JlYXRlUmVuZGVyUm9vdC4gQWRqdXN0IHRoZSByZW5kZXJCZWZvcmUgbm9kZSBzbyB0aGF0XG4gICAgLy8gYW55IHN0eWxlcyBpbiBMaXQgY29udGVudCByZW5kZXIgYmVmb3JlIGFkb3B0ZWRTdHlsZVNoZWV0cy4gVGhpcyBpc1xuICAgIC8vIGltcG9ydGFudCBzbyB0aGF0IGFkb3B0ZWRTdHlsZVNoZWV0cyBoYXZlIHByZWNlZGVuY2Ugb3ZlciBzdHlsZXMgaW5cbiAgICAvLyB0aGUgc2hhZG93Um9vdC5cbiAgICB0aGlzLnJlbmRlck9wdGlvbnMucmVuZGVyQmVmb3JlID8/PSByZW5kZXJSb290IS5maXJzdENoaWxkIGFzIENoaWxkTm9kZTtcbiAgICByZXR1cm4gcmVuZGVyUm9vdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBlbGVtZW50LiBUaGlzIG1ldGhvZCByZWZsZWN0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYXR0cmlidXRlc1xuICAgKiBhbmQgY2FsbHMgYHJlbmRlcmAgdG8gcmVuZGVyIERPTSB2aWEgbGl0LWh0bWwuIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGVcbiAgICogdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLlxuICAgKiBAcGFyYW0gY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICogQGNhdGVnb3J5IHVwZGF0ZXNcbiAgICovXG4gIHByb3RlY3RlZCBvdmVycmlkZSB1cGRhdGUoY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gICAgLy8gU2V0dGluZyBwcm9wZXJ0aWVzIGluIGByZW5kZXJgIHNob3VsZCBub3QgdHJpZ2dlciBhbiB1cGRhdGUuIFNpbmNlXG4gICAgLy8gdXBkYXRlcyBhcmUgYWxsb3dlZCBhZnRlciBzdXBlci51cGRhdGUsIGl0J3MgaW1wb3J0YW50IHRvIGNhbGwgYHJlbmRlcmBcbiAgICAvLyBiZWZvcmUgdGhhdC5cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucmVuZGVyKCk7XG4gICAgaWYgKCF0aGlzLmhhc1VwZGF0ZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZCA9IHRoaXMuaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIHN1cGVyLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgdGhpcy5fX2NoaWxkUGFydCA9IHJlbmRlcih2YWx1ZSwgdGhpcy5yZW5kZXJSb290LCB0aGlzLnJlbmRlck9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFkZGVkIHRvIHRoZSBkb2N1bWVudCdzIERPTS5cbiAgICpcbiAgICogSW4gYGNvbm5lY3RlZENhbGxiYWNrKClgIHlvdSBzaG91bGQgc2V0dXAgdGFza3MgdGhhdCBzaG91bGQgb25seSBvY2N1ciB3aGVuXG4gICAqIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQuIFRoZSBtb3N0IGNvbW1vbiBvZiB0aGVzZSBpc1xuICAgKiBhZGRpbmcgZXZlbnQgbGlzdGVuZXJzIHRvIG5vZGVzIGV4dGVybmFsIHRvIHRoZSBlbGVtZW50LCBsaWtlIGEga2V5ZG93blxuICAgKiBldmVudCBoYW5kbGVyIGFkZGVkIHRvIHRoZSB3aW5kb3cuXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgKiAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAqICAgYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUtleWRvd24pO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBUeXBpY2FsbHksIGFueXRoaW5nIGRvbmUgaW4gYGNvbm5lY3RlZENhbGxiYWNrKClgIHNob3VsZCBiZSB1bmRvbmUgd2hlbiB0aGVcbiAgICogZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQsIGluIGBkaXNjb25uZWN0ZWRDYWxsYmFjaygpYC5cbiAgICpcbiAgICogQGNhdGVnb3J5IGxpZmVjeWNsZVxuICAgKi9cbiAgb3ZlcnJpZGUgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLl9fY2hpbGRQYXJ0Py5zZXRDb25uZWN0ZWQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBkb2N1bWVudCdzIERPTS5cbiAgICpcbiAgICogVGhpcyBjYWxsYmFjayBpcyB0aGUgbWFpbiBzaWduYWwgdG8gdGhlIGVsZW1lbnQgdGhhdCBpdCBtYXkgbm8gbG9uZ2VyIGJlXG4gICAqIHVzZWQuIGBkaXNjb25uZWN0ZWRDYWxsYmFjaygpYCBzaG91bGQgZW5zdXJlIHRoYXQgbm90aGluZyBpcyBob2xkaW5nIGFcbiAgICogcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IChzdWNoIGFzIGV2ZW50IGxpc3RlbmVycyBhZGRlZCB0byBub2RlcyBleHRlcm5hbFxuICAgKiB0byB0aGUgZWxlbWVudCksIHNvIHRoYXQgaXQgaXMgZnJlZSB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC5cbiAgICpcbiAgICogYGBgdHNcbiAgICogZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAqICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICogICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUtleWRvd24pO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBBbiBlbGVtZW50IG1heSBiZSByZS1jb25uZWN0ZWQgYWZ0ZXIgYmVpbmcgZGlzY29ubmVjdGVkLlxuICAgKlxuICAgKiBAY2F0ZWdvcnkgbGlmZWN5Y2xlXG4gICAqL1xuICBvdmVycmlkZSBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuX19jaGlsZFBhcnQ/LnNldENvbm5lY3RlZChmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBvbiBlYWNoIHVwZGF0ZSB0byBwZXJmb3JtIHJlbmRlcmluZyB0YXNrcy4gVGhpcyBtZXRob2QgbWF5IHJldHVyblxuICAgKiBhbnkgdmFsdWUgcmVuZGVyYWJsZSBieSBsaXQtaHRtbCdzIGBDaGlsZFBhcnRgIC0gdHlwaWNhbGx5IGFcbiAgICogYFRlbXBsYXRlUmVzdWx0YC4gU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXJcbiAgICogdGhlIGVsZW1lbnQgdG8gdXBkYXRlLlxuICAgKiBAY2F0ZWdvcnkgcmVuZGVyaW5nXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVuZGVyKCk6IHVua25vd24ge1xuICAgIHJldHVybiBub0NoYW5nZTtcbiAgfVxufVxuXG4vLyBJbnN0YWxsIGh5ZHJhdGlvbiBpZiBhdmFpbGFibGVcbmdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0Py4oe0xpdEVsZW1lbnR9KTtcblxuLy8gQXBwbHkgcG9seWZpbGxzIGlmIGF2YWlsYWJsZVxuY29uc3QgcG9seWZpbGxTdXBwb3J0ID0gREVWX01PREVcbiAgPyBnbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnREZXZNb2RlXG4gIDogZ2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O1xucG9seWZpbGxTdXBwb3J0Py4oe0xpdEVsZW1lbnR9KTtcblxuLy8gREVWIG1vZGUgd2FybmluZ3NcbmlmIChERVZfTU9ERSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gIC8vIE5vdGUsIGZvciBjb21wYXRpYmlsaXR5IHdpdGggY2xvc3VyZSBjb21waWxhdGlvbiwgdGhpcyBhY2Nlc3NcbiAgLy8gbmVlZHMgdG8gYmUgYXMgYSBzdHJpbmcgcHJvcGVydHkgaW5kZXguXG4gIChMaXRFbGVtZW50IGFzIGFueSlbJ2ZpbmFsaXplJ10gPSBmdW5jdGlvbiAodGhpczogdHlwZW9mIExpdEVsZW1lbnQpIHtcbiAgICBjb25zdCBmaW5hbGl6ZWQgPSAoUmVhY3RpdmVFbGVtZW50IGFzIGFueSkuZmluYWxpemUuY2FsbCh0aGlzKTtcbiAgICBpZiAoIWZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB3YXJuUmVtb3ZlZE9yUmVuYW1lZCA9IChvYmo6IGFueSwgbmFtZTogc3RyaW5nLCByZW5hbWVkID0gZmFsc2UpID0+IHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29uc3QgY3Rvck5hbWUgPSAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyA/IG9iaiA6IG9iai5jb25zdHJ1Y3RvcilcbiAgICAgICAgICAubmFtZTtcbiAgICAgICAgaXNzdWVXYXJuaW5nKFxuICAgICAgICAgIHJlbmFtZWQgPyAncmVuYW1lZC1hcGknIDogJ3JlbW92ZWQtYXBpJyxcbiAgICAgICAgICBgXFxgJHtuYW1lfVxcYCBpcyBpbXBsZW1lbnRlZCBvbiBjbGFzcyAke2N0b3JOYW1lfS4gSXQgYCArXG4gICAgICAgICAgICBgaGFzIGJlZW4gJHtyZW5hbWVkID8gJ3JlbmFtZWQnIDogJ3JlbW92ZWQnfSBgICtcbiAgICAgICAgICAgIGBpbiB0aGlzIHZlcnNpb24gb2YgTGl0RWxlbWVudC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXJuUmVtb3ZlZE9yUmVuYW1lZCh0aGlzLCAncmVuZGVyJyk7XG4gICAgd2FyblJlbW92ZWRPclJlbmFtZWQodGhpcywgJ2dldFN0eWxlcycsIHRydWUpO1xuICAgIHdhcm5SZW1vdmVkT3JSZW5hbWVkKCh0aGlzIGFzIHR5cGVvZiBMaXRFbGVtZW50KS5wcm90b3R5cGUsICdhZG9wdFN0eWxlcycpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbn1cblxuLyoqXG4gKiBFTkQgVVNFUlMgU0hPVUxEIE5PVCBSRUxZIE9OIFRISVMgT0JKRUNULlxuICpcbiAqIFByaXZhdGUgZXhwb3J0cyBmb3IgdXNlIGJ5IG90aGVyIExpdCBwYWNrYWdlcywgbm90IGludGVuZGVkIGZvciB1c2UgYnlcbiAqIGV4dGVybmFsIHVzZXJzLlxuICpcbiAqIFdlIGN1cnJlbnRseSBkbyBub3QgbWFrZSBhIG1hbmdsZWQgcm9sbHVwIGJ1aWxkIG9mIHRoZSBsaXQtc3NyIGNvZGUuIEluIG9yZGVyXG4gKiB0byBrZWVwIGEgbnVtYmVyIG9mIChvdGhlcndpc2UgcHJpdmF0ZSkgdG9wLWxldmVsIGV4cG9ydHMgIG1hbmdsZWQgaW4gdGhlXG4gKiBjbGllbnQgc2lkZSBjb2RlLCB3ZSBleHBvcnQgYSBfJExFIG9iamVjdCBjb250YWluaW5nIHRob3NlIG1lbWJlcnMgKG9yXG4gKiBoZWxwZXIgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIHByaXZhdGUgZmllbGRzIG9mIHRob3NlIG1lbWJlcnMpLCBhbmQgdGhlblxuICogcmUtZXhwb3J0IHRoZW0gZm9yIHVzZSBpbiBsaXQtc3NyLiBUaGlzIGtlZXBzIGxpdC1zc3IgYWdub3N0aWMgdG8gd2hldGhlciB0aGVcbiAqIGNsaWVudC1zaWRlIGNvZGUgaXMgYmVpbmcgdXNlZCBpbiBgZGV2YCBtb2RlIG9yIGBwcm9kYCBtb2RlLlxuICpcbiAqIFRoaXMgaGFzIGEgdW5pcXVlIG5hbWUsIHRvIGRpc2FtYmlndWF0ZSBpdCBmcm9tIHByaXZhdGUgZXhwb3J0cyBpblxuICogbGl0LWh0bWwsIHNpbmNlIHRoaXMgbW9kdWxlIHJlLWV4cG9ydHMgYWxsIG9mIGxpdC1odG1sLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBfJExFID0ge1xuICBfJGF0dHJpYnV0ZVRvUHJvcGVydHk6IChcbiAgICBlbDogTGl0RWxlbWVudCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bGxcbiAgKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgKGVsIGFzIGFueSkuXyRhdHRyaWJ1dGVUb1Byb3BlcnR5KG5hbWUsIHZhbHVlKTtcbiAgfSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIF8kY2hhbmdlZFByb3BlcnRpZXM6IChlbDogTGl0RWxlbWVudCkgPT4gKGVsIGFzIGFueSkuXyRjaGFuZ2VkUHJvcGVydGllcyxcbn07XG5cbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgTGl0RWxlbWVudCB1c2FnZS5cbihnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucyA/Pz0gW10pLnB1c2goJzMuMi4yJyk7XG5pZiAoREVWX01PREUgJiYgZ2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnMubGVuZ3RoID4gMSkge1xuICBpc3N1ZVdhcm5pbmchKFxuICAgICdtdWx0aXBsZS12ZXJzaW9ucycsXG4gICAgYE11bHRpcGxlIHZlcnNpb25zIG9mIExpdCBsb2FkZWQuIExvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgYCArXG4gICAgICBgaXMgbm90IHJlY29tbWVuZGVkLmBcbiAgKTtcbn1cbiIsICJleHBvcnQgY29uc3QgaWNvbm9pciA9IEpTT04ucGFyc2UoYHtcbiAgXCIxc3QtbWVkYWxcIjpcImljb25vaXItMXN0LW1lZGFsXCIsXG4gIFwiMngyLWNlbGxcIjpcImljb25vaXItMngyLWNlbGxcIixcbiAgXCIzNjAtdmlld1wiOlwiaWNvbm9pci0zNjAtdmlld1wiLFxuICBcIjNkLWFkZC1ob2xlXCI6XCJpY29ub2lyLTNkLWFkZC1ob2xlXCIsXG4gIFwiM2QtYXJjLWNlbnRlci1wdFwiOlwiaWNvbm9pci0zZC1hcmMtY2VudGVyLXB0XCIsXG4gIFwiM2QtYXJjXCI6XCJpY29ub2lyLTNkLWFyY1wiLFxuICBcIjNkLWJyaWRnZVwiOlwiaWNvbm9pci0zZC1icmlkZ2VcIixcbiAgXCIzZC1jZW50ZXItYm94XCI6XCJpY29ub2lyLTNkLWNlbnRlci1ib3hcIixcbiAgXCIzZC1lbGxpcHNlLXRocmVlLXB0c1wiOlwiaWNvbm9pci0zZC1lbGxpcHNlLXRocmVlLXB0c1wiLFxuICBcIjNkLWVsbGlwc2VcIjpcImljb25vaXItM2QtZWxsaXBzZVwiLFxuICBcIjNkLXB0LWJveFwiOlwiaWNvbm9pci0zZC1wdC1ib3hcIixcbiAgXCIzZC1yZWN0LWNvcm5lci10by1jb3JuZXJcIjpcImljb25vaXItM2QtcmVjdC1jb3JuZXItdG8tY29ybmVyXCIsXG4gIFwiM2QtcmVjdC1mcm9tLWNlbnRlclwiOlwiaWNvbm9pci0zZC1yZWN0LWZyb20tY2VudGVyXCIsXG4gIFwiM2QtcmVjdC10aHJlZS1wdHNcIjpcImljb25vaXItM2QtcmVjdC10aHJlZS1wdHNcIixcbiAgXCIzZC1zZWxlY3QtZWRnZVwiOlwiaWNvbm9pci0zZC1zZWxlY3QtZWRnZVwiLFxuICBcIjNkLXNlbGVjdC1mYWNlXCI6XCJpY29ub2lyLTNkLXNlbGVjdC1mYWNlXCIsXG4gIFwiM2Qtc2VsZWN0LXBvaW50XCI6XCJpY29ub2lyLTNkLXNlbGVjdC1wb2ludFwiLFxuICBcIjNkLXNlbGVjdC1zb2xpZFwiOlwiaWNvbm9pci0zZC1zZWxlY3Qtc29saWRcIixcbiAgXCIzZC10aHJlZS1wdHMtYm94XCI6XCJpY29ub2lyLTNkLXRocmVlLXB0cy1ib3hcIixcbiAgXCI0ay1kaXNwbGF5XCI6XCJpY29ub2lyLTRrLWRpc3BsYXlcIixcbiAgXCJhY2Nlc3NpYmlsaXR5LXNpZ25cIjpcImljb25vaXItYWNjZXNzaWJpbGl0eS1zaWduXCIsXG4gIFwiYWNjZXNzaWJpbGl0eS10ZWNoXCI6XCJpY29ub2lyLWFjY2Vzc2liaWxpdHktdGVjaFwiLFxuICBcImFjY2Vzc2liaWxpdHlcIjpcImljb25vaXItYWNjZXNzaWJpbGl0eVwiLFxuICBcImFjdGl2aXR5XCI6XCJpY29ub2lyLWFjdGl2aXR5XCIsXG4gIFwiYWRkLWNpcmNsZVwiOlwiaWNvbm9pci1hZGQtY2lyY2xlXCIsXG4gIFwiYWRkLWRhdGFiYXNlLXNjcmlwdFwiOlwiaWNvbm9pci1hZGQtZGF0YWJhc2Utc2NyaXB0XCIsXG4gIFwiYWRkLWZvbGRlclwiOlwiaWNvbm9pci1hZGQtZm9sZGVyXCIsXG4gIFwiYWRkLWZyYW1lXCI6XCJpY29ub2lyLWFkZC1mcmFtZVwiLFxuICBcImFkZC1oZXhhZ29uXCI6XCJpY29ub2lyLWFkZC1oZXhhZ29uXCIsXG4gIFwiYWRkLWtleWZyYW1lLWFsdFwiOlwiaWNvbm9pci1hZGQta2V5ZnJhbWUtYWx0XCIsXG4gIFwiYWRkLWtleWZyYW1lXCI6XCJpY29ub2lyLWFkZC1rZXlmcmFtZVwiLFxuICBcImFkZC1rZXlmcmFtZXNcIjpcImljb25vaXItYWRkLWtleWZyYW1lc1wiLFxuICBcImFkZC1sZW5zXCI6XCJpY29ub2lyLWFkZC1sZW5zXCIsXG4gIFwiYWRkLW1lZGlhLWltYWdlXCI6XCJpY29ub2lyLWFkZC1tZWRpYS1pbWFnZVwiLFxuICBcImFkZC1tZWRpYS12aWRlb1wiOlwiaWNvbm9pci1hZGQtbWVkaWEtdmlkZW9cIixcbiAgXCJhZGQtcGFnZS1hbHRcIjpcImljb25vaXItYWRkLXBhZ2UtYWx0XCIsXG4gIFwiYWRkLXBhZ2VcIjpcImljb25vaXItYWRkLXBhZ2VcIixcbiAgXCJhZGQtcGluLWFsdFwiOlwiaWNvbm9pci1hZGQtcGluLWFsdFwiLFxuICBcImFkZC1zZWxlY3Rpb25cIjpcImljb25vaXItYWRkLXNlbGVjdGlvblwiLFxuICBcImFkZC1zcXVhcmVcIjpcImljb25vaXItYWRkLXNxdWFyZVwiLFxuICBcImFkZC10by1jYXJ0XCI6XCJpY29ub2lyLWFkZC10by1jYXJ0XCIsXG4gIFwiYWRkLXVzZXJcIjpcImljb25vaXItYWRkLXVzZXJcIixcbiAgXCJhZnJpY2FuLXRyZWVcIjpcImljb25vaXItYWZyaWNhbi10cmVlXCIsXG4gIFwiYWdpbGVcIjpcImljb25vaXItYWdpbGVcIixcbiAgXCJhaXItY29uZGl0aW9uZXJcIjpcImljb25vaXItYWlyLWNvbmRpdGlvbmVyXCIsXG4gIFwiYWlycGxhbmUtaGVsaXgtNDVkZWdcIjpcImljb25vaXItYWlycGxhbmUtaGVsaXgtNDVkZWdcIixcbiAgXCJhaXJwbGFuZS1oZWxpeFwiOlwiaWNvbm9pci1haXJwbGFuZS1oZWxpeFwiLFxuICBcImFpcnBsYW5lLW9mZlwiOlwiaWNvbm9pci1haXJwbGFuZS1vZmZcIixcbiAgXCJhaXJwbGFuZS1yb3RhdGlvblwiOlwiaWNvbm9pci1haXJwbGFuZS1yb3RhdGlvblwiLFxuICBcImFpcnBsYW5lXCI6XCJpY29ub2lyLWFpcnBsYW5lXCIsXG4gIFwiYWlycGxheVwiOlwiaWNvbm9pci1haXJwbGF5XCIsXG4gIFwiYWxhcm1cIjpcImljb25vaXItYWxhcm1cIixcbiAgXCJhbGJ1bS1jYXJvdXNlbFwiOlwiaWNvbm9pci1hbGJ1bS1jYXJvdXNlbFwiLFxuICBcImFsYnVtLWxpc3RcIjpcImljb25vaXItYWxidW0tbGlzdFwiLFxuICBcImFsYnVtLW9wZW5cIjpcImljb25vaXItYWxidW0tb3BlblwiLFxuICBcImFsYnVtXCI6XCJpY29ub2lyLWFsYnVtXCIsXG4gIFwiYWxpZ24tYm90dG9tLWJveFwiOlwiaWNvbm9pci1hbGlnbi1ib3R0b20tYm94XCIsXG4gIFwiYWxpZ24tY2VudGVyXCI6XCJpY29ub2lyLWFsaWduLWNlbnRlclwiLFxuICBcImFsaWduLWp1c3RpZnlcIjpcImljb25vaXItYWxpZ24tanVzdGlmeVwiLFxuICBcImFsaWduLWxlZnQtYm94XCI6XCJpY29ub2lyLWFsaWduLWxlZnQtYm94XCIsXG4gIFwiYWxpZ24tbGVmdFwiOlwiaWNvbm9pci1hbGlnbi1sZWZ0XCIsXG4gIFwiYWxpZ24tcmlnaHQtYm94XCI6XCJpY29ub2lyLWFsaWduLXJpZ2h0LWJveFwiLFxuICBcImFsaWduLXJpZ2h0XCI6XCJpY29ub2lyLWFsaWduLXJpZ2h0XCIsXG4gIFwiYWxpZ24tdG9wLWJveFwiOlwiaWNvbm9pci1hbGlnbi10b3AtYm94XCIsXG4gIFwiYW5nbGUtdG9vbFwiOlwiaWNvbm9pci1hbmdsZS10b29sXCIsXG4gIFwiYW50ZW5uYS1vZmZcIjpcImljb25vaXItYW50ZW5uYS1vZmZcIixcbiAgXCJhbnRlbm5hLXNpZ25hbC10YWdcIjpcImljb25vaXItYW50ZW5uYS1zaWduYWwtdGFnXCIsXG4gIFwiYW50ZW5uYS1zaWduYWxcIjpcImljb25vaXItYW50ZW5uYS1zaWduYWxcIixcbiAgXCJhbnRlbm5hXCI6XCJpY29ub2lyLWFudGVubmFcIixcbiAgXCJhcHAtbm90aWZpY2F0aW9uXCI6XCJpY29ub2lyLWFwcC1ub3RpZmljYXRpb25cIixcbiAgXCJhcHAtd2luZG93XCI6XCJpY29ub2lyLWFwcC13aW5kb3dcIixcbiAgXCJhcHBsZS1oYWxmLWFsdFwiOlwiaWNvbm9pci1hcHBsZS1oYWxmLWFsdFwiLFxuICBcImFwcGxlLWhhbGZcIjpcImljb25vaXItYXBwbGUtaGFsZlwiLFxuICBcImFwcGxlLWltYWMtMjAyMS1zaWRlXCI6XCJpY29ub2lyLWFwcGxlLWltYWMtMjAyMS1zaWRlXCIsXG4gIFwiYXBwbGUtaW1hYy0yMDIxXCI6XCJpY29ub2lyLWFwcGxlLWltYWMtMjAyMVwiLFxuICBcImFwcGxlLW1hY1wiOlwiaWNvbm9pci1hcHBsZS1tYWNcIixcbiAgXCJhcHBsZS1zd2lmdFwiOlwiaWNvbm9pci1hcHBsZS1zd2lmdFwiLFxuICBcImFwcGxlLXdhbGxldFwiOlwiaWNvbm9pci1hcHBsZS13YWxsZXRcIixcbiAgXCJhcHBsZVwiOlwiaWNvbm9pci1hcHBsZVwiLFxuICBcImFyLXN5bWJvbFwiOlwiaWNvbm9pci1hci1zeW1ib2xcIixcbiAgXCJhcmNhZGVcIjpcImljb25vaXItYXJjYWRlXCIsXG4gIFwiYXJjaGVyeS1tYXRjaFwiOlwiaWNvbm9pci1hcmNoZXJ5LW1hdGNoXCIsXG4gIFwiYXJjaGVyeVwiOlwiaWNvbm9pci1hcmNoZXJ5XCIsXG4gIFwiYXJjaGl2ZVwiOlwiaWNvbm9pci1hcmNoaXZlXCIsXG4gIFwiYXJlYS1zZWFyY2hcIjpcImljb25vaXItYXJlYS1zZWFyY2hcIixcbiAgXCJhcnJvdy1hcmNoZXJ5XCI6XCJpY29ub2lyLWFycm93LWFyY2hlcnlcIixcbiAgXCJhcnJvdy1ibC1jaXJjbGVcIjpcImljb25vaXItYXJyb3ctYmwtY2lyY2xlXCIsXG4gIFwiYXJyb3ctYmwtc3F1YXJlXCI6XCJpY29ub2lyLWFycm93LWJsLXNxdWFyZVwiLFxuICBcImFycm93LWJyLWNpcmNsZVwiOlwiaWNvbm9pci1hcnJvdy1ici1jaXJjbGVcIixcbiAgXCJhcnJvdy1ici1zcXVhcmVcIjpcImljb25vaXItYXJyb3ctYnItc3F1YXJlXCIsXG4gIFwiYXJyb3ctZG93bi1jaXJjbGVcIjpcImljb25vaXItYXJyb3ctZG93bi1jaXJjbGVcIixcbiAgXCJhcnJvdy1kb3duXCI6XCJpY29ub2lyLWFycm93LWRvd25cIixcbiAgXCJhcnJvdy1lbWFpbC1mb3J3YXJkXCI6XCJpY29ub2lyLWFycm93LWVtYWlsLWZvcndhcmRcIixcbiAgXCJhcnJvdy1sZWZ0LWNpcmNsZVwiOlwiaWNvbm9pci1hcnJvdy1sZWZ0LWNpcmNsZVwiLFxuICBcImFycm93LWxlZnRcIjpcImljb25vaXItYXJyb3ctbGVmdFwiLFxuICBcImFycm93LXJpZ2h0LWNpcmNsZVwiOlwiaWNvbm9pci1hcnJvdy1yaWdodC1jaXJjbGVcIixcbiAgXCJhcnJvdy1yaWdodFwiOlwiaWNvbm9pci1hcnJvdy1yaWdodFwiLFxuICBcImFycm93LXNlcGFyYXRlLXZlcnRpY2FsXCI6XCJpY29ub2lyLWFycm93LXNlcGFyYXRlLXZlcnRpY2FsXCIsXG4gIFwiYXJyb3ctc2VwYXJhdGVcIjpcImljb25vaXItYXJyb3ctc2VwYXJhdGVcIixcbiAgXCJhcnJvdy10bC1jaXJjbGVcIjpcImljb25vaXItYXJyb3ctdGwtY2lyY2xlXCIsXG4gIFwiYXJyb3ctdGwtc3F1YXJlXCI6XCJpY29ub2lyLWFycm93LXRsLXNxdWFyZVwiLFxuICBcImFycm93LXRyLWNpcmNsZVwiOlwiaWNvbm9pci1hcnJvdy10ci1jaXJjbGVcIixcbiAgXCJhcnJvdy10ci1zcXVhcmVcIjpcImljb25vaXItYXJyb3ctdHItc3F1YXJlXCIsXG4gIFwiYXJyb3ctdW5pb24tdmVydGljYWxcIjpcImljb25vaXItYXJyb3ctdW5pb24tdmVydGljYWxcIixcbiAgXCJhcnJvdy11bmlvblwiOlwiaWNvbm9pci1hcnJvdy11bmlvblwiLFxuICBcImFycm93LXVwLWNpcmNsZVwiOlwiaWNvbm9pci1hcnJvdy11cC1jaXJjbGVcIixcbiAgXCJhcnJvdy11cFwiOlwiaWNvbm9pci1hcnJvdy11cFwiLFxuICBcImFzYW5hXCI6XCJpY29ub2lyLWFzYW5hXCIsXG4gIFwiYXQtc2lnbi1jaXJjbGVcIjpcImljb25vaXItYXQtc2lnbi1jaXJjbGVcIixcbiAgXCJhdC1zaWduXCI6XCJpY29ub2lyLWF0LXNpZ25cIixcbiAgXCJhdG9tXCI6XCJpY29ub2lyLWF0b21cIixcbiAgXCJhdHRhY2htZW50XCI6XCJpY29ub2lyLWF0dGFjaG1lbnRcIixcbiAgXCJhdWdtZW50ZWQtcmVhbGl0eVwiOlwiaWNvbm9pci1hdWdtZW50ZWQtcmVhbGl0eVwiLFxuICBcImF1dG8tZmxhc2hcIjpcImljb25vaXItYXV0by1mbGFzaFwiLFxuICBcImF2aS1mb3JtYXRcIjpcImljb25vaXItYXZpLWZvcm1hdFwiLFxuICBcImF4ZXNcIjpcImljb25vaXItYXhlc1wiLFxuICBcImJhY2t3YXJkLTE1LXNlY29uZHNcIjpcImljb25vaXItYmFja3dhcmQtMTUtc2Vjb25kc1wiLFxuICBcImJhZ1wiOlwiaWNvbm9pci1iYWdcIixcbiAgXCJiYW5rXCI6XCJpY29ub2lyLWJhbmtcIixcbiAgXCJiYXJjb2RlXCI6XCJpY29ub2lyLWJhcmNvZGVcIixcbiAgXCJiYXNrZXRiYWxsLWFsdFwiOlwiaWNvbm9pci1iYXNrZXRiYWxsLWFsdFwiLFxuICBcImJhc2tldGJhbGwtZmllbGRcIjpcImljb25vaXItYmFza2V0YmFsbC1maWVsZFwiLFxuICBcImJhc2tldGJhbGxcIjpcImljb25vaXItYmFza2V0YmFsbFwiLFxuICBcImJhdHRlcnktMjVcIjpcImljb25vaXItYmF0dGVyeS0yNVwiLFxuICBcImJhdHRlcnktNTBcIjpcImljb25vaXItYmF0dGVyeS01MFwiLFxuICBcImJhdHRlcnktNzVcIjpcImljb25vaXItYmF0dGVyeS03NVwiLFxuICBcImJhdHRlcnktY2hhcmdpbmdcIjpcImljb25vaXItYmF0dGVyeS1jaGFyZ2luZ1wiLFxuICBcImJhdHRlcnktZW1wdHlcIjpcImljb25vaXItYmF0dGVyeS1lbXB0eVwiLFxuICBcImJhdHRlcnktZnVsbFwiOlwiaWNvbm9pci1iYXR0ZXJ5LWZ1bGxcIixcbiAgXCJiYXR0ZXJ5LWluZGljYXRvclwiOlwiaWNvbm9pci1iYXR0ZXJ5LWluZGljYXRvclwiLFxuICBcImJhdHRlcnktd2FybmluZ1wiOlwiaWNvbm9pci1iYXR0ZXJ5LXdhcm5pbmdcIixcbiAgXCJiYnFcIjpcImljb25vaXItYmJxXCIsXG4gIFwiYmVhY2gtYmFnLWJpZ1wiOlwiaWNvbm9pci1iZWFjaC1iYWctYmlnXCIsXG4gIFwiYmVhY2gtYmFnXCI6XCJpY29ub2lyLWJlYWNoLWJhZ1wiLFxuICBcImJlZC1yZWFkeVwiOlwiaWNvbm9pci1iZWQtcmVhZHlcIixcbiAgXCJiZWRcIjpcImljb25vaXItYmVkXCIsXG4gIFwiYmVoYW5jZS10YWdcIjpcImljb25vaXItYmVoYW5jZS10YWdcIixcbiAgXCJiZWhhbmNlXCI6XCJpY29ub2lyLWJlaGFuY2VcIixcbiAgXCJiZWxsLW5vdGlmaWNhdGlvblwiOlwiaWNvbm9pci1iZWxsLW5vdGlmaWNhdGlvblwiLFxuICBcImJlbGwtb2ZmXCI6XCJpY29ub2lyLWJlbGwtb2ZmXCIsXG4gIFwiYmVsbFwiOlwiaWNvbm9pci1iZWxsXCIsXG4gIFwiYmljeWNsZVwiOlwiaWNvbm9pci1iaWN5Y2xlXCIsXG4gIFwiYmluLWFkZFwiOlwiaWNvbm9pci1iaW4tYWRkXCIsXG4gIFwiYmluLWZ1bGxcIjpcImljb25vaXItYmluLWZ1bGxcIixcbiAgXCJiaW4taGFsZlwiOlwiaWNvbm9pci1iaW4taGFsZlwiLFxuICBcImJpbi1taW51c1wiOlwiaWNvbm9pci1iaW4tbWludXNcIixcbiAgXCJiaW5cIjpcImljb25vaXItYmluXCIsXG4gIFwiYmlzaG9wXCI6XCJpY29ub2lyLWJpc2hvcFwiLFxuICBcImJpdGJ1Y2tldFwiOlwiaWNvbm9pci1iaXRidWNrZXRcIixcbiAgXCJibHVldG9vdGgtdGFnXCI6XCJpY29ub2lyLWJsdWV0b290aC10YWdcIixcbiAgXCJibHVldG9vdGhcIjpcImljb25vaXItYmx1ZXRvb3RoXCIsXG4gIFwiYm9sZC1zcXVhcmVcIjpcImljb25vaXItYm9sZC1zcXVhcmVcIixcbiAgXCJib2xkXCI6XCJpY29ub2lyLWJvbGRcIixcbiAgXCJib25maXJlXCI6XCJpY29ub2lyLWJvbmZpcmVcIixcbiAgXCJib29rLXN0YWNrXCI6XCJpY29ub2lyLWJvb2stc3RhY2tcIixcbiAgXCJib29rXCI6XCJpY29ub2lyLWJvb2tcIixcbiAgXCJib29rbWFyay1ib29rXCI6XCJpY29ub2lyLWJvb2ttYXJrLWJvb2tcIixcbiAgXCJib29rbWFyay1jaXJjbGVcIjpcImljb25vaXItYm9va21hcmstY2lyY2xlXCIsXG4gIFwiYm9va21hcmstZW1wdHlcIjpcImljb25vaXItYm9va21hcmstZW1wdHlcIixcbiAgXCJib3JkZXItYmxcIjpcImljb25vaXItYm9yZGVyLWJsXCIsXG4gIFwiYm9yZGVyLWJvdHRvbVwiOlwiaWNvbm9pci1ib3JkZXItYm90dG9tXCIsXG4gIFwiYm9yZGVyLWJyXCI6XCJpY29ub2lyLWJvcmRlci1iclwiLFxuICBcImJvcmRlci1pbm5lclwiOlwiaWNvbm9pci1ib3JkZXItaW5uZXJcIixcbiAgXCJib3JkZXItbGVmdFwiOlwiaWNvbm9pci1ib3JkZXItbGVmdFwiLFxuICBcImJvcmRlci1vdXRcIjpcImljb25vaXItYm9yZGVyLW91dFwiLFxuICBcImJvcmRlci1yaWdodFwiOlwiaWNvbm9pci1ib3JkZXItcmlnaHRcIixcbiAgXCJib3JkZXItdGxcIjpcImljb25vaXItYm9yZGVyLXRsXCIsXG4gIFwiYm9yZGVyLXRvcFwiOlwiaWNvbm9pci1ib3JkZXItdG9wXCIsXG4gIFwiYm9yZGVyLXRyXCI6XCJpY29ub2lyLWJvcmRlci10clwiLFxuICBcImJvdW5jZS1sZWZ0XCI6XCJpY29ub2lyLWJvdW5jZS1sZWZ0XCIsXG4gIFwiYm91bmNlLXJpZ2h0XCI6XCJpY29ub2lyLWJvdW5jZS1yaWdodFwiLFxuICBcImJvd2xpbmctYmFsbFwiOlwiaWNvbm9pci1ib3dsaW5nLWJhbGxcIixcbiAgXCJib3gtaXNvXCI6XCJpY29ub2lyLWJveC1pc29cIixcbiAgXCJib3hcIjpcImljb25vaXItYm94XCIsXG4gIFwiYm94aW5nLWdsb3ZlXCI6XCJpY29ub2lyLWJveGluZy1nbG92ZVwiLFxuICBcImJyYWluLWVsZWN0cmljaXR5XCI6XCJpY29ub2lyLWJyYWluLWVsZWN0cmljaXR5XCIsXG4gIFwiYnJhaW4tcmVzZWFyY2hcIjpcImljb25vaXItYnJhaW4tcmVzZWFyY2hcIixcbiAgXCJicmFpbi13YXJuaW5nXCI6XCJpY29ub2lyLWJyYWluLXdhcm5pbmdcIixcbiAgXCJicmFpblwiOlwiaWNvbm9pci1icmFpblwiLFxuICBcImJyZWFkLXNsaWNlXCI6XCJpY29ub2lyLWJyZWFkLXNsaWNlXCIsXG4gIFwiYnJpZ2h0LWNyb3duXCI6XCJpY29ub2lyLWJyaWdodC1jcm93blwiLFxuICBcImJyaWdodC1zdGFyXCI6XCJpY29ub2lyLWJyaWdodC1zdGFyXCIsXG4gIFwiYnJpZ2h0bmVzcy13aW5kb3dcIjpcImljb25vaXItYnJpZ2h0bmVzcy13aW5kb3dcIixcbiAgXCJicmlnaHRuZXNzXCI6XCJpY29ub2lyLWJyaWdodG5lc3NcIixcbiAgXCJidWJibGUtZG93bmxvYWRcIjpcImljb25vaXItYnViYmxlLWRvd25sb2FkXCIsXG4gIFwiYnViYmxlLWVycm9yXCI6XCJpY29ub2lyLWJ1YmJsZS1lcnJvclwiLFxuICBcImJ1YmJsZS1pbmNvbWVcIjpcImljb25vaXItYnViYmxlLWluY29tZVwiLFxuICBcImJ1YmJsZS1vdXRjb21lXCI6XCJpY29ub2lyLWJ1YmJsZS1vdXRjb21lXCIsXG4gIFwiYnViYmxlLXNlYXJjaFwiOlwiaWNvbm9pci1idWJibGUtc2VhcmNoXCIsXG4gIFwiYnViYmxlLXN0YXJcIjpcImljb25vaXItYnViYmxlLXN0YXJcIixcbiAgXCJidWJibGUtdXBsb2FkXCI6XCJpY29ub2lyLWJ1YmJsZS11cGxvYWRcIixcbiAgXCJidWJibGUtd2FybmluZ1wiOlwiaWNvbm9pci1idWJibGUtd2FybmluZ1wiLFxuICBcImJ1aWxkaW5nXCI6XCJpY29ub2lyLWJ1aWxkaW5nXCIsXG4gIFwiYnVzLXN0b3BcIjpcImljb25vaXItYnVzLXN0b3BcIixcbiAgXCJidXNcIjpcImljb25vaXItYnVzXCIsXG4gIFwiY2FibGUtdGFnXCI6XCJpY29ub2lyLWNhYmxlLXRhZ1wiLFxuICBcImNhbGN1bGF0b3JcIjpcImljb25vaXItY2FsY3VsYXRvclwiLFxuICBcImNhbGVuZGFyLW1pbnVzXCI6XCJpY29ub2lyLWNhbGVuZGFyLW1pbnVzXCIsXG4gIFwiY2FsZW5kYXItcGx1c1wiOlwiaWNvbm9pci1jYWxlbmRhci1wbHVzXCIsXG4gIFwiY2FsZW5kYXJcIjpcImljb25vaXItY2FsZW5kYXJcIixcbiAgXCJjYW1lcmFcIjpcImljb25vaXItY2FtZXJhXCIsXG4gIFwiY2FuY2VsXCI6XCJpY29ub2lyLWNhbmNlbFwiLFxuICBcImNhbmRsZXN0aWNrLWNoYXJ0XCI6XCJpY29ub2lyLWNhbmRsZXN0aWNrLWNoYXJ0XCIsXG4gIFwiY2FyXCI6XCJpY29ub2lyLWNhclwiLFxuICBcImNhcmJvblwiOlwiaWNvbm9pci1jYXJib25cIixcbiAgXCJjYXJkLWlzc3VlXCI6XCJpY29ub2lyLWNhcmQtaXNzdWVcIixcbiAgXCJjYXJkLWxvY2tlZFwiOlwiaWNvbm9pci1jYXJkLWxvY2tlZFwiLFxuICBcImNhcmQtc2VjdXJpdHlcIjpcImljb25vaXItY2FyZC1zZWN1cml0eVwiLFxuICBcImNhcmQtd2FsbGV0XCI6XCJpY29ub2lyLWNhcmQtd2FsbGV0XCIsXG4gIFwiY2FydC1hbHRcIjpcImljb25vaXItY2FydC1hbHRcIixcbiAgXCJjYXJ0XCI6XCJpY29ub2lyLWNhcnRcIixcbiAgXCJjYXNoXCI6XCJpY29ub2lyLWNhc2hcIixcbiAgXCJjZW50ZXItYWxpZ25cIjpcImljb25vaXItY2VudGVyLWFsaWduXCIsXG4gIFwiY2hhdC1hZGRcIjpcImljb25vaXItY2hhdC1hZGRcIixcbiAgXCJjaGF0LWJ1YmJsZS1jaGVjay0xXCI6XCJpY29ub2lyLWNoYXQtYnViYmxlLWNoZWNrLTFcIixcbiAgXCJjaGF0LWJ1YmJsZS1jaGVja1wiOlwiaWNvbm9pci1jaGF0LWJ1YmJsZS1jaGVja1wiLFxuICBcImNoYXQtYnViYmxlLWVtcHR5XCI6XCJpY29ub2lyLWNoYXQtYnViYmxlLWVtcHR5XCIsXG4gIFwiY2hhdC1idWJibGUtZXJyb3JcIjpcImljb25vaXItY2hhdC1idWJibGUtZXJyb3JcIixcbiAgXCJjaGF0LWJ1YmJsZS1xdWVzdGlvblwiOlwiaWNvbm9pci1jaGF0LWJ1YmJsZS1xdWVzdGlvblwiLFxuICBcImNoYXQtYnViYmxlLXRyYW5zbGF0ZVwiOlwiaWNvbm9pci1jaGF0LWJ1YmJsZS10cmFuc2xhdGVcIixcbiAgXCJjaGF0LWJ1YmJsZS13YXJuaW5nXCI6XCJpY29ub2lyLWNoYXQtYnViYmxlLXdhcm5pbmdcIixcbiAgXCJjaGF0LWJ1YmJsZVwiOlwiaWNvbm9pci1jaGF0LWJ1YmJsZVwiLFxuICBcImNoYXQtbGluZXNcIjpcImljb25vaXItY2hhdC1saW5lc1wiLFxuICBcImNoYXQtcmVtb3ZlXCI6XCJpY29ub2lyLWNoYXQtcmVtb3ZlXCIsXG4gIFwiY2hlY2stY2lyY2xlXCI6XCJpY29ub2lyLWNoZWNrLWNpcmNsZVwiLFxuICBcImNoZWNrLXdpbmRvd1wiOlwiaWNvbm9pci1jaGVjay13aW5kb3dcIixcbiAgXCJjaGVja1wiOlwiaWNvbm9pci1jaGVja1wiLFxuICBcImNob2NvbGF0ZVwiOlwiaWNvbm9pci1jaG9jb2xhdGVcIixcbiAgXCJjaHJvbWVjYXN0LWFjdGl2ZVwiOlwiaWNvbm9pci1jaHJvbWVjYXN0LWFjdGl2ZVwiLFxuICBcImNocm9tZWNhc3RcIjpcImljb25vaXItY2hyb21lY2FzdFwiLFxuICBcImNodXJjaC1hbHRcIjpcImljb25vaXItY2h1cmNoLWFsdFwiLFxuICBcImNodXJjaFwiOlwiaWNvbm9pci1jaHVyY2hcIixcbiAgXCJjaW5lbWEtb2xkXCI6XCJpY29ub2lyLWNpbmVtYS1vbGRcIixcbiAgXCJjaXJjbGVcIjpcImljb25vaXItY2lyY2xlXCIsXG4gIFwiY2l0eVwiOlwiaWNvbm9pci1jaXR5XCIsXG4gIFwiY2xlYW4td2F0ZXJcIjpcImljb25vaXItY2xlYW4td2F0ZXJcIixcbiAgXCJjbGlwYm9hcmQtY2hlY2tcIjpcImljb25vaXItY2xpcGJvYXJkLWNoZWNrXCIsXG4gIFwiY2xvY2tcIjpcImljb25vaXItY2xvY2tcIixcbiAgXCJjbG9zZWQtY2FwdGlvbnNcIjpcImljb25vaXItY2xvc2VkLWNhcHRpb25zXCIsXG4gIFwiY2xvc2V0XCI6XCJpY29ub2lyLWNsb3NldFwiLFxuICBcImNsb3VkLWJvb2stYWx0XCI6XCJpY29ub2lyLWNsb3VkLWJvb2stYWx0XCIsXG4gIFwiY2xvdWQtY2hlY2tcIjpcImljb25vaXItY2xvdWQtY2hlY2tcIixcbiAgXCJjbG91ZC1kZXN5bmNcIjpcImljb25vaXItY2xvdWQtZGVzeW5jXCIsXG4gIFwiY2xvdWQtZG93bmxvYWRcIjpcImljb25vaXItY2xvdWQtZG93bmxvYWRcIixcbiAgXCJjbG91ZC1lcnJvclwiOlwiaWNvbm9pci1jbG91ZC1lcnJvclwiLFxuICBcImNsb3VkLXN1bm55XCI6XCJpY29ub2lyLWNsb3VkLXN1bm55XCIsXG4gIFwiY2xvdWQtc3luY1wiOlwiaWNvbm9pci1jbG91ZC1zeW5jXCIsXG4gIFwiY2xvdWQtdXBsb2FkXCI6XCJpY29ub2lyLWNsb3VkLXVwbG9hZFwiLFxuICBcImNsb3VkXCI6XCJpY29ub2lyLWNsb3VkXCIsXG4gIFwiY2x1dGVyeVwiOlwiaWNvbm9pci1jbHV0ZXJ5XCIsXG4gIFwiY29kZS1icmFja2V0cy1zcXVhcmVcIjpcImljb25vaXItY29kZS1icmFja2V0cy1zcXVhcmVcIixcbiAgXCJjb2RlLWJyYWNrZXRzXCI6XCJpY29ub2lyLWNvZGUtYnJhY2tldHNcIixcbiAgXCJjb2RlXCI6XCJpY29ub2lyLWNvZGVcIixcbiAgXCJjb2RlcGVuXCI6XCJpY29ub2lyLWNvZGVwZW5cIixcbiAgXCJjb2ZmZWUtY3VwXCI6XCJpY29ub2lyLWNvZmZlZS1jdXBcIixcbiAgXCJjb2luXCI6XCJpY29ub2lyLWNvaW5cIixcbiAgXCJjb2xsYWdlLWZyYW1lXCI6XCJpY29ub2lyLWNvbGxhZ2UtZnJhbWVcIixcbiAgXCJjb2xsYXBzZVwiOlwiaWNvbm9pci1jb2xsYXBzZVwiLFxuICBcImNvbG9yLWZpbHRlclwiOlwiaWNvbm9pci1jb2xvci1maWx0ZXJcIixcbiAgXCJjb2xvci1waWNrZXItZW1wdHlcIjpcImljb25vaXItY29sb3ItcGlja2VyLWVtcHR5XCIsXG4gIFwiY29sb3ItcGlja2VyXCI6XCJpY29ub2lyLWNvbG9yLXBpY2tlclwiLFxuICBcImNvbWJpbmVcIjpcImljb25vaXItY29tYmluZVwiLFxuICBcImNvbW11bml0eVwiOlwiaWNvbm9pci1jb21tdW5pdHlcIixcbiAgXCJjb21wYWN0LWRpc2NcIjpcImljb25vaXItY29tcGFjdC1kaXNjXCIsXG4gIFwiY29tcGFzc1wiOlwiaWNvbm9pci1jb21wYXNzXCIsXG4gIFwiY29tcHJlc3MtbGluZXNcIjpcImljb25vaXItY29tcHJlc3MtbGluZXNcIixcbiAgXCJjb21wcmVzc1wiOlwiaWNvbm9pci1jb21wcmVzc1wiLFxuICBcImNvbXB1dGVyXCI6XCJpY29ub2lyLWNvbXB1dGVyXCIsXG4gIFwiY29uc3VtYWJsZVwiOlwiaWNvbm9pci1jb25zdW1hYmxlXCIsXG4gIFwiY29udHJvbC1zbGlkZXJcIjpcImljb25vaXItY29udHJvbC1zbGlkZXJcIixcbiAgXCJjb29raWVcIjpcImljb25vaXItY29va2llXCIsXG4gIFwiY29vbGluZ1wiOlwiaWNvbm9pci1jb29saW5nXCIsXG4gIFwiY29weVwiOlwiaWNvbm9pci1jb3B5XCIsXG4gIFwiY29weXJpZ2h0XCI6XCJpY29ub2lyLWNvcHlyaWdodFwiLFxuICBcImNvcm5lci1ib3R0b20tbGVmdFwiOlwiaWNvbm9pci1jb3JuZXItYm90dG9tLWxlZnRcIixcbiAgXCJjb3JuZXItYm90dG9tLXJpZ2h0XCI6XCJpY29ub2lyLWNvcm5lci1ib3R0b20tcmlnaHRcIixcbiAgXCJjb3JuZXItdG9wLWxlZnRcIjpcImljb25vaXItY29ybmVyLXRvcC1sZWZ0XCIsXG4gIFwiY29ybmVyLXRvcC1yaWdodFwiOlwiaWNvbm9pci1jb3JuZXItdG9wLXJpZ2h0XCIsXG4gIFwiY3B1LXdhcm5pbmdcIjpcImljb25vaXItY3B1LXdhcm5pbmdcIixcbiAgXCJjcHVcIjpcImljb25vaXItY3B1XCIsXG4gIFwiY3JhY2tlZC1lZ2dcIjpcImljb25vaXItY3JhY2tlZC1lZ2dcIixcbiAgXCJjcmVhdGl2ZS1jb21tb25zXCI6XCJpY29ub2lyLWNyZWF0aXZlLWNvbW1vbnNcIixcbiAgXCJjcmVkaXQtY2FyZFwiOlwiaWNvbm9pci1jcmVkaXQtY2FyZFwiLFxuICBcImNyZWRpdC1jYXJkc1wiOlwiaWNvbm9pci1jcmVkaXQtY2FyZHNcIixcbiAgXCJjcmliXCI6XCJpY29ub2lyLWNyaWJcIixcbiAgXCJjcm9wLXJvdGF0ZS1ibFwiOlwiaWNvbm9pci1jcm9wLXJvdGF0ZS1ibFwiLFxuICBcImNyb3Atcm90YXRlLWJyXCI6XCJpY29ub2lyLWNyb3Atcm90YXRlLWJyXCIsXG4gIFwiY3JvcC1yb3RhdGUtdGxcIjpcImljb25vaXItY3JvcC1yb3RhdGUtdGxcIixcbiAgXCJjcm9wLXJvdGF0ZS10clwiOlwiaWNvbm9pci1jcm9wLXJvdGF0ZS10clwiLFxuICBcImNyb3BcIjpcImljb25vaXItY3JvcFwiLFxuICBcImNyb3duLWNpcmNsZVwiOlwiaWNvbm9pci1jcm93bi1jaXJjbGVcIixcbiAgXCJjcm93blwiOlwiaWNvbm9pci1jcm93blwiLFxuICBcImNzczNcIjpcImljb25vaXItY3NzM1wiLFxuICBcImN1cnNvci1wb2ludGVyXCI6XCJpY29ub2lyLWN1cnNvci1wb2ludGVyXCIsXG4gIFwiY3V0LWFsdFwiOlwiaWNvbm9pci1jdXQtYWx0XCIsXG4gIFwiY3V0XCI6XCJpY29ub2lyLWN1dFwiLFxuICBcImN5Y2xpbmdcIjpcImljb25vaXItY3ljbGluZ1wiLFxuICBcImN5bGluZGVyXCI6XCJpY29ub2lyLWN5bGluZGVyXCIsXG4gIFwiZGFzaC1mbGFnXCI6XCJpY29ub2lyLWRhc2gtZmxhZ1wiLFxuICBcImRhc2hib2FyZC1kb3RzXCI6XCJpY29ub2lyLWRhc2hib2FyZC1kb3RzXCIsXG4gIFwiZGFzaGJvYXJkLXNwZWVkXCI6XCJpY29ub2lyLWRhc2hib2FyZC1zcGVlZFwiLFxuICBcImRhc2hib2FyZFwiOlwiaWNvbm9pci1kYXNoYm9hcmRcIixcbiAgXCJkYXRhLXRyYW5zZmVyLWJvdGhcIjpcImljb25vaXItZGF0YS10cmFuc2Zlci1ib3RoXCIsXG4gIFwiZGF0YS10cmFuc2Zlci1jaGVja1wiOlwiaWNvbm9pci1kYXRhLXRyYW5zZmVyLWNoZWNrXCIsXG4gIFwiZGF0YS10cmFuc2Zlci1kb3duXCI6XCJpY29ub2lyLWRhdGEtdHJhbnNmZXItZG93blwiLFxuICBcImRhdGEtdHJhbnNmZXItdXBcIjpcImljb25vaXItZGF0YS10cmFuc2Zlci11cFwiLFxuICBcImRhdGEtdHJhbnNmZXItd2FybmluZ1wiOlwiaWNvbm9pci1kYXRhLXRyYW5zZmVyLXdhcm5pbmdcIixcbiAgXCJkYXRhYmFzZS1iYWNrdXBcIjpcImljb25vaXItZGF0YWJhc2UtYmFja3VwXCIsXG4gIFwiZGF0YWJhc2UtZXhwb3J0XCI6XCJpY29ub2lyLWRhdGFiYXNlLWV4cG9ydFwiLFxuICBcImRhdGFiYXNlLW1vbml0b3JcIjpcImljb25vaXItZGF0YWJhc2UtbW9uaXRvclwiLFxuICBcImRhdGFiYXNlLXJlc3RvcmVcIjpcImljb25vaXItZGF0YWJhc2UtcmVzdG9yZVwiLFxuICBcImRhdGFiYXNlLXNjcmlwdFwiOlwiaWNvbm9pci1kYXRhYmFzZS1zY3JpcHRcIixcbiAgXCJkYXRhYmFzZS1zZXR0aW5nc1wiOlwiaWNvbm9pci1kYXRhYmFzZS1zZXR0aW5nc1wiLFxuICBcImRhdGFiYXNlLXN0YXJcIjpcImljb25vaXItZGF0YWJhc2Utc3RhclwiLFxuICBcImRhdGFiYXNlLXN0YXRzXCI6XCJpY29ub2lyLWRhdGFiYXNlLXN0YXRzXCIsXG4gIFwiZGF0YWJhc2UtdGFnXCI6XCJpY29ub2lyLWRhdGFiYXNlLXRhZ1wiLFxuICBcImRiLWNoZWNrXCI6XCJpY29ub2lyLWRiLWNoZWNrXCIsXG4gIFwiZGItZXJyb3JcIjpcImljb25vaXItZGItZXJyb3JcIixcbiAgXCJkYi1zZWFyY2hcIjpcImljb25vaXItZGItc2VhcmNoXCIsXG4gIFwiZGItc3RhclwiOlwiaWNvbm9pci1kYi1zdGFyXCIsXG4gIFwiZGItd2FybmluZ1wiOlwiaWNvbm9pci1kYi13YXJuaW5nXCIsXG4gIFwiZGJcIjpcImljb25vaXItZGJcIixcbiAgXCJkZS1jb21wcmVzc1wiOlwiaWNvbm9pci1kZS1jb21wcmVzc1wiLFxuICBcImRlbGV0ZS1jaXJjbGVcIjpcImljb25vaXItZGVsZXRlLWNpcmNsZVwiLFxuICBcImRlbGl2ZXJ5LXRydWNrXCI6XCJpY29ub2lyLWRlbGl2ZXJ5LXRydWNrXCIsXG4gIFwiZGVsaXZlcnlcIjpcImljb25vaXItZGVsaXZlcnlcIixcbiAgXCJkZXB0aFwiOlwiaWNvbm9pci1kZXB0aFwiLFxuICBcImRlc2lnbi1uaWJcIjpcImljb25vaXItZGVzaWduLW5pYlwiLFxuICBcImRlc2lnbi1wZW5jaWxcIjpcImljb25vaXItZGVzaWduLXBlbmNpbFwiLFxuICBcImRlc2tcIjpcImljb25vaXItZGVza1wiLFxuICBcImRpYWxwYWRcIjpcImljb25vaXItZGlhbHBhZFwiLFxuICBcImRpYW1ldGVyXCI6XCJpY29ub2lyLWRpYW1ldGVyXCIsXG4gIFwiZGljZS1maXZlXCI6XCJpY29ub2lyLWRpY2UtZml2ZVwiLFxuICBcImRpY2UtZm91clwiOlwiaWNvbm9pci1kaWNlLWZvdXJcIixcbiAgXCJkaWNlLW9uZVwiOlwiaWNvbm9pci1kaWNlLW9uZVwiLFxuICBcImRpY2Utc2l4XCI6XCJpY29ub2lyLWRpY2Utc2l4XCIsXG4gIFwiZGljZS10aHJlZVwiOlwiaWNvbm9pci1kaWNlLXRocmVlXCIsXG4gIFwiZGljZS10d29cIjpcImljb25vaXItZGljZS10d29cIixcbiAgXCJkaW1tZXItc3dpdGNoXCI6XCJpY29ub2lyLWRpbW1lci1zd2l0Y2hcIixcbiAgXCJkaXJlY3Rvci1jaGFpclwiOlwiaWNvbm9pci1kaXJlY3Rvci1jaGFpclwiLFxuICBcImRpc2NvcmRcIjpcImljb25vaXItZGlzY29yZFwiLFxuICBcImRpc2h3YXNoZXJcIjpcImljb25vaXItZGlzaHdhc2hlclwiLFxuICBcImRpdmlkZS1zZWxlY3Rpb24tMVwiOlwiaWNvbm9pci1kaXZpZGUtc2VsZWN0aW9uLTFcIixcbiAgXCJkaXZpZGUtc2VsZWN0aW9uLTJcIjpcImljb25vaXItZGl2aWRlLXNlbGVjdGlvbi0yXCIsXG4gIFwiZGl2aWRlLXRocmVlXCI6XCJpY29ub2lyLWRpdmlkZS10aHJlZVwiLFxuICBcImRpdmlkZVwiOlwiaWNvbm9pci1kaXZpZGVcIixcbiAgXCJkbmFcIjpcImljb25vaXItZG5hXCIsXG4gIFwiZG9jLXNlYXJjaC1hbHRcIjpcImljb25vaXItZG9jLXNlYXJjaC1hbHRcIixcbiAgXCJkb2Mtc2VhcmNoXCI6XCJpY29ub2lyLWRvYy1zZWFyY2hcIixcbiAgXCJkb2Mtc3Rhci1hbHRcIjpcImljb25vaXItZG9jLXN0YXItYWx0XCIsXG4gIFwiZG9jLXN0YXJcIjpcImljb25vaXItZG9jLXN0YXJcIixcbiAgXCJkb2xsYXJcIjpcImljb25vaXItZG9sbGFyXCIsXG4gIFwiZG9tb3RpYy1pc3N1ZVwiOlwiaWNvbm9pci1kb21vdGljLWlzc3VlXCIsXG4gIFwiZG9uYXRlXCI6XCJpY29ub2lyLWRvbmF0ZVwiLFxuICBcImRvdWJsZS1jaGVja1wiOlwiaWNvbm9pci1kb3VibGUtY2hlY2tcIixcbiAgXCJkb3duLXJvdW5kLWFycm93XCI6XCJpY29ub2lyLWRvd24tcm91bmQtYXJyb3dcIixcbiAgXCJkb3dubG9hZC1jaXJjbGVcIjpcImljb25vaXItZG93bmxvYWQtY2lyY2xlXCIsXG4gIFwiZG93bmxvYWQtZGF0YS13aW5kb3dcIjpcImljb25vaXItZG93bmxvYWQtZGF0YS13aW5kb3dcIixcbiAgXCJkb3dubG9hZC1zcXVhcmVcIjpcImljb25vaXItZG93bmxvYWQtc3F1YXJlXCIsXG4gIFwiZG93bmxvYWRcIjpcImljb25vaXItZG93bmxvYWRcIixcbiAgXCJkcmFnLWhhbmQtZ2VzdHVyZVwiOlwiaWNvbm9pci1kcmFnLWhhbmQtZ2VzdHVyZVwiLFxuICBcImRyYWdcIjpcImljb25vaXItZHJhZ1wiLFxuICBcImRyYXdlclwiOlwiaWNvbm9pci1kcmF3ZXJcIixcbiAgXCJkcmliYmJsZVwiOlwiaWNvbm9pci1kcmliYmJsZVwiLFxuICBcImRyb25lLWNoYXJnZS1mdWxsXCI6XCJpY29ub2lyLWRyb25lLWNoYXJnZS1mdWxsXCIsXG4gIFwiZHJvbmUtY2hhcmdlLWhhbGZcIjpcImljb25vaXItZHJvbmUtY2hhcmdlLWhhbGZcIixcbiAgXCJkcm9uZS1jaGFyZ2UtbG93XCI6XCJpY29ub2lyLWRyb25lLWNoYXJnZS1sb3dcIixcbiAgXCJkcm9uZS1jaGVja1wiOlwiaWNvbm9pci1kcm9uZS1jaGVja1wiLFxuICBcImRyb25lLWVycm9yXCI6XCJpY29ub2lyLWRyb25lLWVycm9yXCIsXG4gIFwiZHJvbmUtbGFuZGluZ1wiOlwiaWNvbm9pci1kcm9uZS1sYW5kaW5nXCIsXG4gIFwiZHJvbmUtcmVmcmVzaFwiOlwiaWNvbm9pci1kcm9uZS1yZWZyZXNoXCIsXG4gIFwiZHJvbmUtdGFrZS1vZmZcIjpcImljb25vaXItZHJvbmUtdGFrZS1vZmZcIixcbiAgXCJkcm9uZVwiOlwiaWNvbm9pci1kcm9uZVwiLFxuICBcImRyb3BsZXQtaGFsZlwiOlwiaWNvbm9pci1kcm9wbGV0LWhhbGZcIixcbiAgXCJkcm9wbGV0XCI6XCJpY29ub2lyLWRyb3BsZXRcIixcbiAgXCJlYXNlLWN1cnZlLWNvbnRyb2wtcG9pbnRzXCI6XCJpY29ub2lyLWVhc2UtY3VydmUtY29udHJvbC1wb2ludHNcIixcbiAgXCJlYXNlLWluLWNvbnRyb2wtcG9pbnRcIjpcImljb25vaXItZWFzZS1pbi1jb250cm9sLXBvaW50XCIsXG4gIFwiZWFzZS1pbi1vdXRcIjpcImljb25vaXItZWFzZS1pbi1vdXRcIixcbiAgXCJlYXNlLWluXCI6XCJpY29ub2lyLWVhc2UtaW5cIixcbiAgXCJlYXNlLW91dC1jb250cm9sLXBvaW50XCI6XCJpY29ub2lyLWVhc2Utb3V0LWNvbnRyb2wtcG9pbnRcIixcbiAgXCJlYXNlLW91dFwiOlwiaWNvbm9pci1lYXNlLW91dFwiLFxuICBcImVjb2xvZ3ktYm9va1wiOlwiaWNvbm9pci1lY29sb2d5LWJvb2tcIixcbiAgXCJlZGl0LXBlbmNpbFwiOlwiaWNvbm9pci1lZGl0LXBlbmNpbFwiLFxuICBcImVkaXRcIjpcImljb25vaXItZWRpdFwiLFxuICBcImVnZ1wiOlwiaWNvbm9pci1lZ2dcIixcbiAgXCJlamVjdFwiOlwiaWNvbm9pci1lamVjdFwiLFxuICBcImVsZWN0cm9uaWNzLWNoaXBcIjpcImljb25vaXItZWxlY3Ryb25pY3MtY2hpcFwiLFxuICBcImVsZWN0cm9uaWNzLXRyYW5zaXN0b3JcIjpcImljb25vaXItZWxlY3Ryb25pY3MtdHJhbnNpc3RvclwiLFxuICBcImVtb2ppLWJhbGxcIjpcImljb25vaXItZW1vamktYmFsbFwiLFxuICBcImVtb2ppLWJsaW5rLWxlZnRcIjpcImljb25vaXItZW1vamktYmxpbmstbGVmdFwiLFxuICBcImVtb2ppLWJsaW5rLXJpZ2h0XCI6XCJpY29ub2lyLWVtb2ppLWJsaW5rLXJpZ2h0XCIsXG4gIFwiZW1vamktbG9vay1kb3duXCI6XCJpY29ub2lyLWVtb2ppLWxvb2stZG93blwiLFxuICBcImVtb2ppLWxvb2stbGVmdFwiOlwiaWNvbm9pci1lbW9qaS1sb29rLWxlZnRcIixcbiAgXCJlbW9qaS1sb29rLXJpZ2h0XCI6XCJpY29ub2lyLWVtb2ppLWxvb2stcmlnaHRcIixcbiAgXCJlbW9qaS1sb29rLXVwXCI6XCJpY29ub2lyLWVtb2ppLWxvb2stdXBcIixcbiAgXCJlbW9qaS1wdXp6bGVkXCI6XCJpY29ub2lyLWVtb2ppLXB1enpsZWRcIixcbiAgXCJlbW9qaS1xdWl0ZVwiOlwiaWNvbm9pci1lbW9qaS1xdWl0ZVwiLFxuICBcImVtb2ppLXJlYWxseVwiOlwiaWNvbm9pci1lbW9qaS1yZWFsbHlcIixcbiAgXCJlbW9qaS1zYWRcIjpcImljb25vaXItZW1vamktc2FkXCIsXG4gIFwiZW1vamktc2F0aXNmaWVkXCI6XCJpY29ub2lyLWVtb2ppLXNhdGlzZmllZFwiLFxuICBcImVtb2ppLXNpbmctbGVmdC1ub3RlXCI6XCJpY29ub2lyLWVtb2ppLXNpbmctbGVmdC1ub3RlXCIsXG4gIFwiZW1vamktc2luZy1sZWZ0XCI6XCJpY29ub2lyLWVtb2ppLXNpbmctbGVmdFwiLFxuICBcImVtb2ppLXNpbmctcmlnaHQtbm90ZVwiOlwiaWNvbm9pci1lbW9qaS1zaW5nLXJpZ2h0LW5vdGVcIixcbiAgXCJlbW9qaS1zaW5nLXJpZ2h0XCI6XCJpY29ub2lyLWVtb2ppLXNpbmctcmlnaHRcIixcbiAgXCJlbW9qaS1zdXJwcmlzZS1hbHRcIjpcImljb25vaXItZW1vamktc3VycHJpc2UtYWx0XCIsXG4gIFwiZW1vamktc3VycHJpc2VcIjpcImljb25vaXItZW1vamktc3VycHJpc2VcIixcbiAgXCJlbW9qaS10YWxraW5nLWFuZ3J5XCI6XCJpY29ub2lyLWVtb2ppLXRhbGtpbmctYW5ncnlcIixcbiAgXCJlbW9qaS10YWxraW5nLWhhcHB5XCI6XCJpY29ub2lyLWVtb2ppLXRhbGtpbmctaGFwcHlcIixcbiAgXCJlbW9qaS10aGluay1sZWZ0XCI6XCJpY29ub2lyLWVtb2ppLXRoaW5rLWxlZnRcIixcbiAgXCJlbW9qaS10aGluay1yaWdodFwiOlwiaWNvbm9pci1lbW9qaS10aGluay1yaWdodFwiLFxuICBcImVtb2ppXCI6XCJpY29ub2lyLWVtb2ppXCIsXG4gIFwiZW1wdHktcGFnZVwiOlwiaWNvbm9pci1lbXB0eS1wYWdlXCIsXG4gIFwiZW5lcmd5LXVzYWdlLXdpbmRvd1wiOlwiaWNvbm9pci1lbmVyZ3ktdXNhZ2Utd2luZG93XCIsXG4gIFwiZW5sYXJnZS1yb3VuZC1hcnJvd1wiOlwiaWNvbm9pci1lbmxhcmdlLXJvdW5kLWFycm93XCIsXG4gIFwiZW5sYXJnZVwiOlwiaWNvbm9pci1lbmxhcmdlXCIsXG4gIFwiZXJhc2VcIjpcImljb25vaXItZXJhc2VcIixcbiAgXCJlcnJvci13aW5kb3dcIjpcImljb25vaXItZXJyb3Itd2luZG93XCIsXG4gIFwiZXVyby1zcXVhcmVcIjpcImljb25vaXItZXVyby1zcXVhcmVcIixcbiAgXCJldXJvXCI6XCJpY29ub2lyLWV1cm9cIixcbiAgXCJldi1jaGFyZ2UtYWx0XCI6XCJpY29ub2lyLWV2LWNoYXJnZS1hbHRcIixcbiAgXCJldi1jaGFyZ2VcIjpcImljb25vaXItZXYtY2hhcmdlXCIsXG4gIFwiZXYtcGx1Zy1jaGFyZ2luZ1wiOlwiaWNvbm9pci1ldi1wbHVnLWNoYXJnaW5nXCIsXG4gIFwiZXYtcGx1Zy1lcnJvclwiOlwiaWNvbm9pci1ldi1wbHVnLWVycm9yXCIsXG4gIFwiZXYtcGx1Z1wiOlwiaWNvbm9pci1ldi1wbHVnXCIsXG4gIFwiZXYtc3RhdGlvblwiOlwiaWNvbm9pci1ldi1zdGF0aW9uXCIsXG4gIFwiZXYtdGFnXCI6XCJpY29ub2lyLWV2LXRhZ1wiLFxuICBcImV4Y2x1ZGVcIjpcImljb25vaXItZXhjbHVkZVwiLFxuICBcImV4cGFuZC1saW5lc1wiOlwiaWNvbm9pci1leHBhbmQtbGluZXNcIixcbiAgXCJleHBhbmRcIjpcImljb25vaXItZXhwYW5kXCIsXG4gIFwiZXllLWFsdFwiOlwiaWNvbm9pci1leWUtYWx0XCIsXG4gIFwiZXllLWNsb3NlXCI6XCJpY29ub2lyLWV5ZS1jbG9zZVwiLFxuICBcImV5ZS1lbXB0eVwiOlwiaWNvbm9pci1leWUtZW1wdHlcIixcbiAgXCJleWUtb2ZmXCI6XCJpY29ub2lyLWV5ZS1vZmZcIixcbiAgXCJmYWNlLWlkXCI6XCJpY29ub2lyLWZhY2UtaWRcIixcbiAgXCJmYWNlYm9vay10YWdcIjpcImljb25vaXItZmFjZWJvb2stdGFnXCIsXG4gIFwiZmFjZWJvb2tcIjpcImljb25vaXItZmFjZWJvb2tcIixcbiAgXCJmYWNldGltZVwiOlwiaWNvbm9pci1mYWNldGltZVwiLFxuICBcImZhcm1cIjpcImljb25vaXItZmFybVwiLFxuICBcImZhc3QtYXJyb3ctZG93bi1ib3hcIjpcImljb25vaXItZmFzdC1hcnJvdy1kb3duLWJveFwiLFxuICBcImZhc3QtYXJyb3ctZG93blwiOlwiaWNvbm9pci1mYXN0LWFycm93LWRvd25cIixcbiAgXCJmYXN0LWFycm93LWxlZnQtYm94XCI6XCJpY29ub2lyLWZhc3QtYXJyb3ctbGVmdC1ib3hcIixcbiAgXCJmYXN0LWFycm93LWxlZnRcIjpcImljb25vaXItZmFzdC1hcnJvdy1sZWZ0XCIsXG4gIFwiZmFzdC1hcnJvdy1yaWdodC1ib3hcIjpcImljb25vaXItZmFzdC1hcnJvdy1yaWdodC1ib3hcIixcbiAgXCJmYXN0LWFycm93LXJpZ2h0XCI6XCJpY29ub2lyLWZhc3QtYXJyb3ctcmlnaHRcIixcbiAgXCJmYXN0LWFycm93LXVwLWJveFwiOlwiaWNvbm9pci1mYXN0LWFycm93LXVwLWJveFwiLFxuICBcImZhc3QtYXJyb3ctdXBcIjpcImljb25vaXItZmFzdC1hcnJvdy11cFwiLFxuICBcImZhc3QtZG93bi1jaXJjbGVcIjpcImljb25vaXItZmFzdC1kb3duLWNpcmNsZVwiLFxuICBcImZhc3QtbGVmdC1jaXJjbGVcIjpcImljb25vaXItZmFzdC1sZWZ0LWNpcmNsZVwiLFxuICBcImZhc3QtcmlnaHQtY2lyY2xlXCI6XCJpY29ub2lyLWZhc3QtcmlnaHQtY2lyY2xlXCIsXG4gIFwiZmFzdC11cC1jaXJjbGVcIjpcImljb25vaXItZmFzdC11cC1jaXJjbGVcIixcbiAgXCJmYXZvdXJpdGUtYm9va1wiOlwiaWNvbm9pci1mYXZvdXJpdGUtYm9va1wiLFxuICBcImZhdm91cml0ZS13aW5kb3dcIjpcImljb25vaXItZmF2b3VyaXRlLXdpbmRvd1wiLFxuICBcImZlbWFsZVwiOlwiaWNvbm9pci1mZW1hbGVcIixcbiAgXCJmaWdtYVwiOlwiaWNvbm9pci1maWdtYVwiLFxuICBcImZpbGUtbm90LWZvdW5kXCI6XCJpY29ub2lyLWZpbGUtbm90LWZvdW5kXCIsXG4gIFwiZmlsdGVyLWFsdFwiOlwiaWNvbm9pci1maWx0ZXItYWx0XCIsXG4gIFwiZmlsdGVyXCI6XCJpY29ub2lyLWZpbHRlclwiLFxuICBcImZpbmRlclwiOlwiaWNvbm9pci1maW5kZXJcIixcbiAgXCJmaW5nZXJwcmludC1jaGVjay1jaXJjbGVcIjpcImljb25vaXItZmluZ2VycHJpbnQtY2hlY2stY2lyY2xlXCIsXG4gIFwiZmluZ2VycHJpbnQtY2lyY2xlXCI6XCJpY29ub2lyLWZpbmdlcnByaW50LWNpcmNsZVwiLFxuICBcImZpbmdlcnByaW50LWVycm9yLWNpcmNsZVwiOlwiaWNvbm9pci1maW5nZXJwcmludC1lcnJvci1jaXJjbGVcIixcbiAgXCJmaW5nZXJwcmludC1sb2NrLWNpcmNsZVwiOlwiaWNvbm9pci1maW5nZXJwcmludC1sb2NrLWNpcmNsZVwiLFxuICBcImZpbmdlcnByaW50LXBob25lXCI6XCJpY29ub2lyLWZpbmdlcnByaW50LXBob25lXCIsXG4gIFwiZmluZ2VycHJpbnQtc2NhblwiOlwiaWNvbm9pci1maW5nZXJwcmludC1zY2FuXCIsXG4gIFwiZmluZ2VycHJpbnQtc3F1YXJlXCI6XCJpY29ub2lyLWZpbmdlcnByaW50LXNxdWFyZVwiLFxuICBcImZpbmdlcnByaW50LXdpbmRvd1wiOlwiaWNvbm9pci1maW5nZXJwcmludC13aW5kb3dcIixcbiAgXCJmaW5nZXJwcmludFwiOlwiaWNvbm9pci1maW5nZXJwcmludFwiLFxuICBcImZpcmUtZmxhbWVcIjpcImljb25vaXItZmlyZS1mbGFtZVwiLFxuICBcImZpc2hpbmdcIjpcImljb25vaXItZmlzaGluZ1wiLFxuICBcImZsYXJlXCI6XCJpY29ub2lyLWZsYXJlXCIsXG4gIFwiZmxhc2gtb2ZmXCI6XCJpY29ub2lyLWZsYXNoLW9mZlwiLFxuICBcImZsYXNoXCI6XCJpY29ub2lyLWZsYXNoXCIsXG4gIFwiZmxhc2tcIjpcImljb25vaXItZmxhc2tcIixcbiAgXCJmbGlwLXJldmVyc2VcIjpcImljb25vaXItZmxpcC1yZXZlcnNlXCIsXG4gIFwiZmxpcFwiOlwiaWNvbm9pci1mbGlwXCIsXG4gIFwiZmxvd2VyXCI6XCJpY29ub2lyLWZsb3dlclwiLFxuICBcImZsdW9yaW5lXCI6XCJpY29ub2lyLWZsdW9yaW5lXCIsXG4gIFwiZm9nXCI6XCJpY29ub2lyLWZvZ1wiLFxuICBcImZvbGRlci1hbGVydFwiOlwiaWNvbm9pci1mb2xkZXItYWxlcnRcIixcbiAgXCJmb2xkZXItc2V0dGluZ3NcIjpcImljb25vaXItZm9sZGVyLXNldHRpbmdzXCIsXG4gIFwiZm9sZGVyXCI6XCJpY29ub2lyLWZvbGRlclwiLFxuICBcImZvbnQtc2l6ZVwiOlwiaWNvbm9pci1mb250LXNpemVcIixcbiAgXCJmb290YmFsbC1iYWxsXCI6XCJpY29ub2lyLWZvb3RiYWxsLWJhbGxcIixcbiAgXCJmb290YmFsbFwiOlwiaWNvbm9pci1mb290YmFsbFwiLFxuICBcImZvcndhcmQtMTUtc2Vjb25kc1wiOlwiaWNvbm9pci1mb3J3YXJkLTE1LXNlY29uZHNcIixcbiAgXCJmb3J3YXJkLW1lc3NhZ2VcIjpcImljb25vaXItZm9yd2FyZC1tZXNzYWdlXCIsXG4gIFwiZm9yd2FyZFwiOlwiaWNvbm9pci1mb3J3YXJkXCIsXG4gIFwiZnJhbWUtYWx0LWVtcHR5XCI6XCJpY29ub2lyLWZyYW1lLWFsdC1lbXB0eVwiLFxuICBcImZyYW1lLWFsdFwiOlwiaWNvbm9pci1mcmFtZS1hbHRcIixcbiAgXCJmcmFtZS1zZWxlY3RcIjpcImljb25vaXItZnJhbWUtc2VsZWN0XCIsXG4gIFwiZnJhbWUtc2ltcGxlXCI6XCJpY29ub2lyLWZyYW1lLXNpbXBsZVwiLFxuICBcImZyYW1lLXRvb2xcIjpcImljb25vaXItZnJhbWUtdG9vbFwiLFxuICBcImZyYW1lXCI6XCJpY29ub2lyLWZyYW1lXCIsXG4gIFwiZnJpZGdlXCI6XCJpY29ub2lyLWZyaWRnZVwiLFxuICBcImZ4LXRhZ1wiOlwiaWNvbm9pci1meC10YWdcIixcbiAgXCJmeFwiOlwiaWNvbm9pci1meFwiLFxuICBcImdhbWVwYWRcIjpcImljb25vaXItZ2FtZXBhZFwiLFxuICBcImdhcmFnZVwiOlwiaWNvbm9pci1nYXJhZ2VcIixcbiAgXCJnYXMtdGFuay1kcm9wXCI6XCJpY29ub2lyLWdhcy10YW5rLWRyb3BcIixcbiAgXCJnYXMtdGFua1wiOlwiaWNvbm9pci1nYXMtdGFua1wiLFxuICBcImdhc1wiOlwiaWNvbm9pci1nYXNcIixcbiAgXCJnaWYtZm9ybWF0XCI6XCJpY29ub2lyLWdpZi1mb3JtYXRcIixcbiAgXCJnaWZ0XCI6XCJpY29ub2lyLWdpZnRcIixcbiAgXCJnaXQtYnJhbmNoXCI6XCJpY29ub2lyLWdpdC1icmFuY2hcIixcbiAgXCJnaXQtY2hlcnJ5LXBpY2stY29tbWl0XCI6XCJpY29ub2lyLWdpdC1jaGVycnktcGljay1jb21taXRcIixcbiAgXCJnaXQtY29tbWFuZFwiOlwiaWNvbm9pci1naXQtY29tbWFuZFwiLFxuICBcImdpdC1jb21taXRcIjpcImljb25vaXItZ2l0LWNvbW1pdFwiLFxuICBcImdpdC1jb21wYXJlXCI6XCJpY29ub2lyLWdpdC1jb21wYXJlXCIsXG4gIFwiZ2l0LWZvcmtcIjpcImljb25vaXItZ2l0LWZvcmtcIixcbiAgXCJnaXQtbWVyZ2VcIjpcImljb25vaXItZ2l0LW1lcmdlXCIsXG4gIFwiZ2l0LXB1bGwtcmVxdWVzdC1jbG9zZWRcIjpcImljb25vaXItZ2l0LXB1bGwtcmVxdWVzdC1jbG9zZWRcIixcbiAgXCJnaXQtcHVsbC1yZXF1ZXN0XCI6XCJpY29ub2lyLWdpdC1wdWxsLXJlcXVlc3RcIixcbiAgXCJnaXRodWItY2lyY2xlXCI6XCJpY29ub2lyLWdpdGh1Yi1jaXJjbGVcIixcbiAgXCJnaXRodWJcIjpcImljb25vaXItZ2l0aHViXCIsXG4gIFwiZ2l0bGFiLWZ1bGxcIjpcImljb25vaXItZ2l0bGFiLWZ1bGxcIixcbiAgXCJnbGFzcy1lbXB0eVwiOlwiaWNvbm9pci1nbGFzcy1lbXB0eVwiLFxuICBcImdsYXNzLWhhbGYtYWx0XCI6XCJpY29ub2lyLWdsYXNzLWhhbGYtYWx0XCIsXG4gIFwiZ2xhc3MtaGFsZlwiOlwiaWNvbm9pci1nbGFzcy1oYWxmXCIsXG4gIFwiZ2xhc3Nlc1wiOlwiaWNvbm9pci1nbGFzc2VzXCIsXG4gIFwiZ2xvYmVcIjpcImljb25vaXItZ2xvYmVcIixcbiAgXCJnb2xmXCI6XCJpY29ub2lyLWdvbGZcIixcbiAgXCJnb29nbGUtY2lyY2xlXCI6XCJpY29ub2lyLWdvb2dsZS1jaXJjbGVcIixcbiAgXCJnb29nbGUtZG9jc1wiOlwiaWNvbm9pci1nb29nbGUtZG9jc1wiLFxuICBcImdvb2dsZS1kcml2ZS1jaGVja1wiOlwiaWNvbm9pci1nb29nbGUtZHJpdmUtY2hlY2tcIixcbiAgXCJnb29nbGUtZHJpdmUtc3luY1wiOlwiaWNvbm9pci1nb29nbGUtZHJpdmUtc3luY1wiLFxuICBcImdvb2dsZS1kcml2ZS13YXJuaW5nXCI6XCJpY29ub2lyLWdvb2dsZS1kcml2ZS13YXJuaW5nXCIsXG4gIFwiZ29vZ2xlLWRyaXZlXCI6XCJpY29ub2lyLWdvb2dsZS1kcml2ZVwiLFxuICBcImdvb2dsZS1ob21lXCI6XCJpY29ub2lyLWdvb2dsZS1ob21lXCIsXG4gIFwiZ29vZ2xlLW9uZVwiOlwiaWNvbm9pci1nb29nbGUtb25lXCIsXG4gIFwiZ29vZ2xlXCI6XCJpY29ub2lyLWdvb2dsZVwiLFxuICBcImdwc1wiOlwiaWNvbm9pci1ncHNcIixcbiAgXCJncmFkdWF0aW9uLWNhcFwiOlwiaWNvbm9pci1ncmFkdWF0aW9uLWNhcFwiLFxuICBcImdyYXBoLWRvd25cIjpcImljb25vaXItZ3JhcGgtZG93blwiLFxuICBcImdyYXBoLXVwXCI6XCJpY29ub2lyLWdyYXBoLXVwXCIsXG4gIFwiZ3JlZW4tYnVzXCI6XCJpY29ub2lyLWdyZWVuLWJ1c1wiLFxuICBcImdyZWVuLXRydWNrXCI6XCJpY29ub2lyLWdyZWVuLXRydWNrXCIsXG4gIFwiZ3JlZW4tdmVoaWNsZVwiOlwiaWNvbm9pci1ncmVlbi12ZWhpY2xlXCIsXG4gIFwiZ3JpZC1hZGRcIjpcImljb25vaXItZ3JpZC1hZGRcIixcbiAgXCJncmlkLW1pbnVzXCI6XCJpY29ub2lyLWdyaWQtbWludXNcIixcbiAgXCJncmlkLXJlbW92ZVwiOlwiaWNvbm9pci1ncmlkLXJlbW92ZVwiLFxuICBcImdyb3VwXCI6XCJpY29ub2lyLWdyb3VwXCIsXG4gIFwiZ3ltXCI6XCJpY29ub2lyLWd5bVwiLFxuICBcImhhbGYtY29va2llXCI6XCJpY29ub2lyLWhhbGYtY29va2llXCIsXG4gIFwiaGFsZi1tb29uXCI6XCJpY29ub2lyLWhhbGYtbW9vblwiLFxuICBcImhhbW1lclwiOlwiaWNvbm9pci1oYW1tZXJcIixcbiAgXCJoYW5kLWJyYWtlXCI6XCJpY29ub2lyLWhhbmQtYnJha2VcIixcbiAgXCJoYW5kYmFnXCI6XCJpY29ub2lyLWhhbmRiYWdcIixcbiAgXCJoYXJkLWRyaXZlXCI6XCJpY29ub2lyLWhhcmQtZHJpdmVcIixcbiAgXCJoYXRcIjpcImljb25vaXItaGF0XCIsXG4gIFwiaGQtZGlzcGxheVwiOlwiaWNvbm9pci1oZC1kaXNwbGF5XCIsXG4gIFwiaGRcIjpcImljb25vaXItaGRcIixcbiAgXCJoZHJcIjpcImljb25vaXItaGRyXCIsXG4gIFwiaGVhZHNldC1jaGFyZ2VcIjpcImljb25vaXItaGVhZHNldC1jaGFyZ2VcIixcbiAgXCJoZWFkc2V0LWhlbHBcIjpcImljb25vaXItaGVhZHNldC1oZWxwXCIsXG4gIFwiaGVhZHNldC1pc3N1ZVwiOlwiaWNvbm9pci1oZWFkc2V0LWlzc3VlXCIsXG4gIFwiaGVhZHNldFwiOlwiaWNvbm9pci1oZWFkc2V0XCIsXG4gIFwiaGVhbHRoLXNoaWVsZFwiOlwiaWNvbm9pci1oZWFsdGgtc2hpZWxkXCIsXG4gIFwiaGVhbHRoY2FyZVwiOlwiaWNvbm9pci1oZWFsdGhjYXJlXCIsXG4gIFwiaGVhcnRcIjpcImljb25vaXItaGVhcnRcIixcbiAgXCJoZWF0aW5nXCI6XCJpY29ub2lyLWhlYXRpbmdcIixcbiAgXCJoZWF2eS1yYWluXCI6XCJpY29ub2lyLWhlYXZ5LXJhaW5cIixcbiAgXCJoZWxwLWNpcmNsZVwiOlwiaWNvbm9pci1oZWxwLWNpcmNsZVwiLFxuICBcImhlbHAtc3F1YXJlXCI6XCJpY29ub2lyLWhlbHAtc3F1YXJlXCIsXG4gIFwiaGVwdGFnb25cIjpcImljb25vaXItaGVwdGFnb25cIixcbiAgXCJoZXItc2xpcHNcIjpcImljb25vaXItaGVyLXNsaXBzXCIsXG4gIFwiaGV4YWdvbi1hbHRcIjpcImljb25vaXItaGV4YWdvbi1hbHRcIixcbiAgXCJoZXhhZ29uLWRpY2VcIjpcImljb25vaXItaGV4YWdvbi1kaWNlXCIsXG4gIFwiaGV4YWdvblwiOlwiaWNvbm9pci1oZXhhZ29uXCIsXG4gIFwiaGlnaC1wcmlvcml0eVwiOlwiaWNvbm9pci1oaWdoLXByaW9yaXR5XCIsXG4gIFwiaGlzdG9yaWMtc2hpZWxkLWFsdFwiOlwiaWNvbm9pci1oaXN0b3JpYy1zaGllbGQtYWx0XCIsXG4gIFwiaGlzdG9yaWMtc2hpZWxkXCI6XCJpY29ub2lyLWhpc3RvcmljLXNoaWVsZFwiLFxuICBcImhvbWUtYWx0LXNsaW0taG9yaXpcIjpcImljb25vaXItaG9tZS1hbHQtc2xpbS1ob3JpelwiLFxuICBcImhvbWUtYWx0LXNsaW1cIjpcImljb25vaXItaG9tZS1hbHQtc2xpbVwiLFxuICBcImhvbWUtYWx0XCI6XCJpY29ub2lyLWhvbWUtYWx0XCIsXG4gIFwiaG9tZS1ob3NwaXRhbFwiOlwiaWNvbm9pci1ob21lLWhvc3BpdGFsXCIsXG4gIFwiaG9tZS1zYWxlXCI6XCJpY29ub2lyLWhvbWUtc2FsZVwiLFxuICBcImhvbWUtc2VjdXJlXCI6XCJpY29ub2lyLWhvbWUtc2VjdXJlXCIsXG4gIFwiaG9tZS1zaGllbGRcIjpcImljb25vaXItaG9tZS1zaGllbGRcIixcbiAgXCJob21lLXNpbXBsZS1kb29yXCI6XCJpY29ub2lyLWhvbWUtc2ltcGxlLWRvb3JcIixcbiAgXCJob21lLXNpbXBsZVwiOlwiaWNvbm9pci1ob21lLXNpbXBsZVwiLFxuICBcImhvbWUtdGFibGVcIjpcImljb25vaXItaG9tZS10YWJsZVwiLFxuICBcImhvbWUtdXNlclwiOlwiaWNvbm9pci1ob21lLXVzZXJcIixcbiAgXCJob21lXCI6XCJpY29ub2lyLWhvbWVcIixcbiAgXCJob3Jpei1kaXN0cmlidXRpb24tbGVmdFwiOlwiaWNvbm9pci1ob3Jpei1kaXN0cmlidXRpb24tbGVmdFwiLFxuICBcImhvcml6LWRpc3RyaWJ1dGlvbi1yaWdodFwiOlwiaWNvbm9pci1ob3Jpei1kaXN0cmlidXRpb24tcmlnaHRcIixcbiAgXCJob3Jpem9udGFsLW1lcmdlXCI6XCJpY29ub2lyLWhvcml6b250YWwtbWVyZ2VcIixcbiAgXCJob3Jpem9udGFsLXNwbGl0XCI6XCJpY29ub2lyLWhvcml6b250YWwtc3BsaXRcIixcbiAgXCJob3NwaXRhbC1zaWduXCI6XCJpY29ub2lyLWhvc3BpdGFsLXNpZ25cIixcbiAgXCJob3NwaXRhbFwiOlwiaWNvbm9pci1ob3NwaXRhbFwiLFxuICBcImhvdC1haXItYmFsbG9vblwiOlwiaWNvbm9pci1ob3QtYWlyLWJhbGxvb25cIixcbiAgXCJob3VyZ2xhc3NcIjpcImljb25vaXItaG91cmdsYXNzXCIsXG4gIFwiaHRtbDVcIjpcImljb25vaXItaHRtbDVcIixcbiAgXCJoeWRyb2dlblwiOlwiaWNvbm9pci1oeWRyb2dlblwiLFxuICBcImljb25vaXJcIjpcImljb25vaXItaWNvbm9pclwiLFxuICBcImltcG9ydFwiOlwiaWNvbm9pci1pbXBvcnRcIixcbiAgXCJpbmNsaW5hdGlvblwiOlwiaWNvbm9pci1pbmNsaW5hdGlvblwiLFxuICBcImluZHVzdHJ5XCI6XCJpY29ub2lyLWluZHVzdHJ5XCIsXG4gIFwiaW5maW5pdGVcIjpcImljb25vaXItaW5maW5pdGVcIixcbiAgXCJpbmZvLWVtcHR5XCI6XCJpY29ub2lyLWluZm8tZW1wdHlcIixcbiAgXCJpbnB1dC1maWVsZFwiOlwiaWNvbm9pci1pbnB1dC1maWVsZFwiLFxuICBcImlucHV0LW91dHB1dFwiOlwiaWNvbm9pci1pbnB1dC1vdXRwdXRcIixcbiAgXCJpbnB1dC1zZWFyY2hcIjpcImljb25vaXItaW5wdXQtc2VhcmNoXCIsXG4gIFwiaW5zdGFncmFtXCI6XCJpY29ub2lyLWluc3RhZ3JhbVwiLFxuICBcImludGVybmV0XCI6XCJpY29ub2lyLWludGVybmV0XCIsXG4gIFwiaW50ZXJzZWN0LWFsdFwiOlwiaWNvbm9pci1pbnRlcnNlY3QtYWx0XCIsXG4gIFwiaW50ZXJzZWN0XCI6XCJpY29ub2lyLWludGVyc2VjdFwiLFxuICBcImlvcy1zZXR0aW5nc1wiOlwiaWNvbm9pci1pb3Mtc2V0dGluZ3NcIixcbiAgXCJpcC1hZGRyZXNzXCI6XCJpY29ub2lyLWlwLWFkZHJlc3NcIixcbiAgXCJpcmlzLXNjYW5cIjpcImljb25vaXItaXJpcy1zY2FuXCIsXG4gIFwiaXRhbGljLXNxdWFyZVwiOlwiaWNvbm9pci1pdGFsaWMtc3F1YXJlXCIsXG4gIFwiaXRhbGljXCI6XCJpY29ub2lyLWl0YWxpY1wiLFxuICBcImpvdXJuYWwtcGFnZVwiOlwiaWNvbm9pci1qb3VybmFsLXBhZ2VcIixcbiAgXCJqb3VybmFsXCI6XCJpY29ub2lyLWpvdXJuYWxcIixcbiAgXCJqcGVnLWZvcm1hdFwiOlwiaWNvbm9pci1qcGVnLWZvcm1hdFwiLFxuICBcImpwZy1mb3JtYXRcIjpcImljb25vaXItanBnLWZvcm1hdFwiLFxuICBcImthbmJhbi1ib2FyZFwiOlwiaWNvbm9pci1rYW5iYW4tYm9hcmRcIixcbiAgXCJrZXktYWx0LWJhY2tcIjpcImljb25vaXIta2V5LWFsdC1iYWNrXCIsXG4gIFwia2V5LWFsdC1taW51c1wiOlwiaWNvbm9pci1rZXktYWx0LW1pbnVzXCIsXG4gIFwia2V5LWFsdC1wbHVzXCI6XCJpY29ub2lyLWtleS1hbHQtcGx1c1wiLFxuICBcImtleS1hbHQtcmVtb3ZlXCI6XCJpY29ub2lyLWtleS1hbHQtcmVtb3ZlXCIsXG4gIFwia2V5LWFsdFwiOlwiaWNvbm9pci1rZXktYWx0XCIsXG4gIFwia2V5LWNvbW1hbmRcIjpcImljb25vaXIta2V5LWNvbW1hbmRcIixcbiAgXCJrZXlmcmFtZS1hbGlnbi1jZW50ZXJcIjpcImljb25vaXIta2V5ZnJhbWUtYWxpZ24tY2VudGVyXCIsXG4gIFwia2V5ZnJhbWUtYWxpZ24taG9yaXpvbnRhbFwiOlwiaWNvbm9pci1rZXlmcmFtZS1hbGlnbi1ob3Jpem9udGFsXCIsXG4gIFwia2V5ZnJhbWUtYWxpZ24tdmVydGljYWxcIjpcImljb25vaXIta2V5ZnJhbWUtYWxpZ24tdmVydGljYWxcIixcbiAgXCJrZXlmcmFtZS1wb3NpdGlvblwiOlwiaWNvbm9pci1rZXlmcmFtZS1wb3NpdGlvblwiLFxuICBcImtleWZyYW1lXCI6XCJpY29ub2lyLWtleWZyYW1lXCIsXG4gIFwia2V5ZnJhbWVzLWNvdXBsZVwiOlwiaWNvbm9pci1rZXlmcmFtZXMtY291cGxlXCIsXG4gIFwia2V5ZnJhbWVzXCI6XCJpY29ub2lyLWtleWZyYW1lc1wiLFxuICBcImxhYmVsXCI6XCJpY29ub2lyLWxhYmVsXCIsXG4gIFwibGFtcFwiOlwiaWNvbm9pci1sYW1wXCIsXG4gIFwibGFuZ3VhZ2VcIjpcImljb25vaXItbGFuZ3VhZ2VcIixcbiAgXCJsYXB0b3AtY2hhcmdpbmdcIjpcImljb25vaXItbGFwdG9wLWNoYXJnaW5nXCIsXG4gIFwibGFwdG9wLWZpeFwiOlwiaWNvbm9pci1sYXB0b3AtZml4XCIsXG4gIFwibGFwdG9wLWlzc3VlXCI6XCJpY29ub2lyLWxhcHRvcC1pc3N1ZVwiLFxuICBcImxhcHRvcFwiOlwiaWNvbm9pci1sYXB0b3BcIixcbiAgXCJsYXJnZS1zdWl0Y2FzZVwiOlwiaWNvbm9pci1sYXJnZS1zdWl0Y2FzZVwiLFxuICBcImxheW91dC1sZWZ0XCI6XCJpY29ub2lyLWxheW91dC1sZWZ0XCIsXG4gIFwibGF5b3V0LXJpZ2h0XCI6XCJpY29ub2lyLWxheW91dC1yaWdodFwiLFxuICBcImxlYWRlcmJvYXJkLXN0YXJcIjpcImljb25vaXItbGVhZGVyYm9hcmQtc3RhclwiLFxuICBcImxlYWRlcmJvYXJkXCI6XCJpY29ub2lyLWxlYWRlcmJvYXJkXCIsXG4gIFwibGVhZlwiOlwiaWNvbm9pci1sZWFmXCIsXG4gIFwibGVhcm5pbmdcIjpcImljb25vaXItbGVhcm5pbmdcIixcbiAgXCJsZWZ0LXJvdW5kLWFycm93XCI6XCJpY29ub2lyLWxlZnQtcm91bmQtYXJyb3dcIixcbiAgXCJsZW5zXCI6XCJpY29ub2lyLWxlbnNcIixcbiAgXCJsaWZlYmVsdFwiOlwiaWNvbm9pci1saWZlYmVsdFwiLFxuICBcImxpZ2h0LWJ1bGItb2ZmXCI6XCJpY29ub2lyLWxpZ2h0LWJ1bGItb2ZmXCIsXG4gIFwibGlnaHQtYnVsYi1vblwiOlwiaWNvbm9pci1saWdodC1idWxiLW9uXCIsXG4gIFwibGlnaHQtYnVsYlwiOlwiaWNvbm9pci1saWdodC1idWxiXCIsXG4gIFwibGluZS1zcGFjZVwiOlwiaWNvbm9pci1saW5lLXNwYWNlXCIsXG4gIFwibGluZWFyXCI6XCJpY29ub2lyLWxpbmVhclwiLFxuICBcImxpbmtcIjpcImljb25vaXItbGlua1wiLFxuICBcImxpbmtlZGluXCI6XCJpY29ub2lyLWxpbmtlZGluXCIsXG4gIFwibGludXhcIjpcImljb25vaXItbGludXhcIixcbiAgXCJsaXN0LXNlbGVjdFwiOlwiaWNvbm9pci1saXN0LXNlbGVjdFwiLFxuICBcImxpc3RcIjpcImljb25vaXItbGlzdFwiLFxuICBcImxvYWQtYWN0aW9uLWZsb3BweVwiOlwiaWNvbm9pci1sb2FkLWFjdGlvbi1mbG9wcHlcIixcbiAgXCJsb2NrLWtleVwiOlwiaWNvbm9pci1sb2NrLWtleVwiLFxuICBcImxvY2tcIjpcImljb25vaXItbG9ja1wiLFxuICBcImxvY2tlZC1ib29rXCI6XCJpY29ub2lyLWxvY2tlZC1ib29rXCIsXG4gIFwibG9ja2VkLXdpbmRvd1wiOlwiaWNvbm9pci1sb2NrZWQtd2luZG93XCIsXG4gIFwibG9nLWRlbmllZFwiOlwiaWNvbm9pci1sb2ctZGVuaWVkXCIsXG4gIFwibG9nLWluXCI6XCJpY29ub2lyLWxvZy1pblwiLFxuICBcImxvZy1vdXRcIjpcImljb25vaXItbG9nLW91dFwiLFxuICBcImxvbmctYXJyb3ctZG93bi1sZWZ0XCI6XCJpY29ub2lyLWxvbmctYXJyb3ctZG93bi1sZWZ0XCIsXG4gIFwibG9uZy1hcnJvdy1kb3duLXJpZ2h0XCI6XCJpY29ub2lyLWxvbmctYXJyb3ctZG93bi1yaWdodFwiLFxuICBcImxvbmctYXJyb3ctbGVmdC1kb3duXCI6XCJpY29ub2lyLWxvbmctYXJyb3ctbGVmdC1kb3duXCIsXG4gIFwibG9uZy1hcnJvdy1sZWZ0LXVwXCI6XCJpY29ub2lyLWxvbmctYXJyb3ctbGVmdC11cFwiLFxuICBcImxvbmctYXJyb3ctcmlnaHQtZG93blwiOlwiaWNvbm9pci1sb25nLWFycm93LXJpZ2h0LWRvd25cIixcbiAgXCJsb25nLWFycm93LXJpZ2h0LXVwLTFcIjpcImljb25vaXItbG9uZy1hcnJvdy1yaWdodC11cC0xXCIsXG4gIFwibG9uZy1hcnJvdy1yaWdodC11cFwiOlwiaWNvbm9pci1sb25nLWFycm93LXJpZ2h0LXVwXCIsXG4gIFwibG9uZy1hcnJvdy11cC1sZWZ0XCI6XCJpY29ub2lyLWxvbmctYXJyb3ctdXAtbGVmdFwiLFxuICBcImxvbmctYXJyb3ctdXAtcmlnaHRcIjpcImljb25vaXItbG9uZy1hcnJvdy11cC1yaWdodFwiLFxuICBcImxvdC1vZi1jYXNoXCI6XCJpY29ub2lyLWxvdC1vZi1jYXNoXCIsXG4gIFwibWFjLWNvbnRyb2wta2V5XCI6XCJpY29ub2lyLW1hYy1jb250cm9sLWtleVwiLFxuICBcIm1hYy1kb2NrXCI6XCJpY29ub2lyLW1hYy1kb2NrXCIsXG4gIFwibWFjLW9wdGlvbi1rZXlcIjpcImljb25vaXItbWFjLW9wdGlvbi1rZXlcIixcbiAgXCJtYWMtb3Mtd2luZG93XCI6XCJpY29ub2lyLW1hYy1vcy13aW5kb3dcIixcbiAgXCJtYWduZXQtZW5lcmd5XCI6XCJpY29ub2lyLW1hZ25ldC1lbmVyZ3lcIixcbiAgXCJtYWduZXRcIjpcImljb25vaXItbWFnbmV0XCIsXG4gIFwibWFpbC1pblwiOlwiaWNvbm9pci1tYWlsLWluXCIsXG4gIFwibWFpbC1vcGVuZWRcIjpcImljb25vaXItbWFpbC1vcGVuZWRcIixcbiAgXCJtYWlsLW91dFwiOlwiaWNvbm9pci1tYWlsLW91dFwiLFxuICBcIm1haWxcIjpcImljb25vaXItbWFpbFwiLFxuICBcIm1hbGVcIjpcImljb25vaXItbWFsZVwiLFxuICBcIm1hcC1pc3N1ZVwiOlwiaWNvbm9pci1tYXAtaXNzdWVcIixcbiAgXCJtYXBcIjpcImljb25vaXItbWFwXCIsXG4gIFwibWFwcy1hcnJvdy1kaWFnb25hbFwiOlwiaWNvbm9pci1tYXBzLWFycm93LWRpYWdvbmFsXCIsXG4gIFwibWFwcy1hcnJvdy1pc3N1ZVwiOlwiaWNvbm9pci1tYXBzLWFycm93LWlzc3VlXCIsXG4gIFwibWFwcy1hcnJvd1wiOlwiaWNvbm9pci1tYXBzLWFycm93XCIsXG4gIFwibWFwcy1nby1zdHJhaWdodFwiOlwiaWNvbm9pci1tYXBzLWdvLXN0cmFpZ2h0XCIsXG4gIFwibWFwcy10dXJuLWJhY2tcIjpcImljb25vaXItbWFwcy10dXJuLWJhY2tcIixcbiAgXCJtYXBzLXR1cm4tbGVmdFwiOlwiaWNvbm9pci1tYXBzLXR1cm4tbGVmdFwiLFxuICBcIm1hcHMtdHVybi1yaWdodFwiOlwiaWNvbm9pci1tYXBzLXR1cm4tcmlnaHRcIixcbiAgXCJtYXNrLXNxdWFyZVwiOlwiaWNvbm9pci1tYXNrLXNxdWFyZVwiLFxuICBcIm1hc3RlcmNhcmQtY2FyZFwiOlwiaWNvbm9pci1tYXN0ZXJjYXJkLWNhcmRcIixcbiAgXCJtYXRoLWJvb2tcIjpcImljb25vaXItbWF0aC1ib29rXCIsXG4gIFwibWF4aW1pemVcIjpcImljb25vaXItbWF4aW1pemVcIixcbiAgXCJtZWRhbFwiOlwiaWNvbm9pci1tZWRhbFwiLFxuICBcIm1lZGlhLWltYWdlLWZvbGRlclwiOlwiaWNvbm9pci1tZWRpYS1pbWFnZS1mb2xkZXJcIixcbiAgXCJtZWRpYS1pbWFnZS1saXN0XCI6XCJpY29ub2lyLW1lZGlhLWltYWdlLWxpc3RcIixcbiAgXCJtZWRpYS1pbWFnZVwiOlwiaWNvbm9pci1tZWRpYS1pbWFnZVwiLFxuICBcIm1lZGlhLXZpZGVvLWZvbGRlclwiOlwiaWNvbm9pci1tZWRpYS12aWRlby1mb2xkZXJcIixcbiAgXCJtZWRpYS12aWRlby1saXN0XCI6XCJpY29ub2lyLW1lZGlhLXZpZGVvLWxpc3RcIixcbiAgXCJtZWRpYS12aWRlb1wiOlwiaWNvbm9pci1tZWRpYS12aWRlb1wiLFxuICBcIm1lZGl1bS1wcmlvcml0eVwiOlwiaWNvbm9pci1tZWRpdW0tcHJpb3JpdHlcIixcbiAgXCJtZWRpdW1cIjpcImljb25vaXItbWVkaXVtXCIsXG4gIFwibWVnYXBob25lXCI6XCJpY29ub2lyLW1lZ2FwaG9uZVwiLFxuICBcIm1lbnUtc2NhbGVcIjpcImljb25vaXItbWVudS1zY2FsZVwiLFxuICBcIm1lbnVcIjpcImljb25vaXItbWVudVwiLFxuICBcIm1lc3NhZ2UtYWxlcnRcIjpcImljb25vaXItbWVzc2FnZS1hbGVydFwiLFxuICBcIm1lc3NhZ2UtdGV4dFwiOlwiaWNvbm9pci1tZXNzYWdlLXRleHRcIixcbiAgXCJtZXNzYWdlXCI6XCJpY29ub2lyLW1lc3NhZ2VcIixcbiAgXCJtZXRyb1wiOlwiaWNvbm9pci1tZXRyb1wiLFxuICBcIm1pYy1hZGRcIjpcImljb25vaXItbWljLWFkZFwiLFxuICBcIm1pYy1jaGVja1wiOlwiaWNvbm9pci1taWMtY2hlY2tcIixcbiAgXCJtaWMtbXV0ZVwiOlwiaWNvbm9pci1taWMtbXV0ZVwiLFxuICBcIm1pYy1yZW1vdmVcIjpcImljb25vaXItbWljLXJlbW92ZVwiLFxuICBcIm1pYy1zcGVha2luZ1wiOlwiaWNvbm9pci1taWMtc3BlYWtpbmdcIixcbiAgXCJtaWMtd2FybmluZ1wiOlwiaWNvbm9pci1taWMtd2FybmluZ1wiLFxuICBcIm1pY1wiOlwiaWNvbm9pci1taWNcIixcbiAgXCJtaWNyb3Njb3BlXCI6XCJpY29ub2lyLW1pY3Jvc2NvcGVcIixcbiAgXCJtaW51cy0xXCI6XCJpY29ub2lyLW1pbnVzLTFcIixcbiAgXCJtaW51cy1jaXJjbGVcIjpcImljb25vaXItbWludXMtY2lyY2xlXCIsXG4gIFwibWludXMtaGV4YWdvblwiOlwiaWNvbm9pci1taW51cy1oZXhhZ29uXCIsXG4gIFwibWludXMtcGluLWFsdFwiOlwiaWNvbm9pci1taW51cy1waW4tYWx0XCIsXG4gIFwibWludXMtc3F1YXJlXCI6XCJpY29ub2lyLW1pbnVzLXNxdWFyZVwiLFxuICBcIm1pbnVzXCI6XCJpY29ub2lyLW1pbnVzXCIsXG4gIFwibWlycm9yXCI6XCJpY29ub2lyLW1pcnJvclwiLFxuICBcIm1pc3NpbmctZm9udFwiOlwiaWNvbm9pci1taXNzaW5nLWZvbnRcIixcbiAgXCJtb2Rlcm4tdHYtNGtcIjpcImljb25vaXItbW9kZXJuLXR2LTRrXCIsXG4gIFwibW9kZXJuLXR2XCI6XCJpY29ub2lyLW1vZGVybi10dlwiLFxuICBcIm1vbmV5LXNxdWFyZVwiOlwiaWNvbm9pci1tb25leS1zcXVhcmVcIixcbiAgXCJtb29uLXNhdFwiOlwiaWNvbm9pci1tb29uLXNhdFwiLFxuICBcIm1vcmUtaG9yaXotY2lyY2xlXCI6XCJpY29ub2lyLW1vcmUtaG9yaXotY2lyY2xlXCIsXG4gIFwibW9yZS1ob3JpelwiOlwiaWNvbm9pci1tb3JlLWhvcml6XCIsXG4gIFwibW9yZS12ZXJ0LWNpcmNsZVwiOlwiaWNvbm9pci1tb3JlLXZlcnQtY2lyY2xlXCIsXG4gIFwibW9yZS12ZXJ0XCI6XCJpY29ub2lyLW1vcmUtdmVydFwiLFxuICBcIm1vdG9yY3ljbGVcIjpcImljb25vaXItbW90b3JjeWNsZVwiLFxuICBcIm1vdXNlLWJ1dHRvbi1sZWZ0XCI6XCJpY29ub2lyLW1vdXNlLWJ1dHRvbi1sZWZ0XCIsXG4gIFwibW91c2UtYnV0dG9uLXJpZ2h0XCI6XCJpY29ub2lyLW1vdXNlLWJ1dHRvbi1yaWdodFwiLFxuICBcIm1vdXNlLXNjcm9sbC13aGVlbFwiOlwiaWNvbm9pci1tb3VzZS1zY3JvbGwtd2hlZWxcIixcbiAgXCJtb3ZlLWRvd25cIjpcImljb25vaXItbW92ZS1kb3duXCIsXG4gIFwibW92ZS1sZWZ0XCI6XCJpY29ub2lyLW1vdmUtbGVmdFwiLFxuICBcIm1vdmUtcmlnaHRcIjpcImljb25vaXItbW92ZS1yaWdodFwiLFxuICBcIm1vdmUtcnVsZXJcIjpcImljb25vaXItbW92ZS1ydWxlclwiLFxuICBcIm1vdmUtdXBcIjpcImljb25vaXItbW92ZS11cFwiLFxuICBcIm1vdmllXCI6XCJpY29ub2lyLW1vdmllXCIsXG4gIFwibXBlZy1mb3JtYXRcIjpcImljb25vaXItbXBlZy1mb3JtYXRcIixcbiAgXCJtdWx0aS1idWJibGVcIjpcImljb25vaXItbXVsdGktYnViYmxlXCIsXG4gIFwibXVsdGktbWFjLW9zLXdpbmRvd1wiOlwiaWNvbm9pci1tdWx0aS1tYWMtb3Mtd2luZG93XCIsXG4gIFwibXVsdGktd2luZG93XCI6XCJpY29ub2lyLW11bHRpLXdpbmRvd1wiLFxuICBcIm11bHRpcGxlLXBhZ2VzLWFkZFwiOlwiaWNvbm9pci1tdWx0aXBsZS1wYWdlcy1hZGRcIixcbiAgXCJtdWx0aXBsZS1wYWdlcy1kZWxldGVcIjpcImljb25vaXItbXVsdGlwbGUtcGFnZXMtZGVsZXRlXCIsXG4gIFwibXVsdGlwbGUtcGFnZXMtZW1wdHlcIjpcImljb25vaXItbXVsdGlwbGUtcGFnZXMtZW1wdHlcIixcbiAgXCJtdWx0aXBsZS1wYWdlcy1yZW1vdmVcIjpcImljb25vaXItbXVsdGlwbGUtcGFnZXMtcmVtb3ZlXCIsXG4gIFwibXVsdGlwbGUtcGFnZXNcIjpcImljb25vaXItbXVsdGlwbGUtcGFnZXNcIixcbiAgXCJtdXNpYy1kb3VibGUtbm90ZS1hZGRcIjpcImljb25vaXItbXVzaWMtZG91YmxlLW5vdGUtYWRkXCIsXG4gIFwibXVzaWMtZG91YmxlLW5vdGVcIjpcImljb25vaXItbXVzaWMtZG91YmxlLW5vdGVcIixcbiAgXCJtdXNpYy1ub3RlLWFkZFwiOlwiaWNvbm9pci1tdXNpYy1ub3RlLWFkZFwiLFxuICBcIm11c2ljLW5vdGVcIjpcImljb25vaXItbXVzaWMtbm90ZVwiLFxuICBcIm5hdi1hcnJvdy1kb3duXCI6XCJpY29ub2lyLW5hdi1hcnJvdy1kb3duXCIsXG4gIFwibmF2LWFycm93LWxlZnRcIjpcImljb25vaXItbmF2LWFycm93LWxlZnRcIixcbiAgXCJuYXYtYXJyb3ctcmlnaHRcIjpcImljb25vaXItbmF2LWFycm93LXJpZ2h0XCIsXG4gIFwibmF2LWFycm93LXVwXCI6XCJpY29ub2lyLW5hdi1hcnJvdy11cFwiLFxuICBcIm5hdmlnYXRvci1hbHRcIjpcImljb25vaXItbmF2aWdhdG9yLWFsdFwiLFxuICBcIm5hdmlnYXRvclwiOlwiaWNvbm9pci1uYXZpZ2F0b3JcIixcbiAgXCJuZXR3b3JrLWFsdFwiOlwiaWNvbm9pci1uZXR3b3JrLWFsdFwiLFxuICBcIm5ldHdvcmstbGVmdFwiOlwiaWNvbm9pci1uZXR3b3JrLWxlZnRcIixcbiAgXCJuZXR3b3JrLXJpZ2h0XCI6XCJpY29ub2lyLW5ldHdvcmstcmlnaHRcIixcbiAgXCJuZXR3b3JrXCI6XCJpY29ub2lyLW5ldHdvcmtcIixcbiAgXCJuZXctdGFiXCI6XCJpY29ub2lyLW5ldy10YWJcIixcbiAgXCJuaW50ZW5kby1zd2l0Y2hcIjpcImljb25vaXItbmludGVuZG8tc3dpdGNoXCIsXG4gIFwibml0cm9nZW5cIjpcImljb25vaXItbml0cm9nZW5cIixcbiAgXCJuby1hY2Nlc3Mtd2luZG93XCI6XCJpY29ub2lyLW5vLWFjY2Vzcy13aW5kb3dcIixcbiAgXCJuby1iYXR0ZXJ5XCI6XCJpY29ub2lyLW5vLWJhdHRlcnlcIixcbiAgXCJuby1jb2luXCI6XCJpY29ub2lyLW5vLWNvaW5cIixcbiAgXCJuby1jcmVkaXQtY2FyZFwiOlwiaWNvbm9pci1uby1jcmVkaXQtY2FyZFwiLFxuICBcIm5vLWxpbmtcIjpcImljb25vaXItbm8tbGlua1wiLFxuICBcIm5vLWxvY2tcIjpcImljb25vaXItbm8tbG9ja1wiLFxuICBcIm5vLXNtb2tpbmctY2lyY2xlXCI6XCJpY29ub2lyLW5vLXNtb2tpbmctY2lyY2xlXCIsXG4gIFwibm8tc21va2luZ1wiOlwiaWNvbm9pci1uby1zbW9raW5nXCIsXG4gIFwibm90ZXNcIjpcImljb25vaXItbm90ZXNcIixcbiAgXCJucG0tc3F1YXJlXCI6XCJpY29ub2lyLW5wbS1zcXVhcmVcIixcbiAgXCJucG1cIjpcImljb25vaXItbnBtXCIsXG4gIFwibnVtYmVyZWQtbGlzdC1sZWZ0XCI6XCJpY29ub2lyLW51bWJlcmVkLWxpc3QtbGVmdFwiLFxuICBcIm51bWJlcmVkLWxpc3QtcmlnaHRcIjpcImljb25vaXItbnVtYmVyZWQtbGlzdC1yaWdodFwiLFxuICBcIm9jdGFnb25cIjpcImljb25vaXItb2N0YWdvblwiLFxuICBcIm9mZi10YWdcIjpcImljb25vaXItb2ZmLXRhZ1wiLFxuICBcIm9pbC1pbmR1c3RyeVwiOlwiaWNvbm9pci1vaWwtaW5kdXN0cnlcIixcbiAgXCJva3JzXCI6XCJpY29ub2lyLW9rcnNcIixcbiAgXCJvbi10YWdcIjpcImljb25vaXItb24tdGFnXCIsXG4gIFwib25lLWZpbmdlci1zZWxlY3QtaGFuZC1nZXN0dXJlXCI6XCJpY29ub2lyLW9uZS1maW5nZXItc2VsZWN0LWhhbmQtZ2VzdHVyZVwiLFxuICBcIm9uZS1wb2ludC1jaXJjbGVcIjpcImljb25vaXItb25lLXBvaW50LWNpcmNsZVwiLFxuICBcIm9wZW4tYm9va1wiOlwiaWNvbm9pci1vcGVuLWJvb2tcIixcbiAgXCJvcGVuLWluLWJyb3dzZXJcIjpcImljb25vaXItb3Blbi1pbi1icm93c2VyXCIsXG4gIFwib3Blbi1pbi13aW5kb3dcIjpcImljb25vaXItb3Blbi1pbi13aW5kb3dcIixcbiAgXCJvcGVuLW5ldy13aW5kb3dcIjpcImljb25vaXItb3Blbi1uZXctd2luZG93XCIsXG4gIFwib3Blbi1zZWxlY3QtaGFuZC1nZXN0dXJlXCI6XCJpY29ub2lyLW9wZW4tc2VsZWN0LWhhbmQtZ2VzdHVyZVwiLFxuICBcIm9wZW4tdnBuXCI6XCJpY29ub2lyLW9wZW4tdnBuXCIsXG4gIFwib3JhbmdlLWhhbGZcIjpcImljb25vaXItb3JhbmdlLWhhbGZcIixcbiAgXCJvcmFuZ2Utc2xpY2UtYWx0XCI6XCJpY29ub2lyLW9yYW5nZS1zbGljZS1hbHRcIixcbiAgXCJvcmFuZ2Utc2xpY2VcIjpcImljb25vaXItb3JhbmdlLXNsaWNlXCIsXG4gIFwib3JnYW5pYy1mb29kLXNxdWFyZVwiOlwiaWNvbm9pci1vcmdhbmljLWZvb2Qtc3F1YXJlXCIsXG4gIFwib3JnYW5pYy1mb29kXCI6XCJpY29ub2lyLW9yZ2FuaWMtZm9vZFwiLFxuICBcIm9ydGhvZ29uYWwtdmlld1wiOlwiaWNvbm9pci1vcnRob2dvbmFsLXZpZXdcIixcbiAgXCJveHlnZW5cIjpcImljb25vaXItb3h5Z2VuXCIsXG4gIFwicGFja2FnZS1sb2NrXCI6XCJpY29ub2lyLXBhY2thZ2UtbG9ja1wiLFxuICBcInBhY2thZ2VcIjpcImljb25vaXItcGFja2FnZVwiLFxuICBcInBhY2thZ2VzXCI6XCJpY29ub2lyLXBhY2thZ2VzXCIsXG4gIFwicGFjbWFuXCI6XCJpY29ub2lyLXBhY21hblwiLFxuICBcInBhZ2UtZG93blwiOlwiaWNvbm9pci1wYWdlLWRvd25cIixcbiAgXCJwYWdlLWVkaXRcIjpcImljb25vaXItcGFnZS1lZGl0XCIsXG4gIFwicGFnZS1mbGlwXCI6XCJpY29ub2lyLXBhZ2UtZmxpcFwiLFxuICBcInBhZ2UtbGVmdFwiOlwiaWNvbm9pci1wYWdlLWxlZnRcIixcbiAgXCJwYWdlLXJpZ2h0XCI6XCJpY29ub2lyLXBhZ2UtcmlnaHRcIixcbiAgXCJwYWdlLXNlYXJjaFwiOlwiaWNvbm9pci1wYWdlLXNlYXJjaFwiLFxuICBcInBhZ2Utc3RhclwiOlwiaWNvbm9pci1wYWdlLXN0YXJcIixcbiAgXCJwYWdlLXVwXCI6XCJpY29ub2lyLXBhZ2UtdXBcIixcbiAgXCJwYWdlXCI6XCJpY29ub2lyLXBhZ2VcIixcbiAgXCJwYWxldHRlXCI6XCJpY29ub2lyLXBhbGV0dGVcIixcbiAgXCJwYW5vcmFtYS1lbmxhcmdlXCI6XCJpY29ub2lyLXBhbm9yYW1hLWVubGFyZ2VcIixcbiAgXCJwYW5vcmFtYS1yZWR1Y2VcIjpcImljb25vaXItcGFub3JhbWEtcmVkdWNlXCIsXG4gIFwicGFudHMtYWx0XCI6XCJpY29ub2lyLXBhbnRzLWFsdFwiLFxuICBcInBhbnRzXCI6XCJpY29ub2lyLXBhbnRzXCIsXG4gIFwicGFya2luZ1wiOlwiaWNvbm9pci1wYXJraW5nXCIsXG4gIFwicGFzc3dvcmQtY3Vyc29yXCI6XCJpY29ub2lyLXBhc3N3b3JkLWN1cnNvclwiLFxuICBcInBhc3N3b3JkLWVycm9yXCI6XCJpY29ub2lyLXBhc3N3b3JkLWVycm9yXCIsXG4gIFwicGFzc3dvcmQtcGFzc1wiOlwiaWNvbm9pci1wYXNzd29yZC1wYXNzXCIsXG4gIFwicGFzdGUtY2xpcGJvYXJkXCI6XCJpY29ub2lyLXBhc3RlLWNsaXBib2FyZFwiLFxuICBcInBhdGgtYXJyb3dcIjpcImljb25vaXItcGF0aC1hcnJvd1wiLFxuICBcInBhdXNlLXdpbmRvd1wiOlwiaWNvbm9pci1wYXVzZS13aW5kb3dcIixcbiAgXCJwYXVzZVwiOlwiaWNvbm9pci1wYXVzZVwiLFxuICBcInBheXBhbFwiOlwiaWNvbm9pci1wYXlwYWxcIixcbiAgXCJwYy1jaGVja1wiOlwiaWNvbm9pci1wYy1jaGVja1wiLFxuICBcInBjLWZpcmV3YWxsXCI6XCJpY29ub2lyLXBjLWZpcmV3YWxsXCIsXG4gIFwicGMtbW91c2VcIjpcImljb25vaXItcGMtbW91c2VcIixcbiAgXCJwYy1uby1lbnRyeVwiOlwiaWNvbm9pci1wYy1uby1lbnRyeVwiLFxuICBcInBjLXdhcm5pbmdcIjpcImljb25vaXItcGMtd2FybmluZ1wiLFxuICBcInBlYWNlLWhhbmRcIjpcImljb25vaXItcGVhY2UtaGFuZFwiLFxuICBcInBlbi1jb25uZWN0LWJsdWV0b290aFwiOlwiaWNvbm9pci1wZW4tY29ubmVjdC1ibHVldG9vdGhcIixcbiAgXCJwZW4tY29ubmVjdC13aWZpXCI6XCJpY29ub2lyLXBlbi1jb25uZWN0LXdpZmlcIixcbiAgXCJwZW4tdGFibGV0LWNvbm5lY3QtdXNiXCI6XCJpY29ub2lyLXBlbi10YWJsZXQtY29ubmVjdC11c2JcIixcbiAgXCJwZW4tdGFibGV0LWNvbm5lY3Qtd2lmaVwiOlwiaWNvbm9pci1wZW4tdGFibGV0LWNvbm5lY3Qtd2lmaVwiLFxuICBcInBlbi10YWJsZXRcIjpcImljb25vaXItcGVuLXRhYmxldFwiLFxuICBcInBlbnRhZ29uXCI6XCJpY29ub2lyLXBlbnRhZ29uXCIsXG4gIFwicGVvcGxlLXRhZ1wiOlwiaWNvbm9pci1wZW9wbGUtdGFnXCIsXG4gIFwicGVyY2VudGFnZS1jaXJjbGVcIjpcImljb25vaXItcGVyY2VudGFnZS1jaXJjbGVcIixcbiAgXCJwZXJjZW50YWdlLXNxdWFyZVwiOlwiaWNvbm9pci1wZXJjZW50YWdlLXNxdWFyZVwiLFxuICBcInBlcmNlbnRhZ2VcIjpcImljb25vaXItcGVyY2VudGFnZVwiLFxuICBcInBlcnNwZWN0aXZlLXZpZXdcIjpcImljb25vaXItcGVyc3BlY3RpdmUtdmlld1wiLFxuICBcInBoYXJtYWN5LWNyb3NzLWNpcmNsZVwiOlwiaWNvbm9pci1waGFybWFjeS1jcm9zcy1jaXJjbGVcIixcbiAgXCJwaGFybWFjeS1jcm9zcy1zcXVhcmVcIjpcImljb25vaXItcGhhcm1hY3ktY3Jvc3Mtc3F1YXJlXCIsXG4gIFwicGhvbmUtYWRkXCI6XCJpY29ub2lyLXBob25lLWFkZFwiLFxuICBcInBob25lLWRlbGV0ZVwiOlwiaWNvbm9pci1waG9uZS1kZWxldGVcIixcbiAgXCJwaG9uZS1kaXNhYmxlZFwiOlwiaWNvbm9pci1waG9uZS1kaXNhYmxlZFwiLFxuICBcInBob25lLWluY29tZVwiOlwiaWNvbm9pci1waG9uZS1pbmNvbWVcIixcbiAgXCJwaG9uZS1vdXRjb21lXCI6XCJpY29ub2lyLXBob25lLW91dGNvbWVcIixcbiAgXCJwaG9uZS1wYXVzZWRcIjpcImljb25vaXItcGhvbmUtcGF1c2VkXCIsXG4gIFwicGhvbmUtcmVtb3ZlXCI6XCJpY29ub2lyLXBob25lLXJlbW92ZVwiLFxuICBcInBob25lXCI6XCJpY29ub2lyLXBob25lXCIsXG4gIFwicGlnZ3ktYmFua1wiOlwiaWNvbm9pci1waWdneS1iYW5rXCIsXG4gIFwicGlsbG93XCI6XCJpY29ub2lyLXBpbGxvd1wiLFxuICBcInBpbi1hbHRcIjpcImljb25vaXItcGluLWFsdFwiLFxuICBcInBpblwiOlwiaWNvbm9pci1waW5cIixcbiAgXCJwaW5lLXRyZWVcIjpcImljb25vaXItcGluZS10cmVlXCIsXG4gIFwicGludGVyZXN0XCI6XCJpY29ub2lyLXBpbnRlcmVzdFwiLFxuICBcInBpenphLXNsaWNlXCI6XCJpY29ub2lyLXBpenphLXNsaWNlXCIsXG4gIFwicGxhbmV0LWFsdFwiOlwiaWNvbm9pci1wbGFuZXQtYWx0XCIsXG4gIFwicGxhbmV0LXNhdFwiOlwiaWNvbm9pci1wbGFuZXQtc2F0XCIsXG4gIFwicGxhbmV0XCI6XCJpY29ub2lyLXBsYW5ldFwiLFxuICBcInBsYXlcIjpcImljb25vaXItcGxheVwiLFxuICBcInBsYXlsaXN0LWFkZFwiOlwiaWNvbm9pci1wbGF5bGlzdC1hZGRcIixcbiAgXCJwbGF5bGlzdC1wbGF5XCI6XCJpY29ub2lyLXBsYXlsaXN0LXBsYXlcIixcbiAgXCJwbGF5bGlzdFwiOlwiaWNvbm9pci1wbGF5bGlzdFwiLFxuICBcInBsYXlzdGF0aW9uLWdhbWVwYWRcIjpcImljb25vaXItcGxheXN0YXRpb24tZ2FtZXBhZFwiLFxuICBcInBsdWctdHlwZS1hXCI6XCJpY29ub2lyLXBsdWctdHlwZS1hXCIsXG4gIFwicGx1Zy10eXBlLWNcIjpcImljb25vaXItcGx1Zy10eXBlLWNcIixcbiAgXCJwbHVnLXR5cGUtZ1wiOlwiaWNvbm9pci1wbHVnLXR5cGUtZ1wiLFxuICBcInBsdWctdHlwZS1sXCI6XCJpY29ub2lyLXBsdWctdHlwZS1sXCIsXG4gIFwicGx1c1wiOlwiaWNvbm9pci1wbHVzXCIsXG4gIFwicG5nLWZvcm1hdFwiOlwiaWNvbm9pci1wbmctZm9ybWF0XCIsXG4gIFwicG9ja2V0XCI6XCJpY29ub2lyLXBvY2tldFwiLFxuICBcInBvZGNhc3RcIjpcImljb25vaXItcG9kY2FzdFwiLFxuICBcInBva2ViYWxsXCI6XCJpY29ub2lyLXBva2ViYWxsXCIsXG4gIFwicG9zaXRpb24tYWxpZ25cIjpcImljb25vaXItcG9zaXRpb24tYWxpZ25cIixcbiAgXCJwb3NpdGlvblwiOlwiaWNvbm9pci1wb3NpdGlvblwiLFxuICBcInBvdGlvblwiOlwiaWNvbm9pci1wb3Rpb25cIixcbiAgXCJwb3VuZFwiOlwiaWNvbm9pci1wb3VuZFwiLFxuICBcInByZWNpc2lvbi10b29sXCI6XCJpY29ub2lyLXByZWNpc2lvbi10b29sXCIsXG4gIFwicHJlc2VudGF0aW9uXCI6XCJpY29ub2lyLXByZXNlbnRhdGlvblwiLFxuICBcInByaW50ZXItYWx0XCI6XCJpY29ub2lyLXByaW50ZXItYWx0XCIsXG4gIFwicHJpbnRlclwiOlwiaWNvbm9pci1wcmludGVyXCIsXG4gIFwicHJpbnRpbmctcGFnZVwiOlwiaWNvbm9pci1wcmludGluZy1wYWdlXCIsXG4gIFwicHJpb3JpdHktZG93blwiOlwiaWNvbm9pci1wcmlvcml0eS1kb3duXCIsXG4gIFwicHJpb3JpdHktdXBcIjpcImljb25vaXItcHJpb3JpdHktdXBcIixcbiAgXCJwcml2YXRlLXdpZmlcIjpcImljb25vaXItcHJpdmF0ZS13aWZpXCIsXG4gIFwicHJvZmlsZS1jaXJjbGVcIjpcImljb25vaXItcHJvZmlsZS1jaXJjbGVcIixcbiAgXCJwcm9oaWJpdGlvblwiOlwiaWNvbm9pci1wcm9oaWJpdGlvblwiLFxuICBcInB1enpsZVwiOlwiaWNvbm9pci1wdXp6bGVcIixcbiAgXCJxci1jb2RlXCI6XCJpY29ub2lyLXFyLWNvZGVcIixcbiAgXCJxdWVzdGlvbi1tYXJrXCI6XCJpY29ub2lyLXF1ZXN0aW9uLW1hcmtcIixcbiAgXCJxdW90ZS1tZXNzYWdlXCI6XCJpY29ub2lyLXF1b3RlLW1lc3NhZ2VcIixcbiAgXCJxdW90ZVwiOlwiaWNvbm9pci1xdW90ZVwiLFxuICBcInJhZGlhdGlvblwiOlwiaWNvbm9pci1yYWRpYXRpb25cIixcbiAgXCJyYWRpdXNcIjpcImljb25vaXItcmFkaXVzXCIsXG4gIFwicmFpblwiOlwiaWNvbm9pci1yYWluXCIsXG4gIFwicmF3LWZvcm1hdFwiOlwiaWNvbm9pci1yYXctZm9ybWF0XCIsXG4gIFwicmVjZWl2ZS1kb2xsYXJzXCI6XCJpY29ub2lyLXJlY2VpdmUtZG9sbGFyc1wiLFxuICBcInJlY2VpdmUtZXVyb3NcIjpcImljb25vaXItcmVjZWl2ZS1ldXJvc1wiLFxuICBcInJlY2VpdmUtcG91bmRzXCI6XCJpY29ub2lyLXJlY2VpdmUtcG91bmRzXCIsXG4gIFwicmVjZWl2ZS15ZW5zXCI6XCJpY29ub2lyLXJlY2VpdmUteWVuc1wiLFxuICBcInJlZG8tYWN0aW9uXCI6XCJpY29ub2lyLXJlZG8tYWN0aW9uXCIsXG4gIFwicmVkby1jaXJjbGVcIjpcImljb25vaXItcmVkby1jaXJjbGVcIixcbiAgXCJyZWRvXCI6XCJpY29ub2lyLXJlZG9cIixcbiAgXCJyZWR1Y2Utcm91bmQtYXJyb3dcIjpcImljb25vaXItcmVkdWNlLXJvdW5kLWFycm93XCIsXG4gIFwicmVkdWNlXCI6XCJpY29ub2lyLXJlZHVjZVwiLFxuICBcInJlZnJlc2gtY2lyY3VsYXJcIjpcImljb25vaXItcmVmcmVzaC1jaXJjdWxhclwiLFxuICBcInJlZnJlc2gtZG91YmxlXCI6XCJpY29ub2lyLXJlZnJlc2gtZG91YmxlXCIsXG4gIFwicmVmcmVzaFwiOlwiaWNvbm9pci1yZWZyZXNoXCIsXG4gIFwicmVsb2FkLXdpbmRvd1wiOlwiaWNvbm9pci1yZWxvYWQtd2luZG93XCIsXG4gIFwicmVtaW5kZXItaGFuZC1nZXN0dXJlXCI6XCJpY29ub2lyLXJlbWluZGVyLWhhbmQtZ2VzdHVyZVwiLFxuICBcInJlbW92ZS1kYXRhYmFzZS1zY3JpcHRcIjpcImljb25vaXItcmVtb3ZlLWRhdGFiYXNlLXNjcmlwdFwiLFxuICBcInJlbW92ZS1mb2xkZXJcIjpcImljb25vaXItcmVtb3ZlLWZvbGRlclwiLFxuICBcInJlbW92ZS1mcmFtZVwiOlwiaWNvbm9pci1yZW1vdmUtZnJhbWVcIixcbiAgXCJyZW1vdmUtZnJvbS1jYXJ0XCI6XCJpY29ub2lyLXJlbW92ZS1mcm9tLWNhcnRcIixcbiAgXCJyZW1vdmUta2V5ZnJhbWUtYWx0XCI6XCJpY29ub2lyLXJlbW92ZS1rZXlmcmFtZS1hbHRcIixcbiAgXCJyZW1vdmUta2V5ZnJhbWVcIjpcImljb25vaXItcmVtb3ZlLWtleWZyYW1lXCIsXG4gIFwicmVtb3ZlLWtleWZyYW1lc1wiOlwiaWNvbm9pci1yZW1vdmUta2V5ZnJhbWVzXCIsXG4gIFwicmVtb3ZlLWxpbmtcIjpcImljb25vaXItcmVtb3ZlLWxpbmtcIixcbiAgXCJyZW1vdmUtbWVkaWEtaW1hZ2VcIjpcImljb25vaXItcmVtb3ZlLW1lZGlhLWltYWdlXCIsXG4gIFwicmVtb3ZlLW1lZGlhLXZpZGVvXCI6XCJpY29ub2lyLXJlbW92ZS1tZWRpYS12aWRlb1wiLFxuICBcInJlbW92ZS1wYWdlLWFsdFwiOlwiaWNvbm9pci1yZW1vdmUtcGFnZS1hbHRcIixcbiAgXCJyZW1vdmUtcGFnZVwiOlwiaWNvbm9pci1yZW1vdmUtcGFnZVwiLFxuICBcInJlbW92ZS1waW4tYWx0XCI6XCJpY29ub2lyLXJlbW92ZS1waW4tYWx0XCIsXG4gIFwicmVtb3ZlLXBpblwiOlwiaWNvbm9pci1yZW1vdmUtcGluXCIsXG4gIFwicmVtb3ZlLXNlbGVjdGlvblwiOlwiaWNvbm9pci1yZW1vdmUtc2VsZWN0aW9uXCIsXG4gIFwicmVtb3ZlLXNxdWFyZVwiOlwiaWNvbm9pci1yZW1vdmUtc3F1YXJlXCIsXG4gIFwicmVtb3ZlLXVzZXJcIjpcImljb25vaXItcmVtb3ZlLXVzZXJcIixcbiAgXCJyZXBlYXQtb25jZVwiOlwiaWNvbm9pci1yZXBlYXQtb25jZVwiLFxuICBcInJlcGVhdFwiOlwiaWNvbm9pci1yZXBlYXRcIixcbiAgXCJyZXBseS10by1tZXNzYWdlXCI6XCJpY29ub2lyLXJlcGx5LXRvLW1lc3NhZ2VcIixcbiAgXCJyZXBseVwiOlwiaWNvbm9pci1yZXBseVwiLFxuICBcInJlcG9ydC1jb2x1bW5zXCI6XCJpY29ub2lyLXJlcG9ydC1jb2x1bW5zXCIsXG4gIFwicmVwb3J0c1wiOlwiaWNvbm9pci1yZXBvcnRzXCIsXG4gIFwicmVwb3NpdG9yeVwiOlwiaWNvbm9pci1yZXBvc2l0b3J5XCIsXG4gIFwicmVzdGFydFwiOlwiaWNvbm9pci1yZXN0YXJ0XCIsXG4gIFwicmV3aW5kXCI6XCJpY29ub2lyLXJld2luZFwiLFxuICBcInJob21idXNcIjpcImljb25vaXItcmhvbWJ1c1wiLFxuICBcInJpZ2h0LXJvdW5kLWFycm93XCI6XCJpY29ub2lyLXJpZ2h0LXJvdW5kLWFycm93XCIsXG4gIFwicmluZ3NcIjpcImljb25vaXItcmluZ3NcIixcbiAgXCJyb2NrZXRcIjpcImljb25vaXItcm9ja2V0XCIsXG4gIFwicm9va1wiOlwiaWNvbm9pci1yb29rXCIsXG4gIFwicm90YXRlLWNhbWVyYS1sZWZ0XCI6XCJpY29ub2lyLXJvdGF0ZS1jYW1lcmEtbGVmdFwiLFxuICBcInJvdGF0ZS1jYW1lcmEtcmlnaHRcIjpcImljb25vaXItcm90YXRlLWNhbWVyYS1yaWdodFwiLFxuICBcInJvdW5kLWZsYXNrXCI6XCJpY29ub2lyLXJvdW5kLWZsYXNrXCIsXG4gIFwicm91bmRlZC1taXJyb3JcIjpcImljb25vaXItcm91bmRlZC1taXJyb3JcIixcbiAgXCJyc3MtZmVlZC10YWdcIjpcImljb25vaXItcnNzLWZlZWQtdGFnXCIsXG4gIFwicnNzLWZlZWRcIjpcImljb25vaXItcnNzLWZlZWRcIixcbiAgXCJydWJpay1jdWJlXCI6XCJpY29ub2lyLXJ1YmlrLWN1YmVcIixcbiAgXCJydWxlci1hZGRcIjpcImljb25vaXItcnVsZXItYWRkXCIsXG4gIFwicnVsZXItY29tYmluZVwiOlwiaWNvbm9pci1ydWxlci1jb21iaW5lXCIsXG4gIFwicnVsZXItcmVtb3ZlXCI6XCJpY29ub2lyLXJ1bGVyLXJlbW92ZVwiLFxuICBcInJ1bGVyXCI6XCJpY29ub2lyLXJ1bGVyXCIsXG4gIFwicnVubmluZ1wiOlwiaWNvbm9pci1ydW5uaW5nXCIsXG4gIFwic2FmYXJpXCI6XCJpY29ub2lyLXNhZmFyaVwiLFxuICBcInNhbmRhbHNcIjpcImljb25vaXItc2FuZGFsc1wiLFxuICBcInNhdmUtYWN0aW9uLWZsb3BweVwiOlwiaWNvbm9pci1zYXZlLWFjdGlvbi1mbG9wcHlcIixcbiAgXCJzYXZlLWZsb3BweS1kaXNrXCI6XCJpY29ub2lyLXNhdmUtZmxvcHB5LWRpc2tcIixcbiAgXCJzY2FsZS1mcmFtZS1lbmxhcmdlXCI6XCJpY29ub2lyLXNjYWxlLWZyYW1lLWVubGFyZ2VcIixcbiAgXCJzY2FsZS1mcmFtZS1yZWR1Y2VcIjpcImljb25vaXItc2NhbGUtZnJhbWUtcmVkdWNlXCIsXG4gIFwic2Nhbi1iYXJjb2RlXCI6XCJpY29ub2lyLXNjYW4tYmFyY29kZVwiLFxuICBcInNjYW4tcXItY29kZVwiOlwiaWNvbm9pci1zY2FuLXFyLWNvZGVcIixcbiAgXCJzY2FubmluZ1wiOlwiaWNvbm9pci1zY2FubmluZ1wiLFxuICBcInNjYXJmXCI6XCJpY29ub2lyLXNjYXJmXCIsXG4gIFwic2Npc3Nvci1hbHRcIjpcImljb25vaXItc2Npc3Nvci1hbHRcIixcbiAgXCJzY2lzc29yXCI6XCJpY29ub2lyLXNjaXNzb3JcIixcbiAgXCJzY3JlZW5zaG90XCI6XCJpY29ub2lyLXNjcmVlbnNob3RcIixcbiAgXCJzZWEtYW5kLXN1blwiOlwiaWNvbm9pci1zZWEtYW5kLXN1blwiLFxuICBcInNlYS13YXZlc1wiOlwiaWNvbm9pci1zZWEtd2F2ZXNcIixcbiAgXCJzZWFyY2gtZW5naW5lXCI6XCJpY29ub2lyLXNlYXJjaC1lbmdpbmVcIixcbiAgXCJzZWFyY2gtZm9udFwiOlwiaWNvbm9pci1zZWFyY2gtZm9udFwiLFxuICBcInNlYXJjaC13aW5kb3dcIjpcImljb25vaXItc2VhcmNoLXdpbmRvd1wiLFxuICBcInNlYXJjaFwiOlwiaWNvbm9pci1zZWFyY2hcIixcbiAgXCJzZWN1cmUtd2luZG93XCI6XCJpY29ub2lyLXNlY3VyZS13aW5kb3dcIixcbiAgXCJzZWN1cml0eS1wYXNzXCI6XCJpY29ub2lyLXNlY3VyaXR5LXBhc3NcIixcbiAgXCJzZWxlY3Qtd2luZG93XCI6XCJpY29ub2lyLXNlbGVjdC13aW5kb3dcIixcbiAgXCJzZWxlY3Rpb25cIjpcImljb25vaXItc2VsZWN0aW9uXCIsXG4gIFwic2VsZWN0aXZlLXRvb2xcIjpcImljb25vaXItc2VsZWN0aXZlLXRvb2xcIixcbiAgXCJzZW5kLWRpYWdvbmFsXCI6XCJpY29ub2lyLXNlbmQtZGlhZ29uYWxcIixcbiAgXCJzZW5kLWRvbGxhcnNcIjpcImljb25vaXItc2VuZC1kb2xsYXJzXCIsXG4gIFwic2VuZC1ldXJvc1wiOlwiaWNvbm9pci1zZW5kLWV1cm9zXCIsXG4gIFwic2VuZC1tYWlsXCI6XCJpY29ub2lyLXNlbmQtbWFpbFwiLFxuICBcInNlbmQtcG91bmRzXCI6XCJpY29ub2lyLXNlbmQtcG91bmRzXCIsXG4gIFwic2VuZC15ZW5zXCI6XCJpY29ub2lyLXNlbmQteWVuc1wiLFxuICBcInNlbmRcIjpcImljb25vaXItc2VuZFwiLFxuICBcInNlcnZlci1jb25uZWN0aW9uXCI6XCJpY29ub2lyLXNlcnZlci1jb25uZWN0aW9uXCIsXG4gIFwic2VydmVyXCI6XCJpY29ub2lyLXNlcnZlclwiLFxuICBcInNldHRpbmdzLWNsb3VkXCI6XCJpY29ub2lyLXNldHRpbmdzLWNsb3VkXCIsXG4gIFwic2V0dGluZ3MtcHJvZmlsZXNcIjpcImljb25vaXItc2V0dGluZ3MtcHJvZmlsZXNcIixcbiAgXCJzZXR0aW5nc1wiOlwiaWNvbm9pci1zZXR0aW5nc1wiLFxuICBcInNoYXJlLWFuZHJvaWRcIjpcImljb25vaXItc2hhcmUtYW5kcm9pZFwiLFxuICBcInNoYXJlLWlvc1wiOlwiaWNvbm9pci1zaGFyZS1pb3NcIixcbiAgXCJzaGllbGQtYWRkXCI6XCJpY29ub2lyLXNoaWVsZC1hZGRcIixcbiAgXCJzaGllbGQtYWxlcnRcIjpcImljb25vaXItc2hpZWxkLWFsZXJ0XCIsXG4gIFwic2hpZWxkLWFsdFwiOlwiaWNvbm9pci1zaGllbGQtYWx0XCIsXG4gIFwic2hpZWxkLWJyb2tlblwiOlwiaWNvbm9pci1zaGllbGQtYnJva2VuXCIsXG4gIFwic2hpZWxkLWNoZWNrXCI6XCJpY29ub2lyLXNoaWVsZC1jaGVja1wiLFxuICBcInNoaWVsZC1jcm9zc1wiOlwiaWNvbm9pci1zaGllbGQtY3Jvc3NcIixcbiAgXCJzaGllbGQtZG93bmxvYWRcIjpcImljb25vaXItc2hpZWxkLWRvd25sb2FkXCIsXG4gIFwic2hpZWxkLWV5ZVwiOlwiaWNvbm9pci1zaGllbGQtZXllXCIsXG4gIFwic2hpZWxkLWxvYWRpbmdcIjpcImljb25vaXItc2hpZWxkLWxvYWRpbmdcIixcbiAgXCJzaGllbGQtbWludXNcIjpcImljb25vaXItc2hpZWxkLW1pbnVzXCIsXG4gIFwic2hpZWxkLXF1ZXN0aW9uXCI6XCJpY29ub2lyLXNoaWVsZC1xdWVzdGlvblwiLFxuICBcInNoaWVsZC1zZWFyY2hcIjpcImljb25vaXItc2hpZWxkLXNlYXJjaFwiLFxuICBcInNoaWVsZC11cGxvYWRcIjpcImljb25vaXItc2hpZWxkLXVwbG9hZFwiLFxuICBcInNoaWVsZFwiOlwiaWNvbm9pci1zaGllbGRcIixcbiAgXCJzaG9wLWFsdFwiOlwiaWNvbm9pci1zaG9wLWFsdFwiLFxuICBcInNob3BcIjpcImljb25vaXItc2hvcFwiLFxuICBcInNob3BwaW5nLWJhZy1hZGRcIjpcImljb25vaXItc2hvcHBpbmctYmFnLWFkZFwiLFxuICBcInNob3BwaW5nLWJhZy1hbHRcIjpcImljb25vaXItc2hvcHBpbmctYmFnLWFsdFwiLFxuICBcInNob3BwaW5nLWJhZy1hcnJvdy1kb3duXCI6XCJpY29ub2lyLXNob3BwaW5nLWJhZy1hcnJvdy1kb3duXCIsXG4gIFwic2hvcHBpbmctYmFnLWFycm93LXVwXCI6XCJpY29ub2lyLXNob3BwaW5nLWJhZy1hcnJvdy11cFwiLFxuICBcInNob3BwaW5nLWJhZy1jaGVja1wiOlwiaWNvbm9pci1zaG9wcGluZy1iYWctY2hlY2tcIixcbiAgXCJzaG9wcGluZy1iYWctaXNzdWVcIjpcImljb25vaXItc2hvcHBpbmctYmFnLWlzc3VlXCIsXG4gIFwic2hvcHBpbmctYmFnLXJlbW92ZVwiOlwiaWNvbm9pci1zaG9wcGluZy1iYWctcmVtb3ZlXCIsXG4gIFwic2hvcHBpbmctYmFnXCI6XCJpY29ub2lyLXNob3BwaW5nLWJhZ1wiLFxuICBcInNob3BwaW5nLWNvZGUtY2hlY2tcIjpcImljb25vaXItc2hvcHBpbmctY29kZS1jaGVja1wiLFxuICBcInNob3BwaW5nLWNvZGUtZXJyb3JcIjpcImljb25vaXItc2hvcHBpbmctY29kZS1lcnJvclwiLFxuICBcInNob3BwaW5nLWNvZGVcIjpcImljb25vaXItc2hvcHBpbmctY29kZVwiLFxuICBcInNob3J0LXBhbnRzLWFsdFwiOlwiaWNvbm9pci1zaG9ydC1wYW50cy1hbHRcIixcbiAgXCJzaG9ydC1wYW50c1wiOlwiaWNvbm9pci1zaG9ydC1wYW50c1wiLFxuICBcInNob3J0Y3V0XCI6XCJpY29ub2lyLXNob3J0Y3V0XCIsXG4gIFwic2h1ZmZsZVwiOlwiaWNvbm9pci1zaHVmZmxlXCIsXG4gIFwic2lkZWJhci1jb2xsYXBzZVwiOlwiaWNvbm9pci1zaWRlYmFyLWNvbGxhcHNlXCIsXG4gIFwic2lkZWJhci1leHBhbmRcIjpcImljb25vaXItc2lkZWJhci1leHBhbmRcIixcbiAgXCJzaWdtYS1mdW5jdGlvblwiOlwiaWNvbm9pci1zaWdtYS1mdW5jdGlvblwiLFxuICBcInNpbXBsZS1jYXJ0XCI6XCJpY29ub2lyLXNpbXBsZS1jYXJ0XCIsXG4gIFwic2luZS13YXZlXCI6XCJpY29ub2lyLXNpbmUtd2F2ZVwiLFxuICBcInNpbmdsZS10YXAtZ2VzdHVyZVwiOlwiaWNvbm9pci1zaW5nbGUtdGFwLWdlc3R1cmVcIixcbiAgXCJza2F0ZWJvYXJkXCI6XCJpY29ub2lyLXNrYXRlYm9hcmRcIixcbiAgXCJza2F0ZWJvYXJkaW5nXCI6XCJpY29ub2lyLXNrYXRlYm9hcmRpbmdcIixcbiAgXCJza2lwLW5leHRcIjpcImljb25vaXItc2tpcC1uZXh0XCIsXG4gIFwic2tpcC1wcmV2XCI6XCJpY29ub2lyLXNraXAtcHJldlwiLFxuICBcInNsZWVwZXItY2hhaXJcIjpcImljb25vaXItc2xlZXBlci1jaGFpclwiLFxuICBcInNtYWxsLWxhbXAtYWx0XCI6XCJpY29ub2lyLXNtYWxsLWxhbXAtYWx0XCIsXG4gIFwic21hbGwtbGFtcFwiOlwiaWNvbm9pci1zbWFsbC1sYW1wXCIsXG4gIFwic21hbGwtc2hvcC1hbHRcIjpcImljb25vaXItc21hbGwtc2hvcC1hbHRcIixcbiAgXCJzbWFsbC1zaG9wXCI6XCJpY29ub2lyLXNtYWxsLXNob3BcIixcbiAgXCJzbWFydHBob25lLWRldmljZVwiOlwiaWNvbm9pci1zbWFydHBob25lLWRldmljZVwiLFxuICBcInNtb2tpbmdcIjpcImljb25vaXItc21va2luZ1wiLFxuICBcInNuYXBjaGF0XCI6XCJpY29ub2lyLXNuYXBjaGF0XCIsXG4gIFwic25vdy1mbGFrZVwiOlwiaWNvbm9pci1zbm93LWZsYWtlXCIsXG4gIFwic25vd1wiOlwiaWNvbm9pci1zbm93XCIsXG4gIFwic29hcFwiOlwiaWNvbm9pci1zb2FwXCIsXG4gIFwic29jY2VyLWJhbGxcIjpcImljb25vaXItc29jY2VyLWJhbGxcIixcbiAgXCJzb2ZhXCI6XCJpY29ub2lyLXNvZmFcIixcbiAgXCJzb2lsLWFsdFwiOlwiaWNvbm9pci1zb2lsLWFsdFwiLFxuICBcInNvaWxcIjpcImljb25vaXItc29pbFwiLFxuICBcInNvcnQtZG93blwiOlwiaWNvbm9pci1zb3J0LWRvd25cIixcbiAgXCJzb3J0LXVwXCI6XCJpY29ub2lyLXNvcnQtdXBcIixcbiAgXCJzb3J0XCI6XCJpY29ub2lyLXNvcnRcIixcbiAgXCJzb3VuZC1oaWdoXCI6XCJpY29ub2lyLXNvdW5kLWhpZ2hcIixcbiAgXCJzb3VuZC1sb3dcIjpcImljb25vaXItc291bmQtbG93XCIsXG4gIFwic291bmQtbWluXCI6XCJpY29ub2lyLXNvdW5kLW1pblwiLFxuICBcInNvdW5kLW9mZlwiOlwiaWNvbm9pci1zb3VuZC1vZmZcIixcbiAgXCJzcGFkZXNcIjpcImljb25vaXItc3BhZGVzXCIsXG4gIFwic3BoZXJlXCI6XCJpY29ub2lyLXNwaGVyZVwiLFxuICBcInNwaXJhbFwiOlwiaWNvbm9pci1zcGlyYWxcIixcbiAgXCJzcG9jay1oYW5kLWdlc3R1cmVcIjpcImljb25vaXItc3BvY2staGFuZC1nZXN0dXJlXCIsXG4gIFwic3F1YXJlLXdhdmVcIjpcImljb25vaXItc3F1YXJlLXdhdmVcIixcbiAgXCJzcXVhcmVcIjpcImljb25vaXItc3F1YXJlXCIsXG4gIFwic3RhY2tvdmVyZmxvd1wiOlwiaWNvbm9pci1zdGFja292ZXJmbG93XCIsXG4gIFwic3Rhci1kYXNoZWRcIjpcImljb25vaXItc3Rhci1kYXNoZWRcIixcbiAgXCJzdGFyLWhhbGYtZGFzaGVkXCI6XCJpY29ub2lyLXN0YXItaGFsZi1kYXNoZWRcIixcbiAgXCJzdGFyXCI6XCJpY29ub2lyLXN0YXJcIixcbiAgXCJzdGF0LWRvd25cIjpcImljb25vaXItc3RhdC1kb3duXCIsXG4gIFwic3RhdC11cFwiOlwiaWNvbm9pci1zdGF0LXVwXCIsXG4gIFwic3RhdHMtZG93bi1zcXVhcmVcIjpcImljb25vaXItc3RhdHMtZG93bi1zcXVhcmVcIixcbiAgXCJzdGF0cy1yZXBvcnRcIjpcImljb25vaXItc3RhdHMtcmVwb3J0XCIsXG4gIFwic3RhdHMtdXAtc3F1YXJlXCI6XCJpY29ub2lyLXN0YXRzLXVwLXNxdWFyZVwiLFxuICBcInN0cmF0ZWd5XCI6XCJpY29ub2lyLXN0cmF0ZWd5XCIsXG4gIFwic3RyZXRjaGluZ1wiOlwiaWNvbm9pci1zdHJldGNoaW5nXCIsXG4gIFwic3Ryb2xsZXJcIjpcImljb25vaXItc3Ryb2xsZXJcIixcbiAgXCJzdHlsZS1ib3JkZXJcIjpcImljb25vaXItc3R5bGUtYm9yZGVyXCIsXG4gIFwic3VibWl0LWRvY3VtZW50XCI6XCJpY29ub2lyLXN1Ym1pdC1kb2N1bWVudFwiLFxuICBcInN1YnN0cmFjdFwiOlwiaWNvbm9pci1zdWJzdHJhY3RcIixcbiAgXCJzdWdnZXN0aW9uXCI6XCJpY29ub2lyLXN1Z2dlc3Rpb25cIixcbiAgXCJzdW4tbGlnaHRcIjpcImljb25vaXItc3VuLWxpZ2h0XCIsXG4gIFwic3ZnLWZvcm1hdFwiOlwiaWNvbm9pci1zdmctZm9ybWF0XCIsXG4gIFwic3dpbW1pbmdcIjpcImljb25vaXItc3dpbW1pbmdcIixcbiAgXCJzd2lwZS1kb3duLWdlc3R1cmVcIjpcImljb25vaXItc3dpcGUtZG93bi1nZXN0dXJlXCIsXG4gIFwic3dpcGUtbGVmdC1nZXN0dXJlXCI6XCJpY29ub2lyLXN3aXBlLWxlZnQtZ2VzdHVyZVwiLFxuICBcInN3aXBlLXJpZ2h0LWdlc3R1cmVcIjpcImljb25vaXItc3dpcGUtcmlnaHQtZ2VzdHVyZVwiLFxuICBcInN3aXBlLXR3by1maW5nZXJzLWRvd24tZ2VzdHVyZVwiOlwiaWNvbm9pci1zd2lwZS10d28tZmluZ2Vycy1kb3duLWdlc3R1cmVcIixcbiAgXCJzd2lwZS10d28tZmluZ2Vycy1sZWZ0LWdlc3R1cmVcIjpcImljb25vaXItc3dpcGUtdHdvLWZpbmdlcnMtbGVmdC1nZXN0dXJlXCIsXG4gIFwic3dpcGUtdHdvLWZpbmdlcnMtcmlnaHQtZ2VzdHVyZVwiOlwiaWNvbm9pci1zd2lwZS10d28tZmluZ2Vycy1yaWdodC1nZXN0dXJlXCIsXG4gIFwic3dpcGUtdHdvLWZpbmdlcnMtdXAtZ2VzdHVyZVwiOlwiaWNvbm9pci1zd2lwZS10d28tZmluZ2Vycy11cC1nZXN0dXJlXCIsXG4gIFwic3dpcGUtdXAtZ2VzdHVyZVwiOlwiaWNvbm9pci1zd2lwZS11cC1nZXN0dXJlXCIsXG4gIFwic3dpdGNoLW9mZlwiOlwiaWNvbm9pci1zd2l0Y2gtb2ZmXCIsXG4gIFwic3dpdGNoLW9uXCI6XCJpY29ub2lyLXN3aXRjaC1vblwiLFxuICBcInN5c3RlbS1yZXN0YXJ0XCI6XCJpY29ub2lyLXN5c3RlbS1yZXN0YXJ0XCIsXG4gIFwic3lzdGVtLXNodXRcIjpcImljb25vaXItc3lzdGVtLXNodXRcIixcbiAgXCJ0LXNoaXJ0XCI6XCJpY29ub2lyLXQtc2hpcnRcIixcbiAgXCJ0YWJsZS0yLWNvbHVtbnNcIjpcImljb25vaXItdGFibGUtMi1jb2x1bW5zXCIsXG4gIFwidGFibGUtcm93c1wiOlwiaWNvbm9pci10YWJsZS1yb3dzXCIsXG4gIFwidGFibGVcIjpcImljb25vaXItdGFibGVcIixcbiAgXCJ0YXNrLWxpc3RcIjpcImljb25vaXItdGFzay1saXN0XCIsXG4gIFwidGVsZWdyYW0tY2lyY2xlXCI6XCJpY29ub2lyLXRlbGVncmFtLWNpcmNsZVwiLFxuICBcInRlbGVncmFtXCI6XCJpY29ub2lyLXRlbGVncmFtXCIsXG4gIFwidGVubmlzLWJhbGwtYWx0XCI6XCJpY29ub2lyLXRlbm5pcy1iYWxsLWFsdFwiLFxuICBcInRlbm5pcy1iYWxsXCI6XCJpY29ub2lyLXRlbm5pcy1iYWxsXCIsXG4gIFwidGVybWluYWwtdGFnXCI6XCJpY29ub2lyLXRlcm1pbmFsLXRhZ1wiLFxuICBcInRlcm1pbmFsXCI6XCJpY29ub2lyLXRlcm1pbmFsXCIsXG4gIFwidGVzdC10dWJlXCI6XCJpY29ub2lyLXRlc3QtdHViZVwiLFxuICBcInRleHQtYWx0XCI6XCJpY29ub2lyLXRleHQtYWx0XCIsXG4gIFwidGV4dC1ib3hcIjpcImljb25vaXItdGV4dC1ib3hcIixcbiAgXCJ0ZXh0LXNpemVcIjpcImljb25vaXItdGV4dC1zaXplXCIsXG4gIFwidGV4dFwiOlwiaWNvbm9pci10ZXh0XCIsXG4gIFwidGhyZWUtcG9pbnRzLWNpcmNsZVwiOlwiaWNvbm9pci10aHJlZS1wb2ludHMtY2lyY2xlXCIsXG4gIFwidGhyZWUtc3RhcnNcIjpcImljb25vaXItdGhyZWUtc3RhcnNcIixcbiAgXCJ0aHVtYnMtZG93blwiOlwiaWNvbm9pci10aHVtYnMtZG93blwiLFxuICBcInRodW1icy11cFwiOlwiaWNvbm9pci10aHVtYnMtdXBcIixcbiAgXCJ0aHVuZGVyc3Rvcm1cIjpcImljb25vaXItdGh1bmRlcnN0b3JtXCIsXG4gIFwidGlmLWZvcm1hdFwiOlwiaWNvbm9pci10aWYtZm9ybWF0XCIsXG4gIFwidGlmZi1mb3JtYXRcIjpcImljb25vaXItdGlmZi1mb3JtYXRcIixcbiAgXCJ0aWt0b2tcIjpcImljb25vaXItdGlrdG9rXCIsXG4gIFwidGltZXItb2ZmXCI6XCJpY29ub2lyLXRpbWVyLW9mZlwiLFxuICBcInRpbWVyXCI6XCJpY29ub2lyLXRpbWVyXCIsXG4gIFwidG9vbHNcIjpcImljb25vaXItdG9vbHNcIixcbiAgXCJ0b3VybmFtZW50XCI6XCJpY29ub2lyLXRvdXJuYW1lbnRcIixcbiAgXCJ0b3dlci1jaGVja1wiOlwiaWNvbm9pci10b3dlci1jaGVja1wiLFxuICBcInRvd2VyLW5vLWFjY2Vzc1wiOlwiaWNvbm9pci10b3dlci1uby1hY2Nlc3NcIixcbiAgXCJ0b3dlci13YXJuaW5nXCI6XCJpY29ub2lyLXRvd2VyLXdhcm5pbmdcIixcbiAgXCJ0b3dlclwiOlwiaWNvbm9pci10b3dlclwiLFxuICBcInRyYWRlbWFya1wiOlwiaWNvbm9pci10cmFkZW1hcmtcIixcbiAgXCJ0cmFpblwiOlwiaWNvbm9pci10cmFpblwiLFxuICBcInRyYW1cIjpcImljb25vaXItdHJhbVwiLFxuICBcInRyYW5zaXRpb24tZG93blwiOlwiaWNvbm9pci10cmFuc2l0aW9uLWRvd25cIixcbiAgXCJ0cmFuc2l0aW9uLWxlZnRcIjpcImljb25vaXItdHJhbnNpdGlvbi1sZWZ0XCIsXG4gIFwidHJhbnNpdGlvbi1yaWdodFwiOlwiaWNvbm9pci10cmFuc2l0aW9uLXJpZ2h0XCIsXG4gIFwidHJhbnNpdGlvbi11cFwiOlwiaWNvbm9pci10cmFuc2l0aW9uLXVwXCIsXG4gIFwidHJhbnNsYXRlXCI6XCJpY29ub2lyLXRyYW5zbGF0ZVwiLFxuICBcInRyYXNoXCI6XCJpY29ub2lyLXRyYXNoXCIsXG4gIFwidHJlYWRtaWxsXCI6XCJpY29ub2lyLXRyZWFkbWlsbFwiLFxuICBcInRyZWVcIjpcImljb25vaXItdHJlZVwiLFxuICBcInRyZWtraW5nXCI6XCJpY29ub2lyLXRyZWtraW5nXCIsXG4gIFwidHJlbGxvXCI6XCJpY29ub2lyLXRyZWxsb1wiLFxuICBcInRyaWFuZ2xlLWZsYWctY2lyY2xlXCI6XCJpY29ub2lyLXRyaWFuZ2xlLWZsYWctY2lyY2xlXCIsXG4gIFwidHJpYW5nbGUtZmxhZy10d28tc3RyaXBlc1wiOlwiaWNvbm9pci10cmlhbmdsZS1mbGFnLXR3by1zdHJpcGVzXCIsXG4gIFwidHJpYW5nbGUtZmxhZ1wiOlwiaWNvbm9pci10cmlhbmdsZS1mbGFnXCIsXG4gIFwidHJpYW5nbGVcIjpcImljb25vaXItdHJpYW5nbGVcIixcbiAgXCJ0cm9waHlcIjpcImljb25vaXItdHJvcGh5XCIsXG4gIFwidHJ1Y2stbGVuZ3RoXCI6XCJpY29ub2lyLXRydWNrLWxlbmd0aFwiLFxuICBcInRydWNrXCI6XCJpY29ub2lyLXRydWNrXCIsXG4gIFwidHVubmVsXCI6XCJpY29ub2lyLXR1bm5lbFwiLFxuICBcInR2LWZpeFwiOlwiaWNvbm9pci10di1maXhcIixcbiAgXCJ0di1pc3N1ZVwiOlwiaWNvbm9pci10di1pc3N1ZVwiLFxuICBcInR2XCI6XCJpY29ub2lyLXR2XCIsXG4gIFwidHdpdHRlci12ZXJpZmllZC1iYWRnZVwiOlwiaWNvbm9pci10d2l0dGVyLXZlcmlmaWVkLWJhZGdlXCIsXG4gIFwidHdpdHRlclwiOlwiaWNvbm9pci10d2l0dGVyXCIsXG4gIFwidHdvLXBvaW50cy1jaXJjbGVcIjpcImljb25vaXItdHdvLXBvaW50cy1jaXJjbGVcIixcbiAgXCJ0d28tc2VhdGVyLXNvZmFcIjpcImljb25vaXItdHdvLXNlYXRlci1zb2ZhXCIsXG4gIFwidHlwZVwiOlwiaWNvbm9pci10eXBlXCIsXG4gIFwidW1icmVsbGEtZnVsbFwiOlwiaWNvbm9pci11bWJyZWxsYS1mdWxsXCIsXG4gIFwidW5kZXJsaW5lLXNxdWFyZVwiOlwiaWNvbm9pci11bmRlcmxpbmUtc3F1YXJlXCIsXG4gIFwidW5kZXJsaW5lXCI6XCJpY29ub2lyLXVuZGVybGluZVwiLFxuICBcInVuZG8tYWN0aW9uXCI6XCJpY29ub2lyLXVuZG8tYWN0aW9uXCIsXG4gIFwidW5kby1jaXJjbGVcIjpcImljb25vaXItdW5kby1jaXJjbGVcIixcbiAgXCJ1bmRvXCI6XCJpY29ub2lyLXVuZG9cIixcbiAgXCJ1bmlvbi1hbHRcIjpcImljb25vaXItdW5pb24tYWx0XCIsXG4gIFwidW5pb24taG9yaXotYWx0XCI6XCJpY29ub2lyLXVuaW9uLWhvcml6LWFsdFwiLFxuICBcInVuaW9uXCI6XCJpY29ub2lyLXVuaW9uXCIsXG4gIFwidW5pdHktNVwiOlwiaWNvbm9pci11bml0eS01XCIsXG4gIFwidW5pdHlcIjpcImljb25vaXItdW5pdHlcIixcbiAgXCJ1cC1yb3VuZC1hcnJvd1wiOlwiaWNvbm9pci11cC1yb3VuZC1hcnJvd1wiLFxuICBcInVwbG9hZC1kYXRhLXdpbmRvd1wiOlwiaWNvbm9pci11cGxvYWQtZGF0YS13aW5kb3dcIixcbiAgXCJ1cGxvYWQtc3F1YXJlXCI6XCJpY29ub2lyLXVwbG9hZC1zcXVhcmVcIixcbiAgXCJ1cGxvYWRcIjpcImljb25vaXItdXBsb2FkXCIsXG4gIFwidXNiXCI6XCJpY29ub2lyLXVzYlwiLFxuICBcInVzZXItYmFnXCI6XCJpY29ub2lyLXVzZXItYmFnXCIsXG4gIFwidXNlci1jYXJ0XCI6XCJpY29ub2lyLXVzZXItY2FydFwiLFxuICBcInVzZXItY2lyY2xlXCI6XCJpY29ub2lyLXVzZXItY2lyY2xlXCIsXG4gIFwidXNlci1jcm93blwiOlwiaWNvbm9pci11c2VyLWNyb3duXCIsXG4gIFwidXNlci1sb3ZlXCI6XCJpY29ub2lyLXVzZXItbG92ZVwiLFxuICBcInVzZXItc2NhblwiOlwiaWNvbm9pci11c2VyLXNjYW5cIixcbiAgXCJ1c2VyLXNxdWFyZVwiOlwiaWNvbm9pci11c2VyLXNxdWFyZVwiLFxuICBcInVzZXItc3RhclwiOlwiaWNvbm9pci11c2VyLXN0YXJcIixcbiAgXCJ1c2VyXCI6XCJpY29ub2lyLXVzZXJcIixcbiAgXCJ2ZWdhbi1jaXJjbGVcIjpcImljb25vaXItdmVnYW4tY2lyY2xlXCIsXG4gIFwidmVnYW4tc3F1YXJlXCI6XCJpY29ub2lyLXZlZ2FuLXNxdWFyZVwiLFxuICBcInZlZ2FuXCI6XCJpY29ub2lyLXZlZ2FuXCIsXG4gIFwidmVyaWZpZWQtYmFkZ2VcIjpcImljb25vaXItdmVyaWZpZWQtYmFkZ2VcIixcbiAgXCJ2ZXJpZmllZC11c2VyXCI6XCJpY29ub2lyLXZlcmlmaWVkLXVzZXJcIixcbiAgXCJ2ZXJ0aWNhbC1tZXJnZVwiOlwiaWNvbm9pci12ZXJ0aWNhbC1tZXJnZVwiLFxuICBcInZlcnRpY2FsLXNwbGl0XCI6XCJpY29ub2lyLXZlcnRpY2FsLXNwbGl0XCIsXG4gIFwidmlhbHNcIjpcImljb25vaXItdmlhbHNcIixcbiAgXCJ2aWRlby1jYW1lcmEtb2ZmXCI6XCJpY29ub2lyLXZpZGVvLWNhbWVyYS1vZmZcIixcbiAgXCJ2aWRlby1jYW1lcmFcIjpcImljb25vaXItdmlkZW8tY2FtZXJhXCIsXG4gIFwidmlkZW8tcHJvamVjdG9yXCI6XCJpY29ub2lyLXZpZGVvLXByb2plY3RvclwiLFxuICBcInZpZXctY29sdW1ucy0yXCI6XCJpY29ub2lyLXZpZXctY29sdW1ucy0yXCIsXG4gIFwidmlldy1jb2x1bW5zLTNcIjpcImljb25vaXItdmlldy1jb2x1bW5zLTNcIixcbiAgXCJ2aWV3LWdyaWRcIjpcImljb25vaXItdmlldy1ncmlkXCIsXG4gIFwidmlldy1zdHJ1Y3R1cmUtZG93blwiOlwiaWNvbm9pci12aWV3LXN0cnVjdHVyZS1kb3duXCIsXG4gIFwidmlldy1zdHJ1Y3R1cmUtdXBcIjpcImljb25vaXItdmlldy1zdHJ1Y3R1cmUtdXBcIixcbiAgXCJ2b2ljZS1jaXJjbGVcIjpcImljb25vaXItdm9pY2UtY2lyY2xlXCIsXG4gIFwidm9pY2UtZXJyb3JcIjpcImljb25vaXItdm9pY2UtZXJyb3JcIixcbiAgXCJ2b2ljZS1sb2NrLWNpcmNsZVwiOlwiaWNvbm9pci12b2ljZS1sb2NrLWNpcmNsZVwiLFxuICBcInZvaWNlLW9rXCI6XCJpY29ub2lyLXZvaWNlLW9rXCIsXG4gIFwidm9pY2UtcGhvbmVcIjpcImljb25vaXItdm9pY2UtcGhvbmVcIixcbiAgXCJ2b2ljZS1zY2FuXCI6XCJpY29ub2lyLXZvaWNlLXNjYW5cIixcbiAgXCJ2b2ljZS1zcXVhcmVcIjpcImljb25vaXItdm9pY2Utc3F1YXJlXCIsXG4gIFwidm9pY2VcIjpcImljb25vaXItdm9pY2VcIixcbiAgXCJ2ci1zeW1ib2xcIjpcImljb25vaXItdnItc3ltYm9sXCIsXG4gIFwid2Fpc3RcIjpcImljb25vaXItd2Fpc3RcIixcbiAgXCJ3YWxraW5nXCI6XCJpY29ub2lyLXdhbGtpbmdcIixcbiAgXCJ3YWxsZXRcIjpcImljb25vaXItd2FsbGV0XCIsXG4gIFwid2FybmluZy1jaXJjbGVcIjpcImljb25vaXItd2FybmluZy1jaXJjbGVcIixcbiAgXCJ3YXJuaW5nLWhleGFnb25cIjpcImljb25vaXItd2FybmluZy1oZXhhZ29uXCIsXG4gIFwid2FybmluZy1zcXVhcmVcIjpcImljb25vaXItd2FybmluZy1zcXVhcmVcIixcbiAgXCJ3YXJuaW5nLXRyaWFuZ2xlXCI6XCJpY29ub2lyLXdhcm5pbmctdHJpYW5nbGVcIixcbiAgXCJ3YXJuaW5nLXdpbmRvd1wiOlwiaWNvbm9pci13YXJuaW5nLXdpbmRvd1wiLFxuICBcIndhc2hcIjpcImljb25vaXItd2FzaFwiLFxuICBcIndhc2hpbmctbWFjaGluZVwiOlwiaWNvbm9pci13YXNoaW5nLW1hY2hpbmVcIixcbiAgXCJ3YXRlcmluZy1zb2lsXCI6XCJpY29ub2lyLXdhdGVyaW5nLXNvaWxcIixcbiAgXCJ3ZWItd2luZG93LWNsb3NlXCI6XCJpY29ub2lyLXdlYi13aW5kb3ctY2xvc2VcIixcbiAgXCJ3ZWItd2luZG93LWVuZXJneS1jb25zdW1wdGlvblwiOlwiaWNvbm9pci13ZWItd2luZG93LWVuZXJneS1jb25zdW1wdGlvblwiLFxuICBcIndlYi13aW5kb3dcIjpcImljb25vaXItd2ViLXdpbmRvd1wiLFxuICBcIndlYnAtZm9ybWF0XCI6XCJpY29ub2lyLXdlYnAtZm9ybWF0XCIsXG4gIFwid2VpZ2h0LWFsdFwiOlwiaWNvbm9pci13ZWlnaHQtYWx0XCIsXG4gIFwid2VpZ2h0XCI6XCJpY29ub2lyLXdlaWdodFwiLFxuICBcIndoaXRlLWZsYWdcIjpcImljb25vaXItd2hpdGUtZmxhZ1wiLFxuICBcIndpZmktZXJyb3JcIjpcImljb25vaXItd2lmaS1lcnJvclwiLFxuICBcIndpZmktaXNzdWVcIjpcImljb25vaXItd2lmaS1pc3N1ZVwiLFxuICBcIndpZmktb2ZmXCI6XCJpY29ub2lyLXdpZmktb2ZmXCIsXG4gIFwid2lmaS1zaWduYWwtbm9uZVwiOlwiaWNvbm9pci13aWZpLXNpZ25hbC1ub25lXCIsXG4gIFwid2lmaS10YWdcIjpcImljb25vaXItd2lmaS10YWdcIixcbiAgXCJ3aWZpXCI6XCJpY29ub2lyLXdpZmlcIixcbiAgXCJ3aW5kXCI6XCJpY29ub2lyLXdpbmRcIixcbiAgXCJ3aW5kb3dzXCI6XCJpY29ub2lyLXdpbmRvd3NcIixcbiAgXCJ3b21lbi10LXNoaXJ0XCI6XCJpY29ub2lyLXdvbWVuLXQtc2hpcnRcIixcbiAgXCJ3cmFwLXRleHRcIjpcImljb25vaXItd3JhcC10ZXh0XCIsXG4gIFwid3JlbmNoXCI6XCJpY29ub2lyLXdyZW5jaFwiLFxuICBcIndyaXN0d2F0Y2hcIjpcImljb25vaXItd3Jpc3R3YXRjaFwiLFxuICBcInd3d1wiOlwiaWNvbm9pci13d3dcIixcbiAgXCJ4LWNvb3JkaW5hdGVcIjpcImljb25vaXIteC1jb29yZGluYXRlXCIsXG4gIFwieGJveC1hXCI6XCJpY29ub2lyLXhib3gtYVwiLFxuICBcInhib3gtYlwiOlwiaWNvbm9pci14Ym94LWJcIixcbiAgXCJ4Ym94LXhcIjpcImljb25vaXIteGJveC14XCIsXG4gIFwieGJveC15XCI6XCJpY29ub2lyLXhib3gteVwiLFxuICBcInhyYXktdmlld1wiOlwiaWNvbm9pci14cmF5LXZpZXdcIixcbiAgXCJ5LWNvb3JkaW5hdGVcIjpcImljb25vaXIteS1jb29yZGluYXRlXCIsXG4gIFwieWVuLXNxdWFyZVwiOlwiaWNvbm9pci15ZW4tc3F1YXJlXCIsXG4gIFwieWVuXCI6XCJpY29ub2lyLXllblwiLFxuICBcInlvZ2FcIjpcImljb25vaXIteW9nYVwiLFxuICBcInlvdXR1YmVcIjpcImljb25vaXIteW91dHViZVwiLFxuICBcInotY29vcmRpbmF0ZVwiOlwiaWNvbm9pci16LWNvb3JkaW5hdGVcIixcbiAgXCJ6b29tLWluXCI6XCJpY29ub2lyLXpvb20taW5cIixcbiAgXCJ6b29tLW91dFwiOlwiaWNvbm9pci16b29tLW91dFwiXG59YCk7Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBSStCOzs7QUNFL0IsSUFDTSxJQUFrQztBQUR4QyxJQU1hLElBQ1gsRUFBTyxjQUFBLENBQ04sRUFBTyxhQURELFVBQzJCLEVBQU8sU0FBUyxpQkFDbEQsd0JB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QyxXQUFXLHdCQUFrQixRQUFsQixBQUFrQixPQUFsQixTQUFrQixLQUE3QixXQUFXLHFCQUF1QixDQUFBLEdBQUksS0FBSyxPQUFBOzs7QUM1U3JDLElBQU0sVUFBVSxLQUFLLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7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
